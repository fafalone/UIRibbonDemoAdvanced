[Description("UIRibbonDemoAdvanced Main Form")]
[FormDesignerId("5DF96C8A-86DD-4F83-AE62-E2DDFCF9A4F3")]
[PredeclaredId]
Class frmMain
    Option Explicit
    
    'Demo developer options:
    'Enable interaction with the font control
    #Const dbg_enablefont = 1
    
    'Enable filling the MRU list. Reminder: Number of items is set in the ribbon xml file.
    #Const dbg_enablemru = 1
    
    'Enabled saving/loading the ribbon state
    #Const dbg_enablesavestate = 1
                              
    'Use IUIEventLogger (on Windows 8 and above; an alternate way of getting certain messages)
    #Const dbg_enableeventing = 0
    
    ' Use new MSOffice RichEdit supporting color fonts if available.
    'Note: It will automatically fall back to standard msftedit or old riched20 if these dlls are absent; see readme below for details.
    #Const dbg_usenewrichedit = 1
    Private bD2DFound As Boolean
    
    
    #Region "ReadMe"
    /*
        Windows Ribbon Framework UI Demo - Advanced
        Main Form 
        
        Author: Jon Johnson (fafalone)
        Project repository: https://github.com/fafalone/UIRibbonDemoAdvanced (this project)
                            https://github.com/fafalone/UIRibbonDemos (earlier ribbon demos)
        License: MIT License, see LICENCE.md for more info.
        Last updated: 18 Feb 2025 
        
        Changelog:
        (Version 4.0.2, 18 Feb 2025) Minor adjustments to some string contents and build settings. No
                                     code or XML changes.
        (Version 4.0.1, 17 Feb 2025) Initial release of Advanced demo.
        
        This project was developed exclusively in twinBASIC; the code takes advantage of new language
        features wheverever beneficial. It is possible to backport these techniques to use the ribbon
        in VB6 via oleexp.tlb; the Intro project has been backported to provide a proof of concept and
        template of how to do it, but the Intermediate, Galleries, and Advanced Ribbon Demos will remain
        twinBASIC-only projects.
        
        
        The Advanced ribbon Demo is built off the Intermediate and Galleries demos, and includes all
        of their features, then also adding the following new features:

        - Multiple Ribbon Modes: You can select Gallery Mode from the file menu to change the Ribbon
          into the same layout as the Galleries Demo, with only that tab showing.
          
        - Tabs now all have Scaling Policies defined. This allows them to gracefully shrink to smaller
          sizes, with smaller icons or hidden labels, and become single buttons that pop up the full 
          sized groups, before they're simply truncated and an arrow shown like the previous demos.
          The minimum size for the form is disabled to demonstrate this, even though the regular form
          controls don't properly handle sizes smaller than startup so things will get cut off and
          disappear; in a real app you'd manage that part but it's outside the scope of this demo and
          would obstruct seeing the smallest ribbon arrangements.
          
        - Large item drop down gallery for List Type in the text control, like Win7-10 Wordpad.
        
        - Most tabs now have small icons associated with them for display when added to the Quick
          Access toolbar.
          
        - All new commands support multiple DPI options.
        
        - A split button gallery showing a normal menu item list populated from just the XML defs
          instead of dynamically at runtime has been added (the Picture button in text mode).
          
        - A Spinner control has been added to show the use of this control type.
        
        - Project now demonstrates selectively enabling buttons based on conditions; Cut/Copy/Delete
          are now only enabled when text is selected, set when EN_SELCHANGE is received, and the Undo
          and Redo commands are enabled based on invalidating their enabled property before the context
          popups they're on are shown, and setting them according to EM_CANUNDO/EM_CANREDO. Paste is
          enabled by checking EM_CANPASTE on startup, then using AddClipboardFormatListener to be
          notified when the clipboard contents change to check again. Special handling for items not
          created on load is shown with IDC_DELETE.
          
        - The Measurement Units dropdown shows how to create checked menu items, here in a radio fashion
          where the option you choose becomes the only one checked. (As there's no ruler it has no effect
          on the textbox however)
          
        - Added button to set Ribbon colors, using new Ribbon Helper Function SetRibbonColors. 
          Unfortunately, neither of the RGB to HSB algorithms I've tried seem to set them right,
          or there's something wrong like trying to set colors in other controls with extensive
          modification by the DWM theme system.
          
        - The Ribbon state (QAT items and position, min/max, etc) can now be saved and loaded automatically
          by the helper class by setting pUIApp.SettingsFileName to the desired/existing file name as soon
          as it's created.
          To load Ribbon settings, set pUIApp.SettingsFileName immediately after creation.
          To save Ribbon settings, call pUIApp.SaveRibbonSettings from Form_Unload. If you don't specify a
            file name, the name originally set in pUIApp.SettingsFileName is used.
          This demo saves it in App.Path\ribbon.cfg.
          
        - Added pUIApp events for when the ribbon is minimized/maximized and shown/hidden.
           Note: In order to implement this change, the main Ribbon object, UIRibbonFramework, must
                 now be a Public variable in a module; in this demo and if you use my RibbonClasses
                 helpers, contained in Module RibbonHelpers.
        - Added helper functions to query whether the ribbon is minimized/maximized and shown/hidden.
          **NOTE:** Min/max and show/hide appear to be non-functional from code on Windows 10; code to
                    set/read them always returns S_OK following documented methods exactly, but the status
                    never changes and retrieving them always gives False. The UI toggle and hide on resize
                    to too small work.
        
        - The MRU list is now populated with real files. So it will be empty at first; you need to use
          the 'Open' function to add items to it. 
          
        - The IUIEventLogger feature is now enabled by default. It requires Windows 8 or newer, and
          this project adds a version check before trying to enable it to avoid a runtime error.
          
        - Implementations of SDK-defined UIInitPropertyFrom* and most UIPropertyTo* Ribbon macros have
          recently been added to WinDevLib (the package containing all API definitions). In some places, 
          manual methods of obtaining Variants with unsupported types have been replaced with these.
          
        - While I don't fully understand why, in the C++ SDK examples, the command to invalidate
          controls so Update Properties is called always works automatically. In tB, for some reason 
          it doesn't for some controls. I've added workarounds that explicitly set the new states
          and/or call FlushPendingInvalidations, which isn't used in the C++ version but does seem
          to work to properly trigger the ones that don't fire automatically right away like C++.
         
        - I've also verified a manual update technique: You can take the ribbon.bml file generated
          by uicc.exe and replace the APPLICATION_RIBBON resource with it, then manually add BITMAP
          files and string table entries with the correct IDs to update the ribbon without rebuilding
          a whole new project; even in the future when .res files can be imported independently this
          is useful because of the custom gallery resources and non-ribbon resources that need to be
          added to most projects.
          
       - While it's generally desirable to keep resource IDs under the signed Integer limit, which
          requires formally defining blocks like:
          <Command.LabelTitle>
            <String Id="2855">Zoom</String>
          </Command.LabelTitle>
          The XML markup now does show the alternative simpler way in one line where the LabelTitle's
          id will be chosen automatically:
          <Command Name="CmdCentimeters" Symbol="IDC_CMD_CENTIMETERS" Id="16" LabelTitle="Centimeters"/>
          
        - The customize QAT popup now includes items not enabled by default.
          
        - Experimental use of newer RichEdit control that supports Color Fonts, typically used for 
          showing color emojis. For this to work, riched20.dll and msptls.dll from recent MSOffice
          versions must be in the same directory as the .exe.
          This feature is optional. It can be disabled with the dbg_usenewrichedit option at the top
          of this file, or by the absence of the required dlls. If disabled, it falls back to the
          standard system RichEdit (msftedit.dll if available, or the old riched20.dll in System32).
           
        - Not directly Ribbon related but the New, Open, and Save/Save As buttons now work. In this
          demo only saving/loading Rich Text Format (.rtf) and plain text with Unicode encoding
          (.txt) is supported, so the Save As options for Office OpenXML/OpenDocument/Other Formats
          don't have actions bound to them, you must pick the main button or the Rich Text or Plain
          Text buttons for Save As.
          This shows use of the EM_STREAMIN/EM_STREAMOUT/EditStreamCallback method of saving RTF.
        - Also not directly related but the Word Wrap option shows recreating the RichEdit control
          while preserving RTF formatting using a temp file. It does also demonstrate setting a 
          Ribbon checkbox to checked by default though.
        - Another RTF feature, the Picture button/command shows two methods: For Win8+ or Win7+Office
          RichEdit, it uses EM_SETIMAGE. For plain Win7, it uses a hacky shortcut of copying it to the
          clipboard and pasting it in; there's a link in the code describing a more proper (but much 
          more involved) way of doing it.
        - And one more non-Ribbon bonus feature: The Find/Replace buttons are fully working, just
          like Notepad and Wordpad they show the system default Find/Replace dialog, which has been
          set to behave in a similar fashion. Also included is a hooking routine to enable use of
          Tab and Enter in the dialog. These are much simpler implementations than in Krool's Common
          Dialog class/VBCCR, so are much easier to follow to learn how these APIs work, of course
          coming with a cost of not supporting custom templates, dialog customization callback, or
          multiple dialogs open at once.
         
        Requirements: 
        -twinBASIC Beta 677 or higher for this demo; earlier versions will be ok if you don't
         ever set MinWidth/MinHeight (changing them is broken and won't work from Beta 623-676).
         
        -The UI Ribbon is a Windows 7 and newer feature.
        
        -To run from the IDE, restart the compiler and build the exe first.
        
        -To avoid visual glitches when controls are moved/sized on a form containing a ribbon,
         currently you must set the Form's HasDC property to False (recommended), or ensure the
         clip region adjusting code from Form_Load is included (will not work on Windows 7). If
         the latter method is used and AutoRedraw is true, the glitching can still be fixed if
         the clipping code is applied during resize events.
         This demo attempts to handle all scenarios, and differences between glitch resolution
         between Windows versions.
         
        -The code in this app depends on WinDevLib, my expansive library for Windows programming
         which covers large swathes of built in COM interfaces and APIs from major system DLLs,
         they for instance cover everything used in this project, which is why you see no Declares
         or UDTs here. It's included as a twinBASIC Package, which you can add to our own projects
         from the twinSERV package server; more info at https://github.com/fafalone/WinDevLib
         
        -For color emojis, the new riched20.dll and mplts.dll must be in the same directory as the
         exe. These are included as they only come with Office, and then only in the bitness of the,
         installed version of Office, at least for Win10: On Windows 11 the riched20.dll in the new
         Notepad folder (Program Files\WindowsApps\Microsoft.WindowsNotepad\) could be used (64bit only).
         
        Thanks:
        -This project is based on just about every C/C++ Ribbon project I could find, including:
            --Windows 7 SDK Samples
            --Arik Poznanski's Ribbon with C++ Series: 
            http://blogs.microsoft.co.il/arik/2011/06/03/ribbon-with-c-part-1-introduction-to-the-windows-ribbon-framework/
            --Stephen Wiria's Windows Ribbon Framework in Win32 C Application:
            https://www.codeproject.com/Articles/119319/Windows-Ribbon-Framework-in-Win32-C-Application
            --Michael Dunn's Windows 7 Goodies in C++: Introduction to the Ribbon:
            https://www.codeproject.com/Articles/160542/Windows-7-Goodies-in-C-Introduction-to-the-Ribbon
            --The open source project BowPad: https://github.com/stefankueng/BowPad 
        -jpbro for figuring out setting Form.HasDC to False eliminates visual glitching on resize on Win10+ and all the
          time he generously spent helping debug this.
        -And of course, thanks to Wayne Phillips for his incredible work in creating twinBASIC and helping with bug fixes
         and the clipping region workaround for this project.
    */
    #End Region
    
    Private Const sWelcomeD2D As String = "🎨 Welcome to the Advanced Ribbon w/ Direct2D 😍 Demo 🌈"
    Private Const sWelcomeStd As String = "Welcome to the Advanced Ribbon Demo"
    
    Private mWin7 As Boolean
    Private mWin8 As Boolean
    
    Private Const MAX_RESOURCE_LENGTH = 256
    
    [Description("Our class that handles events from the Ribbon and fowards them to us.")]
    Private WithEvents pUIApp As clsRibbonEvents
   
    [Description("Handle to our exe, or if IDE the last exe build to enable running from the IDE.")]
    Private hMod As LongPtr
    
    [Description("Handle to the RichEdit DLL")]
    Private hREDll As LongPtr

    [Description("The hWnd of the RichEdit control.")]
    Private hRE As LongPtr

    [Description("Handle to the IBeam cursor for the RichEdit window.")]
    Private hCurRE As LongPtr
    
    [Description("The default font settings for the RichEdit control.")]
    Private tDefChFmt As CHARFORMAT2W

    [Description("The current font settings for the RichEdit control.")]
    Private tCurChFmt As CHARFORMAT2W

    [Description("The context id for which Context Popup will be displayed.")]
    Private mCtx As Long
    
    [Description("Draws the shapes according to settings on the ribbon.")]
    Private mRender As CRenderer
    
    Private pItems() As clsRibbonMRUFile
    Private bMRUSet As Boolean
    Private nMRUItems As Long = 10 'NOTE: THIS MUST NOT EXCEED THE MAX COUNT DEFINED IN THE XML.
                                  'This demo used:
                                  ' <ApplicationMenu.RecentItems>
                                  '   <RecentItems CommandName="cmdRecentItems" MaxCount="10"/>
                                  ' </ApplicationMenu.RecentItems>
    Private bMRUPinned(9) As Boolean 'Must match the count of nMRUItems. Receives the new states as they change.
    Private mCurMRU(9) As String
    
    Private Const TWIPS_PER_POINT = 20
    Private TWIPS_PER_INDENT As Long
    
    Private Const szHelpTitle = "twinBASIC UI Ribbon Demo - Advanced Direct2D"
    Private Const szHelpHeader = "twinBASIC Windows UI Ribbon Demo"
    Private Const szHelpMessage = "This is the advanced level Windows UI Ribbon Framework Demo, created " & _
                                  "by Jon Johnson based on the C/C++ Ribbon projects from the Windows 7 SDK, " & _
                                  "<a href=""http://blogs.microsoft.co.il/arik/2011/06/03/ribbon-with-c-part-1-introduction-to-the-windows-ribbon-framework/"">Arik Poznanski</a> on blogs.microsoft.co.il, " & _
                                  "<a href=""https://www.codeproject.com/Articles/119319/Windows-Ribbon-Framework-in-Win32-C-Application"">Stephen Wiria</a> on CodeProject, " & _
                                  "<a href=""https://www.codeproject.com/Articles/160542/Windows-7-Goodies-in-C-Introduction-to-the-Ribbon"">Michael Dunn</a> on CodeProject, and " & _
                                  "the open source project <a href=""https://github.com/stefankueng/BowPad"">BowPad</a>." & vbcrlf & vbcrlf & _
                                  "For the readme, filing bug reports, original source, and more Ribbon demos for twinBASIC, visit the project's GitHub repository:" & vbcrlf & _
                                  "<a href=""https://github.com/fafalone/UIRibbonDemoAdvanced"">https://github.com/fafalone/UIRibbonDemoAdvanced</a>"
    Private Const szHelpFooter = "Copyright ©2023-2025 Jon Johnson. Licensed under the MIT License. See code or repository for more  information."
    Private Const szHelpIconRes = "101"
    
    Private tFindRep As FINDREPLACEW
    
    Private mEnableCPD As Boolean 'Enable Copy/Paste/Delete
    Private mEnablePaste As Boolean
    Private mFirstChange As Boolean 'Enable undo after the first change; their statuses will only change after this
                                    'by using them
    Public Enum eRibbonModes
        RibbonModeTextAndColors
        RibbonModeGalleries
        RibbonModeBoth
    End Enum
    Private mRibbonMode As eRibbonModes
    
    Private Enum RtfStreamOp
        rsoUnk
        rsoRead
        rsoWrite
    End Enum
    Private mStreamOp As RtfStreamOp
    Private mCurFile As String, mCurSaveMode As Long
    
    Private mCurZoom As Decimal
    Private mSetDefZoom As Boolean
    
    Private mWordWrap As Boolean
    Private mSelBar As Boolean
    
    Private sFindBuff(255) As Integer
    Private sReplaceBuff(255) As Integer
    Private hFR As LongPtr
    Private hHookFR As LongPtr
    
    Public Enum eAlign
        AlignLeft
        AlignCenter
        AlignRight
        AlignJustify
    End Enum
    Private mCurAlign As eAlign
     
    Private Enum LineSpacing
        LS_1
        LS_115
        LS_15
        LS_2
    End Enum
    Private mCurSpacing As LineSpacing
    
    Private Enum ListFormats
        ListNone
        ListBullets
        ListNumbered
        ListLower
        ListUpper
        ListRomanLower
        ListRomanUpper
    End Enum
    Private mCurListFormat As ListFormats
    
    Private Enum UnitsOptions
        UnitsInches
        UnitsCentimeters
        UnitsPoints
        UnitsPicas
    End Enum
    Private mCurUnits As UnitsOptions
    
    Private mCurIndent As Long
    Private Const mDefTab As Long = 720 'twips
    
    Private WM_FINDCALLBACK As Long
    
    #Region "CmdIDs"
    'Taken from ribbon.h where they're autogenerated 
    Public Const cmdApplicationMenu  = 600
    Public Const IDC_TABMAIN  = 1001
    Public Const IDC_TABMAIN_LabelTitle_RESID  = 1001
    Public Const cmdGroupMain  = 1002
    Public Const cmdGroupMain_LabelTitle_RESID  = 1002
    Public Const cmdGroupMain_SmallImages_RESID  = 969
    Public Const cmdGroupMain_SmallImages_120__RESID  = 968
    Public Const cmdGroupMain_SmallImages_144__RESID  = 967
    Public Const cmdGroupMain_SmallImages_192__RESID  = 966
    Public Const IDC_TABTABLE  = 1003
    Public Const IDC_TABTABLE_LabelTitle_RESID  = 1003
    Public Const IDC_TABDESIGN  = 1004
    Public Const IDC_TABDESIGN_LabelTitle_RESID  = 1004
    Public Const IDC_TABLAYOUT  = 1005
    Public Const IDC_TABLAYOUT_LabelTitle_RESID  = 1005
    Public Const cmdGroupDesign  = 1006
    Public Const cmdGroupDesign_LabelTitle_RESID  = 1006
    Public Const cmdGroupLayout  = 1007
    Public Const cmdGroupLayout_LabelTitle_RESID  = 1007
    Public Const IDC_SELECT  = 1050
    Public Const IDC_SELECT_LabelTitle_RESID  = 1050
    Public Const IDC_SELECT_LabelDescription_RESID  = 1051
    Public Const IDC_SELECT_TooltipTitle_RESID  = 1052
    Public Const IDC_SELECT_TooltipDescription_RESID  = 1053
    Public Const IDC_SELECT_LargeImages_RESID  = 150
    Public Const IDC_UNSELECT  = 1060
    Public Const IDC_UNSELECT_LabelTitle_RESID  = 1060
    Public Const IDC_UNSELECT_LabelDescription_RESID  = 1061
    Public Const IDC_UNSELECT_TooltipTitle_RESID  = 1062
    Public Const IDC_UNSELECT_TooltipDescription_RESID  = 1063
    Public Const IDC_UNSELECT_LargeImages_RESID  = 160
    Public Const IDC_DESIGN1  = 1010
    Public Const IDC_DESIGN1_LabelTitle_RESID  = 1010
    Public Const IDC_DESIGN1_LargeImages_RESID  = 110
    Public Const IDC_DESIGN2  = 1011
    Public Const IDC_DESIGN2_LabelTitle_RESID  = 1011
    Public Const IDC_DESIGN2_LargeImages_RESID  = 111
    Public Const IDC_DESIGN3  = 1012
    Public Const IDC_DESIGN3_LabelTitle_RESID  = 10112
    Public Const IDC_DESIGN3_LargeImages_RESID  = 112
    Public Const IDC_LAYOUT1  = 1013
    Public Const IDC_LAYOUT1_LabelTitle_RESID  = 1013
    Public Const IDC_LAYOUT1_LargeImages_RESID  = 113
    Public Const IDC_LAYOUT2  = 1014
    Public Const IDC_LAYOUT2_LabelTitle_RESID  = 1014
    Public Const IDC_LAYOUT2_LargeImages_RESID  = 114
    Public Const IDC_TABVIEW  = 1998
    Public Const IDC_TABVIEW_LabelTitle_RESID  = 1999
    Public Const cmdButtonsGroup  = 2000
    Public Const cmdButtonsGroup_LabelTitle_RESID  = 2000
    Public Const cmdDropDownColorPickerGroup  = 2001
    Public Const cmdDropDownColorPickerGroup_LabelTitle_RESID  = 2001
    Public Const cmdDropDownColorPickerGroup_SmallImages_RESID  = 961
    Public Const cmdDropDownColorPickerGroup_SmallImages_120__RESID  = 962
    Public Const cmdDropDownColorPickerGroup_SmallImages_144__RESID  = 963
    Public Const cmdDropDownColorPickerGroup_SmallImages_192__RESID  = 964
    Public Const IDC_COLORTHEME  = 2002
    Public Const IDC_COLORTHEME_LabelTitle_RESID  = 2002
    Public Const IDC_COLORTHEME_LargeImages_RESID  = 202
    Public Const IDC_COLORSTD  = 2003
    Public Const IDC_COLORSTD_LabelTitle_RESID  = 2003
    Public Const IDC_COLORSTD_LargeImages_RESID  = 203
    Public Const IDC_CLRHILITE  = 204
    Public Const IDC_CLRHILITE_LabelTitle_RESID  = 2004
    Public Const IDC_CLRHILITE_LargeImages_RESID  = 204
    Public Const IDC_LISTCOLORS  = 2006
    Public Const IDC_LISTCOLORS_LabelTitle_RESID  = 2006
    Public Const IDC_LISTCOLORS_LargeImages_RESID  = 206
    Public Const IDC_NEW  = 7001
    Public Const IDC_NEW_LabelTitle_RESID  = 7001
    Public Const IDC_NEW_LabelDescription_RESID  = 7002
    Public Const IDC_NEW_TooltipTitle_RESID  = 7003
    Public Const IDC_NEW_TooltipDescription_RESID  = 7004
    Public Const IDC_NEW_SmallImages_RESID  = 701
    Public Const IDC_NEW_LargeImages_RESID  = 702
    Public Const IDC_OPEN  = 8000
    Public Const IDC_OPEN_LabelTitle_RESID  = 8000
    Public Const IDC_OPEN_LabelDescription_RESID  = 8001
    Public Const IDC_OPEN_TooltipTitle_RESID  = 8002
    Public Const IDC_OPEN_TooltipDescription_RESID  = 8003
    Public Const IDC_OPEN_SmallImages_RESID  = 801
    Public Const IDC_OPEN_LargeImages_RESID  = 800
    Public Const IDC_SAVE  = 9000
    Public Const IDC_SAVE_LabelTitle_RESID  = 9100
    Public Const IDC_SAVE_LabelDescription_RESID  = 9001
    Public Const IDC_SAVE_TooltipTitle_RESID  = 9002
    Public Const IDC_SAVE_TooltipDescription_RESID  = 9003
    Public Const IDC_SAVE_SmallImages_RESID  = 901
    Public Const IDC_SAVE_LargeImages_RESID  = 900
    Public Const IDC_SAVEAS  = 9101
    Public Const IDC_SAVEAS_LabelTitle_RESID  = 9102
    Public Const IDC_SAVEAS_TooltipDescription_RESID  = 9103
    Public Const IDC_SAVEAS_SmallImages_RESID  = 9104
    Public Const IDC_SAVEAS_LargeImages_RESID  = 9105
    Public Const IDC_SAVEASMORE  = 9106
    Public Const CmdHeaderSave  = 9107
    Public Const CmdHeaderSave_LabelTitle_RESID  = 9108
    Public Const IDC_RTF  = 9109
    Public Const IDC_RTF_LabelTitle_RESID  = 9110
    Public Const IDC_RTF_LabelDescription_RESID  = 9111
    Public Const IDC_RTF_SmallImages_RESID  = 9112
    Public Const IDC_RTF_LargeImages_RESID  = 9113
    Public Const IDC_OPENXML  = 9114
    Public Const IDC_OPENXML_LabelTitle_RESID  = 9115
    Public Const IDC_OPENXML_LabelDescription_RESID  = 9116
    Public Const IDC_OPENXML_SmallImages_RESID  = 9117
    Public Const IDC_OPENXML_LargeImages_RESID  = 9118
    Public Const IDC_ODF  = 9119
    Public Const IDC_ODF_LabelTitle_RESID  = 9120
    Public Const IDC_ODF_LabelDescription_RESID  = 9121
    Public Const IDC_ODF_SmallImages_RESID  = 9122
    Public Const IDC_ODF_LargeImages_RESID  = 9123
    Public Const IDC_TXT  = 9214
    Public Const IDC_TXT_LabelTitle_RESID  = 9125
    Public Const IDC_TXT_LabelDescription_RESID  = 9126
    Public Const IDC_TXT_SmallImages_RESID  = 9127
    Public Const IDC_TXT_LargeImages_RESID  = 9128
    Public Const IDC_FMTOTHER  = 9129
    Public Const IDC_FMTOTHER_LabelTitle_RESID  = 9130
    Public Const IDC_FMTOTHER_LabelDescription_RESID  = 9131
    Public Const IDC_FMTOTHER_SmallImages_RESID  = 9132
    Public Const IDC_FMTOTHER_LargeImages_RESID  = 9133
    Public Const IDC_GALMODE  = 22121
    Public Const IDC_GALMODE_LabelTitle_RESID  = 22122
    Public Const IDC_GALMODE_LabelDescription_RESID  = 22123
    Public Const IDC_GALMODE_TooltipTitle_RESID  = 22124
    Public Const IDC_GALMODE_TooltipDescription_RESID  = 22125
    Public Const IDC_GALMODE_SmallImages_RESID  = 22126
    Public Const IDC_GALMODE_SmallImages_120__RESID  = 22127
    Public Const IDC_GALMODE_SmallImages_144__RESID  = 22128
    Public Const IDC_GALMODE_SmallImages_192__RESID  = 22129
    Public Const IDC_GALMODE_LargeImages_RESID  = 22130
    Public Const IDC_GALMODE_LargeImages_120__RESID  = 22131
    Public Const IDC_GALMODE_LargeImages_144__RESID  = 22132
    Public Const IDC_GALMODE_LargeImages_192__RESID  = 22133
    Public Const IDC_EXIT  = 20000
    Public Const IDC_EXIT_LabelTitle_RESID  = 20000
    Public Const IDC_EXIT_LabelDescription_RESID  = 20001
    Public Const IDC_EXIT_TooltipTitle_RESID  = 20002
    Public Const IDC_EXIT_TooltipDescription_RESID  = 10003
    Public Const IDC_EXIT_SmallImages_RESID  = 22221
    Public Const IDC_EXIT_LargeImages_RESID  = 22220
    Public Const cmdGroupFileActions  = 355
    Public Const cmdGroupFileActions_LabelTitle_RESID  = 355
    Public Const IDC_QAT  = 306
    Public Const IDC_CUSTOMQAT  = 307
    Public Const IDC_RECENTITEMS  = 1775
    Public Const IDC_RECENTITEMS_LabelTitle_RESID  = 1776
    Public Const cmdGroupRichFont  = 1777
    Public Const cmdGroupRichFont_LabelTitle_RESID  = 1778
    Public Const cmdGroupRichFont_SmallImages_RESID  = 3272
    Public Const cmdGroupRichFont_SmallImages_120__RESID  = 3273
    Public Const cmdGroupRichFont_SmallImages_144__RESID  = 3274
    Public Const cmdGroupRichFont_SmallImages_192__RESID  = 3275
    Public Const IDC_RICHFONT  = 1779
    Public Const IDC_RICHFONT_Keytip_RESID  = 1780
    Public Const IDC_TOGGLE1  = 1778
    Public Const IDC_TOGGLE1_LabelTitle_RESID  = 3260
    Public Const IDC_TOGGLE1_TooltipTitle_RESID  = 851
    Public Const IDC_TOGGLE1_TooltipDescription_RESID  = 852
    Public Const IDC_TOGGLE1_SmallImages_RESID  = 3262
    Public Const IDC_TOGGLE1_LargeImages_RESID  = 3261
    Public Const cmdGroupPic  = 1787
    Public Const cmdGroupPic_LabelTitle_RESID  = 30260
    Public Const cmdGroupPic_SmallImages_RESID  = 25461
    Public Const cmdGroupPic_SmallImages_120__RESID  = 25462
    Public Const cmdGroupPic_SmallImages_144__RESID  = 25463
    Public Const cmdGroupPic_SmallImages_192__RESID  = 25464
    Public Const cmdFileMenu  = 2
    Public Const cmdMRUList  = 3
    Public Const cmdMRUList_LabelTitle_RESID  = 3285
    Public Const cmdGroup6  = 4
    Public Const IDC_EDITDROPDOWN  = 5
    Public Const IDC_EDITDROPDOWN_LabelTitle_RESID  = 3386
    Public Const IDC_EDITDROPDOWN_LargeImages_RESID  = 3387
    Public Const IDC_RIBBONHELP  = 27664
    Public Const IDC_OPENFILEMORE  = 20500
    Public Const IDC_OPENFILE  = 27601
    Public Const IDC_OPENFILE_LabelTitle_RESID  = 2522
    Public Const IDC_OPENFILE_LabelDescription_RESID  = 2523
    Public Const IDC_OPENFILE_LargeImages_RESID  = 4517
    Public Const IDC_OPENURL  = 22774
    Public Const IDC_OPENURL_LabelTitle_RESID  = 2524
    Public Const IDC_OPENURL_LabelDescription_RESID  = 2525
    Public Const IDC_OPENURL_LargeImages_RESID  = 4518
    Public Const IDC_PRINTMORE  = 20501
    Public Const CmdHeaderPrint  = 20511
    Public Const CmdHeaderPrint_LabelTitle_RESID  = 2537
    Public Const IDC_PRINT  = 27607
    Public Const IDC_PRINT_LabelTitle_RESID  = 2533
    Public Const IDC_PRINT_LabelDescription_RESID  = 2528
    Public Const IDC_PRINT_LargeImages_RESID  = 4521
    Public Const IDC_PRINTSETUP  = 17606
    Public Const IDC_PRINTSETUP_LabelTitle_RESID  = 2529
    Public Const IDC_PRINTSETUP_LabelDescription_RESID  = 2530
    Public Const IDC_PRINTSETUP_LargeImages_RESID  = 2531
    Public Const IDC_QUICKPRINT  = 2532
    Public Const IDC_QUICKPRINT_LabelTitle_RESID  = 3133
    Public Const IDC_QUICKPRINT_LabelDescription_RESID  = 2534
    Public Const IDC_QUICKPRINT_LargeImages_RESID  = 2535
    Public Const IDC_PRINTPREVIEW  = 2536
    Public Const IDC_PRINTPREVIEW_LabelTitle_RESID  = 3137
    Public Const IDC_PRINTPREVIEW_LabelDescription_RESID  = 2538
    Public Const IDC_PRINTPREVIEW_LargeImages_RESID  = 2539
    Public Const cmdTab1  = 6 /* These comments are optional and are inserted into the header file. */
    Public Const cmdTab1_LabelTitle_RESID  = 7200
    Public Const cmdGroup1  = 7 /* Group #1 */
    Public Const cmdGroup1_LabelTitle_RESID  = 7159
    Public Const cmdGroup1_SmallImages_RESID  = 7250
    Public Const IDC_CMD_CONTEXT1  = 30071 /* Button that activates context 1 */
    Public Const IDC_CMD_CONTEXT1_LabelTitle_RESID  = 7201
    Public Const IDC_CMD_CONTEXT1_TooltipTitle_RESID  = 840
    Public Const IDC_CMD_CONTEXT1_TooltipDescription_RESID  = 841
    Public Const IDC_CMD_CONTEXT1_LargeImages_RESID  = 7251
    Public Const IDC_CMD_CONTEXT2  = 30072 /* Button that activates context 2 */
    Public Const IDC_CMD_CONTEXT2_LabelTitle_RESID  = 7202
    Public Const IDC_CMD_CONTEXT2_TooltipTitle_RESID  = 842
    Public Const IDC_CMD_CONTEXT2_TooltipDescription_RESID  = 843
    Public Const IDC_CMD_CONTEXT2_LargeImages_RESID  = 7252
    Public Const IDC_CMD_CONTEXT3  = 30073 /* Button that activates context 3 */
    Public Const IDC_CMD_CONTEXT3_LabelTitle_RESID  = 7203
    Public Const IDC_CMD_CONTEXT3_TooltipTitle_RESID  = 844
    Public Const IDC_CMD_CONTEXT3_TooltipDescription_RESID  = 845
    Public Const IDC_CMD_CONTEXT3_LargeImages_RESID  = 7253
    Public Const IDC_CMD_CONTEXT4  = 30074 /* Button that activates context 4 */
    Public Const IDC_CMD_CONTEXT4_LabelTitle_RESID  = 7204
    Public Const IDC_CMD_CONTEXT4_TooltipTitle_RESID  = 846
    Public Const IDC_CMD_CONTEXT4_TooltipDescription_RESID  = 847
    Public Const IDC_CMD_CONTEXT4_LargeImages_RESID  = 7254
    Public Const IDC_CUT  = 64 /* Cut button */
    Public Const IDC_CUT_LabelTitle_RESID  = 7205
    Public Const IDC_CUT_TooltipTitle_RESID  = 23111
    Public Const IDC_CUT_TooltipDescription_RESID  = 23112
    Public Const IDC_CUT_SmallImages_RESID  = 7255
    Public Const IDC_COPY  = 23116 /* Copy button */
    Public Const IDC_COPY_LabelTitle_RESID  = 7206
    Public Const IDC_COPY_TooltipTitle_RESID  = 23114
    Public Const IDC_COPY_TooltipDescription_RESID  = 23115
    Public Const IDC_COPY_SmallImages_RESID  = 7256
    Public Const IDC_PASTE  = 23117 /* Paste button */
    Public Const IDC_PASTE_LabelTitle_RESID  = 7207
    Public Const IDC_PASTE_TooltipTitle_RESID  = 23118
    Public Const IDC_PASTE_TooltipDescription_RESID  = 23119
    Public Const IDC_PASTE_SmallImages_RESID  = 23720
    Public Const IDC_CTXTOGGLE  = 8 /* Toggle Button */
    Public Const IDC_CTXTOGGLE_LabelTitle_RESID  = 7208
    Public Const IDC_CTXTOGGLE_SmallImages_RESID  = 7258
    Public Const IDC_DELETE  = 24161 /* Button #1 */
    Public Const IDC_DELETE_LabelTitle_RESID  = 7209
    Public Const IDC_DELETE_LargeImages_RESID  = 7259
    Public Const IDC_UNDO  = 21161 /* Button #2 */
    Public Const IDC_UNDO_LabelTitle_RESID  = 7210
    Public Const IDC_UNDO_SmallImages_RESID  = 17260
    Public Const IDC_UNDO_SmallImages_120__RESID  = 17261
    Public Const IDC_UNDO_SmallImages_144__RESID  = 17262
    Public Const IDC_UNDO_SmallImages_192__RESID  = 17263
    Public Const IDC_REDO  = 21163 /* Button #3 */
    Public Const IDC_REDO_LabelTitle_RESID  = 7211
    Public Const IDC_REDO_SmallImages_RESID  = 17264
    Public Const IDC_REDO_SmallImages_120__RESID  = 17265
    Public Const IDC_REDO_SmallImages_144__RESID  = 17266
    Public Const IDC_REDO_SmallImages_192__RESID  = 17267
    Public Const IDC_BUTTONS  = 21165 /* DropDownButton that contains the three buttons */
    Public Const IDC_BUTTONS_LabelTitle_RESID  = 7212
    Public Const IDC_BUTTONS_LargeImages_RESID  = 7262
    Public Const IDC_CMD_CONTEXTMAP1  = 9 /* the Context Map for Context 1 */
    Public Const IDC_CMD_CONTEXTMAP2  = 10 /* the Context Map for Context 2 */
    Public Const IDC_CMD_CONTEXTMAP3  = 11 /* the Context Map for Context 3 */
    Public Const IDC_CMD_CONTEXTMAP4  = 12 /* the Context Map for Context 4 */
    Public Const IDC_CHECK1  = 76
    Public Const IDC_CHECK1_LabelTitle_RESID  = 25
    Public Const IDC_CHECK1_LabelDescription_RESID  = 26
    Public Const IDC_CHECK1_TooltipTitle_RESID  = 27
    Public Const IDC_CHECK1_TooltipDescription_RESID  = 28
    Public Const IDC_CHECK2  = 77
    Public Const IDC_CHECK2_LabelTitle_RESID  = 31
    Public Const IDC_CHECK2_LabelDescription_RESID  = 32
    Public Const IDC_CHECK2_TooltipTitle_RESID  = 33
    Public Const IDC_CHECK2_TooltipDescription_RESID  = 34
    Public Const cmdCheckHdr  = 78
    Public Const cmdCheckHdr_LabelTitle_RESID  = 366
    Public Const cmdCheckHdr_TooltipTitle_RESID  = 39
    Public Const cmdCheckHdr_TooltipDescription_RESID  = 38
    Public Const cmdCheckHdr_SmallImages_RESID  = 23120
    Public Const IDC_PARAGRAPH  = 79
    Public Const IDC_PARAGRAPH_LabelTitle_RESID  = 41
    Public Const IDC_PARAGRAPH_SmallImages_RESID  = 4406
    Public Const IDC_PARAGRAPH_SmallImages_120__RESID  = 4407
    Public Const IDC_PARAGRAPH_SmallImages_144__RESID  = 4408
    Public Const IDC_PARAGRAPH_SmallImages_192__RESID  = 4409
    Public Const IDC_INDENT  = 80
    Public Const IDC_INDENT_LabelTitle_RESID  = 42
    Public Const IDC_INDENT_TooltipTitle_RESID  = 43
    Public Const IDC_INDENT_TooltipDescription_RESID  = 44
    Public Const IDC_INDENT_SmallImages_RESID  = 45
    Public Const IDC_OUTDENT  = 81
    Public Const IDC_OUTDENT_LabelTitle_RESID  = 46
    Public Const IDC_OUTDENT_TooltipTitle_RESID  = 47
    Public Const IDC_OUTDENT_TooltipDescription_RESID  = 48
    Public Const IDC_OUTDENT_SmallImages_RESID  = 49
    Public Const IDC_LISTGAL  = 11181
    Public Const IDC_LISTGAL_LabelTitle_RESID  = 11146
    Public Const IDC_LISTGAL_TooltipTitle_RESID  = 11147
    Public Const IDC_LISTGAL_TooltipDescription_RESID  = 11148
    Public Const IDC_LISTGAL_SmallImages_RESID  = 882
    Public Const IDC_LISTGAL_SmallImages_120__RESID  = 883
    Public Const IDC_LISTGAL_SmallImages_144__RESID  = 884
    Public Const IDC_LISTGAL_SmallImages_192__RESID  = 885
    Public Const IDC_LISTGAL_SmallHighContrastImages_RESID  = 886
    Public Const IDC_LINESPACING  = 82
    Public Const IDC_LINESPACING_LabelTitle_RESID  = 50
    Public Const IDC_LINESPACING_TooltipTitle_RESID  = 51
    Public Const IDC_LINESPACING_TooltipDescription_RESID  = 52
    Public Const IDC_LINESPACING_SmallImages_RESID  = 4720
    Public Const IDC_LINESPACE1  = 83
    Public Const IDC_LINESPACE1_LabelTitle_RESID  = 60
    Public Const IDC_LINESPACE115  = 84
    Public Const IDC_LINESPACE115_LabelTitle_RESID  = 61
    Public Const IDC_LINESPACE15  = 85
    Public Const IDC_LINESPACE15_LabelTitle_RESID  = 53
    Public Const IDC_LINESPACE2  = 86
    Public Const IDC_LINESPACE2_LabelTitle_RESID  = 54
    Public Const IDC_ALIGNLEFT  = 87
    Public Const IDC_ALIGNLEFT_LabelTitle_RESID  = 56
    Public Const IDC_ALIGNLEFT_TooltipTitle_RESID  = 57
    Public Const IDC_ALIGNLEFT_TooltipDescription_RESID  = 58
    Public Const IDC_ALIGNLEFT_SmallImages_RESID  = 59
    Public Const IDC_ALIGNRIGHT  = 88
    Public Const IDC_ALIGNRIGHT_LabelTitle_RESID  = 89
    Public Const IDC_ALIGNRIGHT_TooltipTitle_RESID  = 90
    Public Const IDC_ALIGNRIGHT_TooltipDescription_RESID  = 91
    Public Const IDC_ALIGNRIGHT_SmallImages_RESID  = 92
    Public Const IDC_ALIGNCENTER  = 4733
    Public Const IDC_ALIGNCENTER_LabelTitle_RESID  = 4730
    Public Const IDC_ALIGNCENTER_TooltipTitle_RESID  = 4731
    Public Const IDC_ALIGNCENTER_TooltipDescription_RESID  = 4732
    Public Const IDC_ALIGNCENTER_SmallImages_RESID  = 4734
    Public Const IDC_JUSTIFY  = 4738
    Public Const IDC_JUSTIFY_LabelTitle_RESID  = 4735
    Public Const IDC_JUSTIFY_TooltipTitle_RESID  = 4736
    Public Const IDC_JUSTIFY_TooltipDescription_RESID  = 4737
    Public Const IDC_JUSTIFY_SmallImages_RESID  = 4739
    Public Const IDC_PARAGRAPHEXT  = 4748
    Public Const IDC_PARAGRAPHEXT_LabelTitle_RESID  = 4775
    Public Const IDC_PARAGRAPHEXT_TooltipTitle_RESID  = 4776
    Public Const IDC_PARAGRAPHEXT_TooltipDescription_RESID  = 4777
    Public Const IDC_PARAGRAPHEXT_SmallImages_RESID  = 14406
    Public Const IDC_PARAGRAPHEXT_SmallImages_120__RESID  = 14407
    Public Const IDC_PARAGRAPHEXT_SmallImages_144__RESID  = 14408
    Public Const IDC_PARAGRAPHEXT_SmallImages_192__RESID  = 14409
    Public Const CmdGroupEditing  = 13
    Public Const CmdGroupEditing_LabelTitle_RESID  = 3730
    Public Const CmdGroupEditing_SmallImages_RESID  = 3731
    Public Const CmdGroupEditing_SmallImages_120__RESID  = 3732
    Public Const CmdGroupEditing_SmallImages_144__RESID  = 3733
    Public Const CmdGroupEditing_SmallImages_192__RESID  = 3734
    Public Const IDC_FIND  = 3738
    Public Const IDC_FIND_LabelTitle_RESID  = 3735
    Public Const IDC_FIND_TooltipTitle_RESID  = 3736
    Public Const IDC_FIND_TooltipDescription_RESID  = 3737
    Public Const IDC_FIND_SmallImages_RESID  = 3739
    Public Const IDC_FIND_SmallImages_120__RESID  = 3740
    Public Const IDC_FIND_SmallImages_144__RESID  = 3741
    Public Const IDC_FIND_SmallImages_192__RESID  = 3742
    Public Const IDC_REPLACE  = 3743
    Public Const IDC_REPLACE_LabelTitle_RESID  = 3745
    Public Const IDC_REPLACE_TooltipTitle_RESID  = 3746
    Public Const IDC_REPLACE_TooltipDescription_RESID  = 3747
    Public Const IDC_REPLACE_SmallImages_RESID  = 3748
    Public Const IDC_REPLACE_SmallImages_120__RESID  = 3749
    Public Const IDC_REPLACE_SmallImages_144__RESID  = 3750
    Public Const IDC_REPLACE_SmallImages_192__RESID  = 3751
    Public Const IDC_SELECTALL  = 3744
    Public Const IDC_SELECTALL_LabelTitle_RESID  = 3752
    Public Const IDC_SELECTALL_TooltipTitle_RESID  = 3753
    Public Const IDC_SELECTALL_TooltipDescription_RESID  = 3754
    Public Const IDC_SELECTALL_SmallImages_RESID  = 3755
    Public Const IDC_SELECTALL_SmallImages_120__RESID  = 3756
    Public Const IDC_SELECTALL_SmallImages_144__RESID  = 3757
    Public Const IDC_SELECTALL_SmallImages_192__RESID  = 3758
    Public Const cmdMiscGroup  = 14
    Public Const cmdMiscGroup_LabelTitle_RESID  = 2369
    Public Const cmdMiscGroup_SmallImages_RESID  = 25561
    Public Const cmdMiscGroup_SmallImages_120__RESID  = 25562
    Public Const cmdMiscGroup_SmallImages_144__RESID  = 25563
    Public Const cmdMiscGroup_SmallImages_192__RESID  = 25564
    Public Const IDC_CMD_ZOOM  = 14722
    Public Const IDC_CMD_ZOOM_LabelTitle_RESID  = 2855
    Public Const IDC_CMD_ZOOM_TooltipTitle_RESID  = 870
    Public Const IDC_CMD_ZOOM_TooltipDescription_RESID  = 871
    Public Const IDC_CMD_ZOOM_SmallImages_RESID  = 866
    Public Const IDC_CMD_ZOOM_SmallImages_120__RESID  = 867
    Public Const IDC_CMD_ZOOM_SmallImages_144__RESID  = 868
    Public Const IDC_CMD_ZOOM_SmallImages_192__RESID  = 869
    Public Const IDC_CMD_MESUNITS  = 14734
    Public Const IDC_CMD_MESUNITS_LabelTitle_RESID  = 4887
    Public Const IDC_CMD_MESUNITS_TooltipTitle_RESID  = 4888
    Public Const IDC_CMD_MESUNITS_TooltipDescription_RESID  = 4889
    Public Const IDC_CMD_MESUNITS_SmallImages_RESID  = 4416
    Public Const IDC_CMD_MESUNITS_SmallImages_120__RESID  = 4417
    Public Const IDC_CMD_MESUNITS_SmallImages_144__RESID  = 4418
    Public Const IDC_CMD_MESUNITS_SmallImages_192__RESID  = 4419
    Public Const IDC_CMD_INCHES  = 15
    Public Const IDC_CMD_INCHES_LabelTitle_RESID  = 60001
    Public Const IDC_CMD_CENTIMETERS  = 16
    Public Const IDC_CMD_CENTIMETERS_LabelTitle_RESID  = 60002
    Public Const IDC_CMD_POINTS  = 17
    Public Const IDC_CMD_POINTS_LabelTitle_RESID  = 60003
    Public Const IDC_CMD_PICAS  = 18
    Public Const IDC_CMD_PICAS_LabelTitle_RESID  = 60004
    Public Const IDC_CMD_INSERTPIC  = 19
    Public Const IDC_CMD_INSERTPIC_LabelTitle_RESID  = 60005
    Public Const IDC_CMD_INSERTPIC_TooltipTitle_RESID  = 60006
    Public Const IDC_CMD_INSERTPIC_TooltipDescription_RESID  = 60007
    Public Const IDC_CMD_INSERTPIC_SmallImages_RESID  = 21261
    Public Const IDC_CMD_INSERTPIC_SmallImages_120__RESID  = 21262
    Public Const IDC_CMD_INSERTPIC_SmallImages_144__RESID  = 21263
    Public Const IDC_CMD_INSERTPIC_SmallImages_192__RESID  = 21264
    Public Const IDC_CMD_INSERTPIC_LargeImages_RESID  = 21265
    Public Const IDC_CMD_INSERTPIC_LargeImages_120__RESID  = 21266
    Public Const IDC_CMD_INSERTPIC_LargeImages_144__RESID  = 21267
    Public Const IDC_CMD_INSERTPIC_LargeImages_192__RESID  = 21268
    Public Const CmdInsertPictureMore  = 22
    Public Const IDC_CMD_CHANGEPIC  = 20
    Public Const IDC_CMD_CHANGEPIC_LabelTitle_RESID  = 60008
    Public Const IDC_CMD_CHANGEPIC_TooltipTitle_RESID  = 60009
    Public Const IDC_CMD_CHANGEPIC_TooltipDescription_RESID  = 60010
    Public Const IDC_CMD_CHANGEPIC_SmallImages_RESID  = 21269
    Public Const IDC_CMD_CHANGEPIC_SmallImages_120__RESID  = 21270
    Public Const IDC_CMD_CHANGEPIC_SmallImages_144__RESID  = 21271
    Public Const IDC_CMD_CHANGEPIC_SmallImages_192__RESID  = 21272
    Public Const IDC_CMD_RESIZEPIC  = 21
    Public Const IDC_CMD_RESIZEPIC_LabelTitle_RESID  = 60011
    Public Const IDC_CMD_RESIZEPIC_TooltipTitle_RESID  = 60012
    Public Const IDC_CMD_RESIZEPIC_TooltipDescription_RESID  = 60013
    Public Const IDC_CMD_RESIZEPIC_SmallImages_RESID  = 21273
    Public Const IDC_CMD_RESIZEPIC_SmallImages_120__RESID  = 21274
    Public Const IDC_CMD_RESIZEPIC_SmallImages_144__RESID  = 21275
    Public Const IDC_CMD_RESIZEPIC_SmallImages_192__RESID  = 21276
    Public Const IDC_MORE  = 21151
    Public Const IDC_MORE_LabelTitle_RESID  = 21149
    Public Const cmdTabGalleries  = 23
    Public Const cmdTabGalleries_LabelTitle_RESID  = 23350
    Public Const cmdShapesGroup  = 24
    Public Const cmdShapesGroup_LabelTitle_RESID  = 23310
    Public Const cmdShapesGroup_SmallImages_RESID  = 4436
    Public Const cmdShapesGroup_SmallImages_120__RESID  = 4437
    Public Const cmdShapesGroup_SmallImages_144__RESID  = 4438
    Public Const cmdShapesGroup_SmallImages_192__RESID  = 4439
    Public Const cmdBorderGroup  = 25
    Public Const cmdBorderGroup_LabelTitle_RESID  = 23320
    Public Const cmdBorderGroup_SmallImages_RESID  = 4496
    Public Const cmdBorderGroup_SmallImages_120__RESID  = 4497
    Public Const cmdBorderGroup_SmallImages_144__RESID  = 4498
    Public Const cmdBorderGroup_SmallImages_192__RESID  = 4499
    Public Const cmdLayoutGroup  = 31
    Public Const cmdLayoutGroup_LabelTitle_RESID  = 23330
    Public Const cmdLayoutGroup_SmallImages_RESID  = 4466
    Public Const cmdLayoutGroup_SmallImages_120__RESID  = 4467
    Public Const cmdLayoutGroup_SmallImages_144__RESID  = 4468
    Public Const cmdLayoutGroup_SmallImages_192__RESID  = 4469
    Public Const IDR_CMD_SHAPES  = 26
    Public Const IDR_CMD_SHAPES_LabelTitle_RESID  = 23340
    Public Const IDR_CMD_SHAPES_LargeImages_RESID  = 4136
    Public Const IDR_CMD_SHAPES_LargeImages_120__RESID  = 4137
    Public Const IDR_CMD_SHAPES_LargeImages_144__RESID  = 4138
    Public Const IDR_CMD_SHAPES_LargeImages_192__RESID  = 4139
    Public Const IDR_CMD_SIZEANDCOLOR  = 27
    Public Const IDR_CMD_SIZEANDCOLOR_LabelTitle_RESID  = 23450
    Public Const IDR_CMD_SIZEANDCOLOR_LargeImages_96__RESID  = 2151
    Public Const IDR_CMD_SIZEANDCOLOR_LargeImages_120__RESID  = 2152
    Public Const IDR_CMD_SIZEANDCOLOR_LargeImages_144__RESID  = 2153
    Public Const IDR_CMD_SIZEANDCOLOR_LargeImages_192__RESID  = 2154
    Public Const IDR_CMD_BORDERSTYLES  = 28
    Public Const IDR_CMD_BORDERSTYLES_LabelTitle_RESID  = 23460
    Public Const IDR_CMD_BORDERSTYLES_LargeImages_96__RESID  = 2161
    Public Const IDR_CMD_BORDERSTYLES_LargeImages_120__RESID  = 2162
    Public Const IDR_CMD_BORDERSTYLES_LargeImages_144__RESID  = 2163
    Public Const IDR_CMD_BORDERSTYLES_LargeImages_192__RESID  = 2164
    Public Const IDR_CMD_BORDERSIZES  = 29
    Public Const IDR_CMD_BORDERSIZES_LabelTitle_RESID  = 23670
    Public Const IDR_CMD_LAYOUTS  = 30
    Public Const IDR_CMD_LAYOUTS_LabelTitle_RESID  = 23680
    Public Const IDR_CMD_SMALL  = 23700
    Public Const IDR_CMD_SMALL_LabelTitle_RESID  = 23690
    Public Const IDR_CMD_SMALL_LargeImages_96__RESID  = 2191
    Public Const IDR_CMD_SMALL_LargeImages_120__RESID  = 2192
    Public Const IDR_CMD_SMALL_LargeImages_144__RESID  = 2193
    Public Const IDR_CMD_SMALL_LargeImages_192__RESID  = 2194
    Public Const IDR_CMD_MEDIUM  = 23701
    Public Const IDR_CMD_MEDIUM_LabelTitle_RESID  = 23702
    Public Const IDR_CMD_MEDIUM_LargeImages_96__RESID  = 3101
    Public Const IDR_CMD_MEDIUM_LargeImages_120__RESID  = 3102
    Public Const IDR_CMD_MEDIUM_LargeImages_144__RESID  = 3103
    Public Const IDR_CMD_MEDIUM_LargeImages_192__RESID  = 3104
    Public Const IDR_CMD_LARGE  = 23702
    Public Const IDR_CMD_LARGE_LabelTitle_RESID  = 3410
    Public Const IDR_CMD_LARGE_LargeImages_96__RESID  = 3411
    Public Const IDR_CMD_LARGE_LargeImages_120__RESID  = 3412
    Public Const IDR_CMD_LARGE_LargeImages_144__RESID  = 3413
    Public Const IDR_CMD_LARGE_LargeImages_192__RESID  = 3414
    Public Const IDR_CMD_RED  = 23703
    Public Const IDR_CMD_RED_LabelTitle_RESID  = 3420
    Public Const IDR_CMD_RED_LargeImages_96__RESID  = 3421
    Public Const IDR_CMD_RED_LargeImages_120__RESID  = 3422
    Public Const IDR_CMD_RED_LargeImages_144__RESID  = 3423
    Public Const IDR_CMD_RED_LargeImages_192__RESID  = 3424
    Public Const IDR_CMD_GREEN  = 23704
    Public Const IDR_CMD_GREEN_LabelTitle_RESID  = 3530
    Public Const IDR_CMD_GREEN_LargeImages_96__RESID  = 3531
    Public Const IDR_CMD_GREEN_LargeImages_120__RESID  = 3532
    Public Const IDR_CMD_GREEN_LargeImages_144__RESID  = 3533
    Public Const IDR_CMD_GREEN_LargeImages_192__RESID  = 3534
    Public Const IDR_CMD_BLUE  = 23705
    Public Const IDR_CMD_BLUE_LabelTitle_RESID  = 3640
    Public Const IDR_CMD_BLUE_LargeImages_96__RESID  = 3641
    Public Const IDR_CMD_BLUE_LargeImages_120__RESID  = 3642
    Public Const IDR_CMD_BLUE_LargeImages_144__RESID  = 3643
    Public Const IDR_CMD_BLUE_LargeImages_192__RESID  = 3644
    Public Const cmdGroupExitGal  = 15785
    Public Const cmdGroupExitGal_LabelTitle_RESID  = 15786
    Public Const cmdGroupExitGal_SmallImages_RESID  = 15787
    Public Const cmdGroupExitGal_SmallImages_120__RESID  = 15788
    Public Const cmdGroupExitGal_SmallImages_144__RESID  = 15789
    Public Const cmdGroupExitGal_SmallImages_192__RESID  = 15790
    Public Const IDC_EXITGALMODE  = 29179
    Public Const IDC_EXITGALMODE_LabelTitle_RESID  = 29178
    Public Const IDC_EXITGALMODE_LabelDescription_RESID  = 29177
    Public Const IDC_EXITGALMODE_TooltipTitle_RESID  = 29176
    Public Const IDC_EXITGALMODE_TooltipDescription_RESID  = 29175
    Public Const IDC_EXITGALMODE_SmallImages_RESID  = 29174
    Public Const IDC_EXITGALMODE_SmallImages_120__RESID  = 29173
    Public Const IDC_EXITGALMODE_SmallImages_144__RESID  = 29172
    Public Const IDC_EXITGALMODE_SmallImages_192__RESID  = 29171
    Public Const IDC_EXITGALMODE_LargeImages_RESID  = 29169
    Public Const IDC_EXITGALMODE_LargeImages_120__RESID  = 29168
    Public Const IDC_EXITGALMODE_LargeImages_144__RESID  = 29167
    Public Const IDC_EXITGALMODE_LargeImages_192__RESID  = 29166
        
    
    'These are manual entries for galleries. The resources they refer to 
    'also have to be placed in the resources manually, either into the .rc 
    'before compiling, into the .res, or added into tB.
    Private Const IDS_APP_TITLE  = 103
    Private Const IDI_GALLERY  = 107
    Private Const IDI_SMALL  = 108
    Private Const IDC_GALLERY  = 109
    Private Const IDB_RECTANGLE_96  = 500
    Private Const IDB_RECTANGLE_120  = 501
    Private Const IDB_RECTANGLE_144  = 502
    Private Const IDB_RECTANGLE_192  = 503
    Private Const IDB_ROUNDED_RECTANGLE_96  = 504
    Private Const IDB_ROUNDED_RECTANGLE_120  = 505
    Private Const IDB_ROUNDED_RECTANGLE_144  = 506
    Private Const IDB_ROUNDED_RECTANGLE_192  = 507
    Private Const IDB_ELLIPSE_96  = 508
    Private Const IDB_ELLIPSE_120  = 509
    Private Const IDB_ELLIPSE_144  = 510
    Private Const IDB_ELLIPSE_192  = 511
    Private Const IDB_DIAMOND_96  = 512
    Private Const IDB_DIAMOND_120  = 513
    Private Const IDB_DIAMOND_144  = 514
    Private Const IDB_DIAMOND_192  = 515
    Private Const IDB_NONE_96  = 516
    Private Const IDB_NONE_120  = 517
    Private Const IDB_NONE_144  = 518
    Private Const IDB_NONE_192  = 519
    Private Const IDB_SOLID_96  = 520
    Private Const IDB_SOLID_120  = 521
    Private Const IDB_SOLID_144  = 522
    Private Const IDB_SOLID_192  = 523
    Private Const IDB_DASH_96  = 524
    Private Const IDB_DASH_120  = 525
    Private Const IDB_DASH_144  = 526
    Private Const IDB_DASH_192  = 527
    Private Const IDB_LISTBULLET_96  = 560
    Private Const IDB_LISTBULLET_120  = 561
    Private Const IDB_LISTBULLET_144  = 562
    Private Const IDB_LISTLOWERCASE_96  = 563
    Private Const IDB_LISTLOWERCASE_120  = 564
    Private Const IDB_LISTLOWERCASE_144  = 565
    Private Const IDB_LISTNONE_96  = 566
    Private Const IDB_LISTNONE_120  = 567
    Private Const IDB_LISTNONE_144  = 568
    Private Const IDB_LISTNUMBERED_96  = 569
    Private Const IDB_LISTNUMBERED_120  = 570
    Private Const IDB_LISTNUMBERED_144  = 571
    Private Const IDB_LISTROMANLOWERCASE_96  = 572
    Private Const IDB_LISTROMANLOWERCASE_120  = 573
    Private Const IDB_LISTROMANLOWERCASE_144  = 574
    Private Const IDB_LISTROMANUPPERCASE_96  = 575
    Private Const IDB_LISTROMANUPPERCASE_120  = 576
    Private Const IDB_LISTROMANUPPERCASE_144  = 577
    Private Const IDB_LISTUPPERCASE_96  = 578
    Private Const IDB_LISTUPPERCASE_120  = 579
    Private Const IDB_LISTUPPERCASE_144  = 580
    Private Const IDS_LISTNONE = 581
    Private Const IDS_LISTBULLET = 582
    Private Const IDS_LISTNUMBERED = 583
    Private Const IDS_LISTLOWERCASE = 584
    Private Const IDS_LISTUPPERCASE = 585
    Private Const IDS_LISTROMANLLOWERCASE = 586
    Private Const IDS_LISTROMANLUPPERCASE = 587
    Private Const IDS_RECTANGLE  = 528
    Private Const IDS_ELLIPSE  = 529
    Private Const IDS_ROUNDED_RECTANGLE  = 530
    Private Const IDS_DIAMOND  = 531
    Private Const IDS_BORDER_NONE  = 532
    Private Const IDS_BORDER_SOLID  = 533
    Private Const IDS_BORDER_DASH  = 534
    Private Const IDS_BORDERSIZE_1  = 535
    Private Const IDS_BORDERSIZE_3  = 536
    Private Const IDS_BORDERSIZE_5  = 537
    Private Const IDS_LAYOUT_1  = 538
    Private Const IDS_LAYOUT_2  = 539
    Private Const IDS_LAYOUT_3  = 540
    Private Const IDS_SIZE_CATEGORY  = 541
    Private Const IDS_COLOR_CATEGORY  = 542
    Private Const IDS_INVALID_SIZE_MESSAGE  = 543
    Private Const IDS_INVALID_SIZE_TITLE  = 544
    #End Region

    Private Sub LogMsg(sMsg As String)
        Debug.Print sMsg
        List1.AddItem sMsg, 0
    End Sub
    
    Private Sub OnInitialize() Handles Form.Initialize
            mWin7 = CheckWin7OrHigher()
            mWin8 = CheckWin8OrHigher()
            If App.IsInIDE Then
                'Attempt to load resources from last .exe
                If (App.LastBuildPath = "") Or (PathFileExists(App.LastBuildPath) = 0) Then
                    MsgBox("To run from the IDE you must build first, or replace this routine with one loading a DLL containing your resources.", vbCritical + vbOKOnly, App.Title)
                    End
                Else
                    hMod = LoadLibraryEx(App.LastBuildPath, 0, LOAD_LIBRARY_AS_DATAFILE Or LOAD_LIBRARY_AS_IMAGE_RESOURCE)
                End If
            Else
                hMod = GetModuleHandleW()
            End If
    End Sub
    
    'Ribbon is Win7+
    Private Function CheckWin7OrHigher() As Boolean
        Dim dwMajor As Long, dwMinor As Long
        CopyMemory dwMajor, ByVal &H7FFE026C, 4 'Reads NtMajorVersion field of KUSER_SHARED_DATA
        If dwMajor > 6 Then Return True
        CopyMemory dwMinor, ByVal &H7FFE0270, 4 'Reads NtMinorVersion field of KUSER_SHARED_DATA
        If (dwMajor = 6) And (dwMinor >= 1) Then Return True
    End Function
    'IUIEventLogger is Win8+
    Private Function CheckWin8OrHigher() As Boolean
        Dim dwMajor As Long, dwMinor As Long
        CopyMemory dwMajor, ByVal &H7FFE026C, 4 'Reads NtMajorVersion field of KUSER_SHARED_DATA
        If dwMajor > 6 Then Return True
        CopyMemory dwMinor, ByVal &H7FFE0270, 4 'Reads NtMinorVersion field of KUSER_SHARED_DATA
        If (dwMajor = 6) And (dwMinor >= 2) Then Return True
    End Function
    
    Private Sub OnLoad() Handles Form.Load
        If mWin7 = False Then
            MsgBox "This app is not supported on Windows versions before Windows 7", vbOKOnly Or vbCritical, App.Title
            If hMod <> GetModuleHandleW() Then FreeLibrary hMod
            End
        End If
        mWordWrap = True
        mCtx = CtxFromCmdId(IDC_CMD_CONTEXT1)
        CreateRichEdit
        Set mRender = New CRenderer(Picture1)
        Set pFramework = New UIRibbonFramework
        Set pUIApp = New clsRibbonEvents
        #If dbg_enablesavestate Then
        pUIApp.SettingsFileName = App.Path & "\ribbon.cfg" 'this call must be done first to enable ribbon state persistance
        #End If
        pFramework.Initialize Me.hWnd, pUIApp
        LogMsg "Successfully initialized Ribbon Framework"
        pFramework.LoadUI hMod, StrPtr("APPLICATION_RIBBON")
        LogMsg "Successfully loaded UI"
        mCurZoom = 100
        pFramework.SetUICommandProperty(IDC_ALIGNLEFT, UI_PKEY_BooleanValue, CVar(True)) 'Set initial alignment = left 
        pFramework.SetUICommandProperty(IDC_CHECK1, UI_PKEY_BooleanValue, CVar(True)) 'Set initial word wrap
        pFramework.SetUICommandProperty(IDC_COPY, UI_PKEY_Enabled, CVar(False)) 'Nothing is selected at first so disable
        pFramework.SetUICommandProperty(IDC_CUT, UI_PKEY_Enabled, CVar(False)) 'Nothing is selected at first so disable
        ' pFramework.SetUICommandProperty(IDC_DELETE, UI_PKEY_Enabled, CVar(False)) 'We can't actually do this because Delete
                                                                                    'isn't created until the Ctx Popup loads
        Dim lRet As Long
        If hRE Then
            lRet = CLng(SendMessage(hRE, EM_CANPASTE, 0, ByVal 0))
        End If
        If lRet = 0& Then
            pFramework.SetUICommandProperty(IDC_PASTE, UI_PKEY_Enabled, CVar(False))
            mEnablePaste = False
        Else
            mEnablePaste = True
        End If
        #If dbg_enableeventing Then
        If mWin8 Then
            Dim pEvtMgr As IUIEventingManager
            Set pEvtMgr = pFramework
            If pEvtMgr IsNot Nothing Then
                pEvtMgr.SetEventLogger pUIApp
            End If
        End If
        #End If
        Subclass2 Picture1.hWnd, AddressOf GalWndProc, Picture1.hWnd
        
        'You should set the Form HasDC property to False. For handling rare scenarios
        'where it must be true, the following is an alternative:
        'Use this code if the Form's AutoRedraw property will remain False. 
        'Or see the similar code in Form_Resize if it must be True.
        'Thanks to Wayne Phillips and jpbro for figuring out those two respective
        'solutions, I had been stuck after trying so many other elaborate methods.
        If Me.HasDC = True Then
            If Me.AutoRedraw = False Then
                Dim hrgn As LongPtr = CreateRectRgn(0, 0, &H7FFFFF7, &H7FFFFFF) '&H7FFFFFF is the larget value allowed
                Call SelectClipRgn(Me.hDC, hrgn)
            End If
        End If
    End Sub
 
    Private Sub OnUnload(Cancel As Integer) Handles Form.Unload
        #If dbg_enablesavestate Then
        Dim hr As Long = pUIApp.SaveRibbonSettings()
        If SUCCEEDED(hr) Then
            Debug.Print "Successfully saved ribbon settings."
        Else
            Debug.Print "Failed to save ribbon settings, error 0x" & Hex$(hr) & ": " & GetSystemErrorString(hr)
        End If
        #End If
    End Sub
    
    Private Sub OnTerminate() Handles Form.Terminate
        If pFramework IsNot Nothing Then pFramework.Destroy()
        Set pFramework = Nothing
        Set pUIApp = Nothing
        If hRE Then
            RemoveClipboardFormatListener(hRE)
            DestroyWindow hRE
            hRE = 0
        End If
        If hREDll Then FreeLibrary hREDll
        If hMod <> GetModuleHandleW() Then FreeLibrary hMod
    End Sub
    
    Private Sub OnFormResize() Handles Form.Resize
        Dim rgn As LongPtr
        If Me.HasDC And Me.AutoRedraw Then
            Me.AutoRedraw = False
            rgn = CreateRectRgn(0, 0, &H7FFFFF7, &H7FFFFF7)
            Call SelectClipRgn(Me.hDC, rgn)
            Me.AutoRedraw = True
        End If
    End Sub
    
    Private Sub OnGotFocus() Handles Form.GotFocus
        Dim pm As RenderParam
        mRender.GetRenderParam pm
        mRender.UpdateRenderParam pm
    End Sub
     
    Private Sub OnContextPopup() Handles Command1.Click
        If mCtx = 0 Then Exit Sub
        Dim pt As POINT
        Dim pCtxMenu As IUIContextualUI
        
        If pFramework IsNot Nothing Then
            pFramework.InvalidateUICommand IDC_UNDO, UI_INVALIDATIONS_STATE, UI_PKEY_Enabled
            pFramework.InvalidateUICommand IDC_REDO, UI_INVALIDATIONS_STATE, UI_PKEY_Enabled
            pFramework.GetView mCtx, IID_IUIContextualUI, pCtxMenu
            If pCtxMenu IsNot Nothing Then
                GetCursorPos pt
                pCtxMenu.ShowAtLocation pt.x, pt.y
                If IsTextSelected() Then
                    If mEnableCPD = False Then
                        pFramework.SetUICommandProperty(IDC_COPY, UI_PKEY_Enabled, CVar(True))
                        pFramework.SetUICommandProperty(IDC_CUT, UI_PKEY_Enabled, CVar(True))
                        pFramework.SetUICommandProperty(IDC_DELETE, UI_PKEY_Enabled, CVar(True))
                        mEnableCPD = True
                    End If
                Else
                    If mEnableCPD = True Then
                        pFramework.SetUICommandProperty(IDC_COPY, UI_PKEY_Enabled, CVar(False))
                        pFramework.SetUICommandProperty(IDC_CUT, UI_PKEY_Enabled, CVar(False))
                        pFramework.SetUICommandProperty(IDC_DELETE, UI_PKEY_Enabled, CVar(False))
                        mEnableCPD = False
                    End If
                End If
            End If
        End If
    End Sub

    Private Sub OnSizeRichEdHost() Handles pbREHost.Resize
        If hRE Then
            Dim rc As RECT
            GetClientRect pbREHost.hWnd, rc
            SetWindowPos hRE, 0, 0, 0, rc.Right, rc.Bottom, SWP_NOMOVE Or SWP_NOZORDER
        End If
    End Sub
    
    Private Sub OnClearLog() Handles Command2.Click
        List1.Clear
    End Sub
    
    Private Sub OnSetRibbonColors() Handles Command3.Click
        Dim hr As Long = SetRibbonColors(pFramework, pbClrTheme.BackColor, pbClrStd.BackColor, pbClrHighlight.BackColor)
        LogMsg "SetRibbonColors hr=0x" & Hex$(hr)
    End Sub
    
    Private Sub ShowHelp()
        Dim tdc As TASKDIALOGCONFIG
        tdc.cbSize = LenB(Of TASKDIALOGCONFIG)
        tdc.hInstance = hMod
        tdc.hWndParent = Me.hWnd
        tdc.dwCommonButtons = TDCBF_CLOSE_BUTTON
        tdc.dwFlags = TDF_ENABLE_HYPERLINKS
        tdc.pfCallback = AddressOf TaskDialogCallbackProc
        tdc.pszMainIcon = MAKEINTRESOURCE(CLng(TD_SHIELD_GRAY_ICON))
        tdc.pszFooterIcon = MAKEINTRESOURCE(CLng(TD_INFORMATION_ICON))
        tdc.pszWindowTitle = StrPtr(szHelpTitle)
        tdc.pszMainInstruction = StrPtr(szHelpHeader)
        tdc.pszContent = StrPtr(szHelpMessage)
        tdc.pszFooter = StrPtr(szHelpFooter)
        
        Dim lRes As Long = TaskDialogIndirect(tdc)
        
    End Sub
 
   Private Function TrimNullW(startstr As String) As String
        TrimNullW = Left$(startstr, lstrlenW(ByVal StrPtr(startstr)))
    End Function
   
    Private Sub ReCreateRichEdit()
        'WARNING: This is a quick hack to preserve RTF formatting. You should use stream in/out to
        '         a temp string instead.
        
        Dim sTempPath As String, sTempFile As String, sTempFull As String
        sTempPath = String$(MAX_PATH, 0)
        Dim cch As Long = GetTempPathW(MAX_PATH, StrPtr(sTempPath))
        If cch > 0 Then
            sTempPath = Left$(sTempPath, cch)
            sTempFull = String$(MAX_PATH, 0)
            GetTempFileNameW StrPtr(sTempPath), StrPtr("RTF"), 0, StrPtr(sTempFull)
            sTempFull = TrimNullW(sTempFull)
            Dim mModeOld As Long = mCurSaveMode
            mCurSaveMode = 1
            SaveRtf sTempFull
            mCurSaveMode = mModeOld
            DestroyWindow hRE
            hRE = 0: hREDll = 0
            CreateRichEdit
            OpenRtf sTempFull, 1
            DeleteFile sTempFull
        End If
    End Sub
    Private Sub CreateRichEdit()
        Dim szClass As String
        #If dbg_usenewrichedit Then
            #If Win64 Then
            hREDll = LoadLibrary(App.Path & "\Build_win64\riched20.dll")
            #Else
            hREDll = LoadLibrary(App.Path & "\Build_win32\riched20.dll")
            #End If
            If hREDll = 0 Then
                hREDll = LoadLibrary(App.Path & "\riched20.dll")
            End If
            If hREDll Then
                szClass = "RichEditD2D" 'Note: RichEditD2DPT doesn't respond to normal formatting APIs.
                bD2DFound = True
                LogMsg "Loaded RichEdit DLL from local folder, enabling Direct2D for Color Fonts"
            End If
        #End If
        If hREDll = 0 Then
            LogMsg "Falling back to standard system RichEdit controls."
            hREDll = LoadLibrary("msftedit.dll")
            If hREDll Then
                'Use newer RichEdit if available 
                szClass = MSFTEDIT_CLASS
            Else
                hREDll = LoadLibrary("riched20.dll")
                szClass = RICHEDIT_CLASSW
            End If
        End If
        If hREDll Then
            Dim rc As RECT
            GetClientRect pbREHost.hWnd, rc
            Dim dwStyle As WindowStyles = ES_MULTILINE Or ES_SAVESEL Or WS_VISIBLE Or WS_CHILD Or WS_BORDER Or WS_TABSTOP
            If mWordWrap = False Then
                dwStyle = dwStyle Or WS_HSCROLL Or WS_VSCROLL Or ES_AUTOVSCROLL Or ES_AUTOHSCROLL
                Debug.Print "CreateRichEd added ScrollBar styles"
            End If
            hRE = CreateWindowExW(0, StrPtr(szClass), 0, dwStyle, _
                    0, 0, rc.Right, rc.Bottom, pbREHost.hWnd, 0, App.hInstance, ByVal 0&)
                    
            If hRE Then
                #If dbg_usenewrichedit Then
                    SendMessage hRE, EM_SWITCHTOD2D, 0, ByVal 0
                #End If
                Dim hFont As LongPtr = CreateGDIFontFromOLEFont(pbREHost.Font)
                SendMessage hRE, WM_SETFONT, hFont, ByVal 1&
                tDefChFmt.cbSize = LenB(Of CHARFORMAT2W)
                SendMessage hRE, EM_GETCHARFORMAT, SCF_DEFAULT, tDefChFmt
                SendMessage hRE, EM_SETEVENTMASK, 0, ByVal ENM_SELCHANGE Or ENM_CHANGE
                SendMessage hRE, EM_SETOPTIONS, ECOOP_OR, ByVal ECO_NOHIDESEL Or ECO_AUTOVSCROLL Or ECO_AUTOHSCROLL Or ECO_WANTRETURN
                If mWordWrap = False Then
                    SendMessage hRE, EM_SHOWSCROLLBAR, SB_HORZ, ByVal CTRUE
                    SendMessage hRE, EM_SHOWSCROLLBAR, SB_VERT, ByVal CTRUE
                End If
                Subclass2 pbREHost.hWnd, AddressOf PBWndProc, pbREHost.hWnd
                Subclass2 hRE, AddressOf PBWndProc, hRE
                AddClipboardFormatListener hRE
                WM_FINDCALLBACK = RegisterWindowMessage(FINDMSGSTRING)
                If bD2DFound Then
                    SetWindowText hRE, sWelcomeD2D
                Else
                    SetWindowText hRE, sWelcomeStd
                End If
                mFirstChange = False 'Reset whether the first change has occured, because we start that with user input
            Else
                Debug.Print "CreateRichEd Error=" & Err.LastDllError & ", " & GetSystemErrorString(Err.LastDllError)
                FreeLibrary hREDll
            End If
        Else
            Debug.Print "Couldn't load RichEdit DLL"
        End If
    End Sub

    
    [Description("Returns an HFONT for an StdFont")]
    Public Function CreateGDIFontFromOLEFont(ByVal Font As IFont) As LongPtr
    If Font Is Nothing Then Exit Function
    Dim LF As LOGFONT
    ' hFont will be cleared when the IFont reference goes out of scope or is set to nothing.
    GetObjectW Font.hFont, LenB(LF), LF
    CreateGDIFontFromOLEFont = CreateFontIndirect(LF)
    End Function
    
    [Description("Retrieve a CHARFORMAT2W type from properties in an IPropertyStore interface.")]
    Private Function PropStoreToCHRFMT(pps As IPropertyStore, tCFMT As CHARFORMAT2W) As Boolean
        On Error GoTo e0
        Dim propvar As Variant
        Dim uValue As Long
        Dim pos As Long
        ZeroMemory tCFMT, LenB(tCFMT)
        With tCFMT
            .cbSize = LenB(Of CHARFORMAT2W)
            If SUCCEEDED(pps.GetValue(UI_PKEY_FontProperties_Bold, propvar)) Then
                If UIPropertyToUInt32(UI_PKEY_FontProperties_Bold, propvar, uValue) = S_OK Then
                    If uValue <> UI_FONTPROPERTIES_NOTAVAILABLE Then
                        .dwMask = .dwMask Or CFM_BOLD
                        If uValue = UI_FONTPROPERTIES_SET Then .dwEffects = .dwEffects Or CFE_BOLD
                    End If
                End If
            End If
            PropVariantClear propvar
            pos += 1
            If SUCCEEDED(pps.GetValue(UI_PKEY_FontProperties_Italic, propvar)) Then
                If VariantUI4ToI4(propvar, uValue) Then
                    If uValue <> UI_FONTPROPERTIES_NOTAVAILABLE Then
                        .dwMask = .dwMask Or CFM_ITALIC
                        If uValue = UI_FONTPROPERTIES_SET Then .dwEffects = .dwEffects Or CFE_ITALIC
                    End If
                End If
            End If
            PropVariantClear propvar
            pos += 1
            If SUCCEEDED(pps.GetValue(UI_PKEY_FontProperties_Underline, propvar)) Then
                If VariantUI4ToI4(propvar, uValue) Then
                    If uValue <> UI_FONTUNDERLINE_NOTAVAILABLE Then
                        .dwMask = .dwMask Or CFM_UNDERLINE
                        If uValue = UI_FONTUNDERLINE_SET Then .dwEffects = .dwEffects Or CFE_UNDERLINE
                    End If
                End If
            End If
            PropVariantClear propvar
            pos += 1
            If SUCCEEDED(pps.GetValue(UI_PKEY_FontProperties_Strikethrough, propvar)) Then
                If VariantUI4ToI4(propvar, uValue) Then
                    If uValue <> UI_FONTPROPERTIES_NOTAVAILABLE Then
                        .dwMask = .dwMask Or CFM_STRIKEOUT
                        If uValue = UI_FONTPROPERTIES_SET Then .dwEffects = .dwEffects Or CFE_STRIKEOUT
                    End If
                End If
            End If
            PropVariantClear propvar
            pos += 1
            If SUCCEEDED(pps.GetValue(UI_PKEY_FontProperties_VerticalPositioning, propvar)) Then
                If VariantUI4ToI4(propvar, uValue) Then
                    If uValue <> UI_FONTVERTICALPOSITION_NOTAVAILABLE Then
                        .dwMask = .dwMask Or CFM_SUPERSCRIPT Or CFM_SUBSCRIPT
                        If uValue <> UI_FONTPROPERTIES_NOTSET Then
                                If uValue = UI_FONTVERTICALPOSITION_SUPERSCRIPT Then
                                    .dwEffects = .dwEffects Or CFE_SUPERSCRIPT
                                Else
                                    .dwEffects = .dwEffects Or CFE_SUBSCRIPT
                                End If
                        End If
                    End If
                End If
            End If
            PropVariantClear propvar
            pos += 1
            If SUCCEEDED(pps.GetValue(UI_PKEY_FontProperties_Family, propvar)) Then
                Dim pszFamily As String
                If VariantLPWSTRtoSTR(propvar, pszFamily) Then
                    Debug.Print "psToCf pszFamily=" & Chr$(34) & pszFamily & Chr$(34)
                    If lstrcmp(pszFamily, "") Then
                        CopyMemory(.szFaceName(0), ByVal StrPtr(pszFamily), LenB(pszFamily))
                        .dwMask = .dwMask Or CFM_FACE
                    End If
                End If
            End If
            PropVariantClear propvar
            pos += 1
            If SUCCEEDED(pps.GetValue(UI_PKEY_FontProperties_Size, propvar)) Then
                Dim decSize As Decimal
                Dim dSize As Double
                decSize = propvar
                dSize = CDbl(decSize)
                If dSize > 0 Then
                    .yHeight = (dSize * TWIPS_PER_POINT)
                    .dwMask = .dwMask Or CFM_SIZE
                End If
            End If
            PropVariantClear propvar
            pos += 1
            If SUCCEEDED(pps.GetValue(UI_PKEY_FontProperties_ForegroundColorType, propvar)) Then
                If VariantUI4ToI4(propvar, uValue) Then
                    If uValue = UI_SWATCHCOLORTYPE_AUTOMATIC Then
                        .dwMask = .dwMask Or CFM_COLOR
                        .dwEffects = .dwEffects Or CFE_AUTOCOLOR
                    End If
                End If
            End If
            PropVariantClear propvar
            pos += 1
            If SUCCEEDED(pps.GetValue(UI_PKEY_FontProperties_ForegroundColor, propvar)) Then
                If VariantUI4ToI4(propvar, uValue) Then
                    .dwMask = .dwMask Or CFM_COLOR
                    .crTextColor = uValue
                End If
            End If
            PropVariantClear propvar
            pos += 1
            If SUCCEEDED(pps.GetValue(UI_PKEY_FontProperties_BackgroundColorType, propvar)) Then
                If VariantUI4ToI4(propvar, uValue) Then
                    If uValue = UI_SWATCHCOLORTYPE_NOCOLOR Then
                        .dwMask = .dwMask Or CFM_BACKCOLOR
                        .dwEffects = .dwEffects Or CFE_AUTOBACKCOLOR
                    End If
                End If
            End If
            PropVariantClear propvar
            pos += 1
            If SUCCEEDED(pps.GetValue(UI_PKEY_FontProperties_BackgroundColor, propvar)) Then
                If VariantUI4ToI4(propvar, uValue) Then
                    .dwMask = .dwMask Or CFM_BACKCOLOR
                    .crBackColor = uValue
                End If
            End If
            pos += 1
        End With
        Return True
    e0:
        LogMsg "Error in PropStoreToCHRFMT::pos=" & pos & ",number=" & Err.Number & ",desc=" & Err.Description
        Return False
    End Function
    
    [Description("Configure an IPropertyStore interface from properties in a CHARFORMAT2W type.")]
    Private Function CHRFMTToPropStore(pps As IPropertyStore, tCFMT As CHARFORMAT2W) As Boolean
        Dim propvar As Variant
        Dim psz As String
        Dim pv As Variant
        Dim pos As Long
        On Error GoTo e0
        With tCFMT
            If (.dwMask And CFM_BOLD) Then
                If (.dwEffects And CFE_BOLD) Then
                    UIInitPropertyFromUInt32 UI_PKEY_FontProperties_Bold, UI_FONTPROPERTIES_SET, propvar
                Else
                    UIInitPropertyFromUInt32 UI_PKEY_FontProperties_Bold, UI_FONTPROPERTIES_NOTSET, propvar
                End If
            Else
                    UIInitPropertyFromUInt32 UI_PKEY_FontProperties_Bold, UI_FONTPROPERTIES_NOTAVAILABLE, propvar
            End If
            pps.SetValue UI_PKEY_FontProperties_Bold, propvar
            VariantClear propvar
            pos += 1
            
            If (.dwMask And CFM_ITALIC) Then
                If (.dwEffects And CFE_ITALIC) Then
                    propvar = CLng(UI_FONTPROPERTIES_SET)
                Else
                    propvar = CLng(UI_FONTPROPERTIES_NOTSET)
                End If
            Else
                propvar = CLng(UI_FONTPROPERTIES_NOTAVAILABLE)
            End If
            VariantSetType propvar, VT_UI4, VT_I4
            pps.SetValue UI_PKEY_FontProperties_Italic, propvar
            VariantClear propvar
            pos += 1
            
            If (.dwMask And CFM_UNDERLINE) Then
                If (.dwEffects And CFE_UNDERLINE) Then
                    propvar = CLng(UI_FONTUNDERLINE_SET)
                Else
                    propvar = CLng(UI_FONTUNDERLINE_NOTSET)
                End If
            Else
                propvar = CLng(UI_FONTUNDERLINE_NOTAVAILABLE)
            End If
            VariantSetType propvar, VT_UI4, VT_I4
            pps.SetValue UI_PKEY_FontProperties_Underline, propvar
            VariantClear propvar
            pos += 1
            
            If (.dwMask And CFM_STRIKEOUT) Then
                If (.dwEffects And CFE_STRIKEOUT) Then
                    propvar = CLng(UI_FONTPROPERTIES_SET)
                Else
                    propvar = CLng(UI_FONTPROPERTIES_NOTSET)
                End If
            Else
                propvar = CLng(UI_FONTPROPERTIES_NOTAVAILABLE)
            End If
            VariantSetType propvar, VT_UI4, VT_I4
            pps.SetValue UI_PKEY_FontProperties_Strikethrough, propvar
            VariantClear propvar
            pos += 1
            
            propvar = CLng(UI_FONTVERTICALPOSITION_NOTAVAILABLE)
            If (.dwMask And CFM_SUBSCRIPT) Then
                If (.dwEffects And CFE_SUBSCRIPT) Then
                    propvar = CLng(UI_FONTVERTICALPOSITION_SUBSCRIPT)
                End If
            ElseIf (.dwMask And CFM_SUPERSCRIPT) Then
                If (.dwEffects And CFE_SUPERSCRIPT) Then
                    propvar = CLng(UI_FONTVERTICALPOSITION_SUPERSCRIPT)
                End If
            ElseIf (.dwMask And CFM_OFFSET) Then
                If .yOffset > 0 Then
                    propvar = CLng(UI_FONTVERTICALPOSITION_SUPERSCRIPT)
                ElseIf .yOffset < 0 Then
                    propvar = CLng(UI_FONTVERTICALPOSITION_SUBSCRIPT)
                Else
                    propvar = CLng(UI_FONTVERTICALPOSITION_NOTAVAILABLE)
                End If
            End If
            VariantSetType propvar, VT_UI4, VT_I4
            pps.SetValue UI_PKEY_FontProperties_VerticalPositioning, propvar
            VariantClear propvar
            pos += 1
            
            If (.dwMask And CFM_FACE) Then
                Dim i As Long
                psz = ""
                For i = 0 To 31
                    If .szFaceName(i) Then
                        psz = psz & ChrW2(.szFaceName(i))
                    End If
                Next
                ' Debug.Print "CfTops pszFamily=" & Chr$(34) & psz & Chr$(34)
            Else
                psz = ""
            End If
            ' Dim lpAlloc As LongPtr = CoTaskMemAlloc((lstrlenW(.szFaceName(0)) + 1) * 2)
            ' ZeroMemory ByVal lpAlloc, (lstrlenW(.szFaceName(0)) + 1) * 2
            ' CopyMemory ByVal lpAlloc, .szFaceName(0), lstrlenW(.szFaceName(0)) * 2
            ' VariantSetType propvar, VT_LPWSTR
            ' CopyMemory ByVal PointerAdd(VarPtr(propvar), 8), lpAlloc, LenB(Of LongPtr)
            ' Debug.Print "psz=" & psz
            UIInitPropertyFromString UI_PKEY_FontProperties_Family, WCHARtoStr(.szFaceName), propvar
            pps.SetValue UI_PKEY_FontProperties_Family, propvar
            VariantClear propvar
            
            'Surprisingly, this does not work:
            ' If (.dwMask And CFM_FACE) Then
            '     Dim i As Long
            '     For i = 0 To 31
            '         If .szFaceName(i) Then
            '             psz = psz & ChrW2(.szFaceName(i))
            '         End If
            '     Next
            ' Else
            '     psz = ""
            ' End If
            ' PropVariantChangeType propvar, pv, 0, VT_LPWSTR
            ' pps.SetValue UI_PKEY_FontProperties_Family, propvar
            ' VariantClear propvar

            pos += 1
            Dim decSize As Decimal
            If (.dwMask And CFM_SIZE) Then
                propvar = CVar(CDec(CDbl(.yHeight) / TWIPS_PER_POINT))
            Else
                propvar = decSize
            End If
            pps.SetValue UI_PKEY_FontProperties_Size, propvar
            VariantClear propvar
            pos += 1
            
            If (.dwMask And CFM_COLOR) And ((.dwEffects And CFE_AUTOCOLOR) = 0) Then
                propvar = CLng(UI_SWATCHCOLORTYPE_RGB)
                VariantSetType propvar, VT_UI4, VT_I4
                pps.SetValue UI_PKEY_FontProperties_ForegroundColorType, propvar
                VariantClear propvar
                
                propvar = .crTextColor
                VariantSetType propvar, VT_UI4, VT_I4
                pps.SetValue UI_PKEY_FontProperties_ForegroundColor, propvar
                
            ElseIf (.dwMask And CFM_COLOR) And (.dwEffects And CFE_AUTOCOLOR) Then
                propvar = CLng(UI_SWATCHCOLORTYPE_AUTOMATIC)
                VariantSetType propvar, VT_UI4, VT_I4
                pps.SetValue UI_PKEY_FontProperties_ForegroundColorType, propvar
            End If
            VariantClear propvar
            pos += 1
            
            If (.dwMask And CFM_BACKCOLOR) And ((.dwEffects And CFE_AUTOBACKCOLOR) = 0) Then
                propvar = CLng(UI_SWATCHCOLORTYPE_RGB)
                VariantSetType propvar, VT_UI4, VT_I4
                pps.SetValue UI_PKEY_FontProperties_BackgroundColorType, propvar
                VariantClear propvar
                
                propvar = .crBackColor
                VariantSetType propvar, VT_UI4, VT_I4
                pps.SetValue UI_PKEY_FontProperties_BackgroundColor, propvar
                
            Else
                propvar = CLng(UI_SWATCHCOLORTYPE_NOCOLOR)
                VariantSetType propvar, VT_UI4, VT_I4
                pps.SetValue UI_PKEY_FontProperties_BackgroundColorType, propvar
            End If
            VariantClear propvar
        End With
        Return True
    e0:
    LogMsg "Error in CHRFMTToPropStore::pos=" & pos & ",number=" & Err.Number & ",desc=" & Err.Description
    Return False
    End Function
    
    Private Sub SetFontValues(pProps As IPropertyStore)
        LogMsg "Setting font values..."
        Dim tFmt As CHARFORMAT2W
        If PropStoreToCHRFMT(pProps, tFmt) Then
            SendMessage hRE, EM_SETCHARFORMAT, SCF_SELECTION, tFmt
        Else
            LogMsg "Error: Failed to convert between property store and chrfmt."
        End If
    End Sub
    
    Private Sub GetFontValues(pps As IPropertyStore)
        If hRE Then
            Dim tFmt As CHARFORMAT2W
            tFmt.cbSize = LenB(Of CHARFORMAT2W)
            SendMessage hRE, EM_GETCHARFORMAT, SCF_SELECTION, tFmt
            If CHRFMTToPropStore(pps, tFmt) = False Then
                LogMsg("Error: Failed to convert between chrfmt and property store.")
            ' Else
            '     LogMsg "Successfully converted CHRFMT to PropStore for GetFontValues"
            End If
        Else
            LogMsg "Warning: Received GetFontValues request before RichEd creation."
        End If
    End Sub
    
    Private Sub SetZoom(nPct As Decimal)
        If hRE Then
            If nPct <> mCurZoom Then
                mCurZoom = nPct
                If nPct = 100 Then
                    SendMessage hRE, EM_SETZOOM, 0, ByVal 0
                Else
                    Dim lNum As Long, lDnom As Long
                    lNum = CLng(nPct)
                    lDnom = 100
                    SendMessage hRE, EM_SETZOOM, lNum, ByVal lDnom
                End If
            End If
        End If
    End Sub
    
    Private Function OpenRtf(sFile As String, nFormat As Long) As Long
        Dim hFile As LongPtr
        Dim tStrm As EDITSTREAM
        
        If hRE = 0 Then
            LogMsg "OpenRtf error: No RichEdit control exists."
            Return ERROR_INVALID_CLASS
        End If
        hFile = CreateFile(sFile, GENERIC_READ, FILE_SHARE_READ, vbNullPtr, OPEN_EXISTING, FILE_FLAG_SEQUENTIAL_SCAN, 0)
        If hFile = INVALID_HANDLE_VALUE Then
            LogMsg "OpenRtf.CreateFile error: " & Err.LastDllError & ", " & GetSystemErrorString(Err.LastDllError)
            Return Err.LastDllError
        End If
        
        With tStrm
            .dwCookie = hFile
            .pfnCallback = AddressOf EditStreamCallback
        End With
        mStreamOp = rsoRead
        
        Dim dwFlags As RichEdit_StreamFormats
        If nFormat = 1 Then
            dwFlags = SF_RTF
        Else
            dwFlags = SF_TEXT Or SF_UNICODE
        End If
        
        If (dwFlags And SF_UNICODE) <> 0 Then
            Dim B(0 To 1) As Byte, dwRead As Long
            ReadFile hFile, VarPtr(B(0)), 2, dwRead, vbNullPtr
            If B(0) = &HFF And B(1) = &HFE Then ' UTF-16 BOM
            ElseIf dwRead > 0 Then
                SetFilePointer hFile, 0, ByVal 0, FILE_BEGIN
            End If
        End If
        OpenRtf = CLng(SendMessage(hRE, EM_STREAMIN, dwFlags, ByVal VarPtr(tStrm)))
        CloseHandle hFile
    End Function
    Private Sub DoOpen()
        On Error GoTo e0
        Dim fso As New FileOpenDialog
        Dim si As IShellItem
        Dim lp As LongPtr
        Dim li As Long
        Dim nFilt(0) As COMDLG_FILTERSPEC
        nFilt(0).pszName = StrPtr("Supported text files")
        nFilt(0).pszSpec = StrPtr("*.rtf;*.txt")
        With fso
            .SetTitle "Open text file..."
            .SetFileTypes 1, VarPtr(nFilt(0))
            .SetOptions(FOS_FILEMUSTEXIST)
            On Error Resume Next
            .Show Me.hWnd
            .GetResult si
            On Error GoTo e0
            If si IsNot Nothing Then
                si.GetDisplayName(SIGDN_DESKTOPABSOLUTEPARSING, lp)
                mCurFile = LPWSTRtoStr(lp)
                If Right$(mCurFile, 4) = ".rtf" Then
                    OpenRtf mCurFile, 1
                Else
                    OpenRtf mCurFile, 2
                End If
                AppendMRU mCurFile
            Else
                Exit Sub
            End If
        End With
 
        Exit Sub
        e0:
        LogMsg "DoOpen error: " & Err.Number & ", " & Err.Description
    End Sub
    
    Private Sub DoSave(nFormat As Long, Optional bNotify As Boolean = True)
        On Error GoTo e0
        Dim fso As New FileSaveDialog
        Dim si As IShellItem
        Dim lp As LongPtr
        Dim li As Long
        Dim nFilt(1) As COMDLG_FILTERSPEC
        nFilt(0).pszName = StrPtr("Rich Text Format")
        nFilt(0).pszSpec = StrPtr("*.rtf")
        nFilt(1).pszName = StrPtr("Plain Text")
        nFilt(1).pszSpec = StrPtr("*.txt")
        With fso
            .SetTitle "Save text as..."
            .SetFileTypes 2, VarPtr(nFilt(0))
            If nFormat = 2 Then
                .SetFileTypeIndex 2
                .SetDefaultExtension "txt"
            Else
                .SetDefaultExtension "rtf"
            End If
            On Error Resume Next
            .Show Me.hWnd
            .GetResult si
            On Error GoTo e0
            If si IsNot Nothing Then
                si.GetDisplayName(SIGDN_DESKTOPABSOLUTEPARSING, lp)
                mCurFile = LPWSTRtoStr(lp)
                .GetFileTypeIndex(mCurSaveMode)
            Else
                Exit Sub
            End If
        End With
        Dim bExists As BOOL
        bExists = PathFileExists(mCurFile)
        SaveRtf mCurFile
        If bExists Then
            If bNotify Then
                SHChangeNotify If(bExists, SHCNE_UPDATEITEM, SHCNE_CREATE), SHCNF_PATHW, StrPtr(mCurFile), 0
            End If
        End If
        AppendMRU(mCurFile) 'AppendMRU won't allow a dupe; it just gets bumped up to first
        Exit Sub
        e0:
        LogMsg "DoSave error: " & Err.Number & ", " & Err.Description
    End Sub
    Private Function SaveRtf(sFile As String) As Long
        Dim hFile As LongPtr
        Dim tStrm As EDITSTREAM
        Dim bExists As BOOL
        
        If hRE = 0 Then
            LogMsg "SaveRtf error: No RichEdit control exists."
            Return ERROR_INVALID_CLASS
        End If
        bExists = PathFileExists(sFile)
        hFile = CreateFile(sFile, GENERIC_WRITE, 0, vbNullPtr, CREATE_ALWAYS, FILE_FLAG_SEQUENTIAL_SCAN, 0)
        If hFile = INVALID_HANDLE_VALUE Then
            LogMsg "SaveRtf.CreateFile error: " & Err.LastDllError & ", " & GetSystemErrorString(Err.LastDllError)
            Return Err.LastDllError
        End If
        
        With tStrm
            .dwCookie = hFile
            .pfnCallback = AddressOf EditStreamCallback
        End With
        mStreamOp = rsoWrite
        
        Dim dwFlags As RichEdit_StreamFormats
        If mCurSaveMode = 1 Then
            dwFlags = SF_RTF
        Else
            dwFlags = SF_TEXT Or SF_UNICODE
        End If
        If (dwFlags And SF_UNICODE) <> 0 Then
            Dim B(0 To 1) As Byte ' UTF-16 BOM
            B(0) = &HFF
            B(1) = &HFE
            WriteFile hFile, VarPtr(B(0)), 2, 0, vbNullPtr
        End If
        SendMessage hRE, EM_STREAMOUT, dwFlags, tStrm
        
        CloseHandle hFile

        LogMsg "Save file result=" & tStrm.dwError & ",path=" & sFile
        Return tStrm.dwError
    End Function
        
    Private Function GetSelText() As String
        If hRE = 0 Then Exit Function
        Dim tRng As CHARRANGE
        SendMessage hRE, EM_EXGETSEL, 0, tRng
        Dim cch As Long = (tRng.cpMax - tRng.cpMin)
        If cch > 0 Then
            Dim sBuf As String = String$(cch, 0)
            Dim cchRet As Long = CLng(SendMessage(hRE, EM_GETSELTEXT, 0, ByVal StrPtr(sBuf)))
            If cchRet > 0 Then
                Return Left$(sBuf, cchRet)
            End If
        End If
    End Function
    
    Private Sub DoFind()
        If hRE = 0 Then Exit Sub
        If hFR Then 'findreplace already open
            UnhookWindowsHookEx hHookFR
            hHookFR = 0
            DestroyWindow hFR
            hFR = 0
        End If
        Dim sCurSel As String = GetSelText()
        ZeroMemory tFindRep, LenB(Of FINDREPLACEW)
        ZeroMemory sFindBuff(0), LenB(sFindBuff)
        If sCurSel <> "" Then
            If Len(sCurSel) > 80 Then
                sCurSel = Left$(sCurSel, 80)
            End If
            CopyMemory sFindBuff(0), ByVal StrPtr(sCurSel), Len(sCurSel) * 2
        End If
        With tFindRep 'FindTextW is non-blocking and data from tFindRep is used after returning,
                      'so tFindRep must remain in scope and can't be local
            .lStructSize = LenB(Of FINDREPLACEW)
            .hwndOwner = pbREHost.hWnd
            .lpstrFindWhat = VarPtr(sFindBuff(0))
            .wFindWhatLen = (UBound(sFindBuff) - 2) * 2
        End With
        hFR = FindTextW(tFindRep)
        hHookFR = SetWindowsHookEx(WH_GETMESSAGE, AddressOf FRHookProc, 0, App.ThreadID)
    End Sub
    Private Sub DoReplace()
        If hRE = 0 Then Exit Sub
        If hFR Then 'findreplace already open
            If hHookFR Then UnhookWindowsHookEx hHookFR
            hHookFR = 0
            DestroyWindow hFR
            hFR = 0
        End If
        Dim sCurSel As String = GetSelText()
        ZeroMemory tFindRep, LenB(Of FINDREPLACEW)
        ZeroMemory sFindBuff(0), LenB(sFindBuff)
        ZeroMemory sReplaceBuff(0), LenB(sReplaceBuff)
        If sCurSel <> "" Then
            If Len(sCurSel) > 80 Then
                sCurSel = Left$(sCurSel, 80)
            End If
            CopyMemory sFindBuff(0), ByVal StrPtr(sCurSel), Len(sCurSel) * 2
        End If
        With tFindRep
            .lStructSize = LenB(Of FINDREPLACEW)
            .hwndOwner = hRE
            .lpstrFindWhat = VarPtr(sFindBuff(0))
            .wFindWhatLen = UBound(sFindBuff) * 2
            .lpstrReplaceWith = VarPtr(sReplaceBuff(0))
            .wReplaceWithLen = UBound(sReplaceBuff) * 2
        End With
        hFR = ReplaceTextW(tFindRep)
        hHookFR = SetWindowsHookEx(WH_GETMESSAGE, AddressOf FRHookProc, 0, App.ThreadID)
    End Sub

    Private Function GetPlainText() As String
        If hRE <> 0 Then
            Dim REGTLEX As GETTEXTLENGTHEX, Length As Long
            REGTLEX.flags = GTL_PRECISE Or GTL_NUMCHARS
            REGTLEX.flags = REGTLEX.flags Or GTL_USECRLF
            REGTLEX.codepage = CP_UNICODE
            Length = CLng(SendMessage(hRE, EM_GETTEXTLENGTHEX, VarPtr(REGTLEX), ByVal 0&))
            If Length > 0 Then
                Dim REGTEX As GETTEXTEX, Buffer As String
                REGTEX.cb = (Length + 1) * 2
                REGTEX.flags = GT_USECRLF
                REGTEX.codepage = CP_UNICODE
                Buffer = String$(Length, vbNullChar)
                Length = CLng(SendMessage(hRE, EM_GETTEXTEX, VarPtr(REGTEX), ByVal StrPtr(Buffer)))
                If Length > 0 Then GetPlainText = Left$(Buffer, Length)
            End If
        End If
    End Function
 
    Private Function EditStreamCallback(ByVal dwCookie As LongPtr, ByVal pbBuf As LongPtr, ByVal cb As Long, pcb As Long) As Long
        If dwCookie = 0 Then Return ERROR_INVALID_HANDLE
        If mStreamOp = rsoRead Then
            If ReadFile(dwCookie, ByVal pbBuf, cb, pcb, vbNullPtr) Then
                Return 0
            Else
                Return -1
            End If
        ElseIf mStreamOp = rsoWrite Then
            If WriteFile(dwCookie, ByVal pbBuf, cb, pcb, vbNullPtr) Then
                Return 0
            Else
                Return -1
            End If
        End If
    End Function
    
    Private Sub DeleteSelection()
        If IsTextSelected() Then
                SendMessage hRE, EM_REPLACESEL, CTRUE, ByVal StrPtr("")
        End If
    End Sub
    
    Private Function IsTextSelected() As Boolean
        If hRE Then
            Dim tRange As CHARRANGE
            SendMessage hRE, EM_EXGETSEL, 0, tRange
            If (tRange.cpMax - tRange.cpMin) >= 1 Then Return True
        End If
        Return False
    End Function
    
    Private Sub DoInsertPicture()
        On Error GoTo e0
        
        If mWin8 Or bD2DFound Then
            Dim fso As New FileOpenDialog
            Dim si As IShellItem
            Dim lp As LongPtr
            Dim sPic As String
            Dim tFilt(0) As COMDLG_FILTERSPEC
            tFilt(0).pszName = StrPtr("Supported image formats")
            tFilt(0).pszSpec = StrPtr("*.jpg;*.gif;*.bmp;*.png")
            With fso
                .SetTitle "Insert picture..."
                .SetOptions(FOS_FILEMUSTEXIST)
                .SetFileTypes 1, VarPtr(tFilt(0))
                On Error Resume Next
                .Show Me.hWnd
                .GetResult si
                On Error GoTo e0
            End With
            If si IsNot Nothing Then
                Dim sFile As String
                si.GetDisplayName(SIGDN_NORMALDISPLAY, lp)
                sFile = LPWSTRtoStr(lp)
                Dim cx As Long, cy As Long
                Dim szPx As SIZE, szHm As SIZE
                Dim si2 As IShellItem2
                Set si2 = si
                si2.GetUInt32 PKEY_Image_HorizontalSize, cx
                si2.GetUInt32 PKEY_Image_VerticalSize, cy
                If (cx = 0) Or (cy = 0) Then
                    LogMsg "DoInsertPicture::Couldn't get image dimensions"
                    Exit Sub
                End If
                szPx.cx = cx: szPx.cy = cy
                PixelToHimetric szPx, szHm
                LogMsg "DoInsertPicture::szPx.cx=" & szPx.cx & ",szHm.cx=" & szHm.cx
                
                Dim pStm As IStream
                si.BindToHandler 0, BHID_Stream, IID_IStream, pStm
                If pStm Is Nothing Then
                    LogMsg "DoInsertPicture::Couldn't get image stream"
                    Exit Sub
                End If
                Dim tImg As RICHEDIT_IMAGE_PARAMETERS
                tImg.xWidth = szHm.cx: tImg.yHeight = szHm.cy
                Set tImg.pIStream = pStm
                tImg.pwszAlternateText = StrPtr(sFile)
                If hRE Then SendMessage hRE, EM_INSERTIMAGE, 0, tImg
            End If
        Else
            MsgBox "To do this properly on a Windows 7 standard richedit, see https://www.betaarchive.com/wiki/index.php/Microsoft_KB_Archive/220844" & vbCrLf & _
                    "For now, this is implemented by a shortcut that dumps current clipboard contents and pastes it.", vbOKOnly Or vbInformation, App.Title
            
            Dim sFile2 As String
            si.GetDisplayName(SIGDN_DESKTOPABSOLUTEPARSING, lp)
            sFile2 = LPWSTRtoStr(lp)
            'Please use proper gdip startup/shutdown and memory freeing in a real app, not this hacky shortcut
            Dim hBmpGdi As LongPtr, hBmp As LongPtr
            Static tGdip As GdiplusStartupInput
            Static gdipToken As LongPtr
            If gdipToken = 0 Then
                tGdip.GdiplusVersion = 1
                GdiplusStartup(gdipToken, tGdip)
            End If
            GdipCreateBitmapFromFile StrPtr(sFile2), hBmpGdi
            GdipCreateHBITMAPFromBitmap hBmpGdi, hBmp, 0
            OpenClipboard(Me.hWnd)
            EmptyClipboard()
            SetClipboardData(CF_BITMAP, hBmp)
            CloseClipboard()
            SetFocusAPI hRE
            SendMessage hRE, WM_PASTE, 0, ByVal 0
            GdipFree(hBmpGdi)
        End If
        Exit Sub
        e0:
        LogMsg "DoInsertPicture error: " & Err.Number & ", " & Err.Description
    End Sub
 
    [Description("Implementation of AtlPixelToHiMetric")]
    Private Sub PixelToHimetric(px As SIZE, hm As SIZE, Optional hwndForDC As LongPtr = 0)
        Dim nPixelsPerInchX As Long
        Dim nPixelsPerInchY As Long
        
        Dim hDC As LongPtr = GetDC(hwndForDC)
        nPixelsPerInchX = GetDeviceCaps(hDC, LOGPIXELSX)
        nPixelsPerInchY = GetDeviceCaps(hDC, LOGPIXELSY)
        ReleaseDC(hwndForDC, hDC)
        hm.cx = MAP_PIX_TO_LOGHIM(px.cx, nPixelsPerInchX)
        hm.cy = MAP_PIX_TO_LOGHIM(px.cy, nPixelsPerInchY)
    End Sub
    Private Function MAP_PIX_TO_LOGHIM(x As Long, ppli As Long) As Long
        Const HIMETRIC_PER_INCH = 2540
        Return MulDiv(HIMETRIC_PER_INCH, x, ppli)
    End Function
 
    
    [Description("Synchronizes any list item format with the current position in the RichEdit.")]
    Private Sub SyncListType()
        Dim tPF As PARAFORMAT2
        tPF.cbSize = LenB(Of PARAFORMAT2)
        tPF.dwMask = PFM_NUMBERING
        Dim hr As LongPtr = SendMessage(hRE, EM_GETPARAFORMAT, 0, tPF)
        Select Case tPF.wNumbering
            Case 0: mCurListFormat = ListNone
            Case PFN_BULLET: mCurListFormat = ListBullets
            Case PFN_ARABIC: mCurListFormat = ListNumbered
            Case PFN_LCLETTER: mCurListFormat = ListLower
            Case PFN_UCLETTER: mCurListFormat = ListUpper
            Case PFN_LCROMAN: mCurListFormat = ListRomanLower
            Case PFN_UCROMAN: mCurListFormat = ListRomanUpper
        End Select
    End Sub
    [Description("Sets the style of or begins a formatted list in the RichEdit.")]
    Private Sub SetListType()
        Dim tPF As PARAFORMAT2
        tPF.cbSize = LenB(Of PARAFORMAT2)
        tPF.dwMask = PFM_NUMBERING
        Select Case mCurListFormat
            Case 0: tPF.wNumbering = 0
            Case ListBullets: tPF.wNumbering = PFN_BULLET
            Case ListNumbered: tPF.wNumbering = PFN_ARABIC
            Case ListLower: tPF.wNumbering = PFN_LCLETTER
            Case ListUpper: tPF.wNumbering = PFN_UCLETTER
            Case ListRomanLower: tPF.wNumbering = PFN_LCROMAN
            Case ListRomanUpper: tPF.wNumbering = PFN_UCROMAN
        End Select
        SendMessage(hRE, EM_SETPARAFORMAT, 0, tPF)
    End Sub
    
    [Description("Synchronizes the ribbon alignment selection when the selection in the RichEdit box changes.")]
    Private Sub SyncAlignment()
        Dim tPF As PARAFORMAT2
        tPF.cbSize = LenB(Of PARAFORMAT2)
        tPF.dwMask = PFM_ALIGNMENT
        Dim hr As LongPtr = SendMessage(hRE, EM_GETPARAFORMAT, 0, tPF)
        ' Debug.Print "SyncAlignment hr=" & hr & ",err=" & Err.LastDllError & ",align=" & tPF.wAlignment
        Select Case tPF.wAlignment
            Case PFA_LEFT: mCurAlign = AlignLeft
            Case PFA_CENTER: mCurAlign = AlignCenter
            Case PFA_RIGHT: mCurAlign = AlignRight
            Case PFA_JUSTIFY: mCurAlign = AlignJustify
        End Select
        
        pFramework.InvalidateUICommand IDC_ALIGNLEFT, UI_INVALIDATIONS_VALUE, vbNullPtr
        pFramework.InvalidateUICommand IDC_ALIGNCENTER, UI_INVALIDATIONS_VALUE, vbNullPtr
        pFramework.InvalidateUICommand IDC_ALIGNRIGHT, UI_INVALIDATIONS_VALUE, vbNullPtr
        pFramework.InvalidateUICommand IDC_JUSTIFY, UI_INVALIDATIONS_VALUE, vbNullPtr
    End Sub
    
    [Description("Sets the paragraph alignment of the RichEdit control's current selection.")]
    Private Sub SetAlignment()
        Dim tPF As PARAFORMAT2
        tPF.cbSize = LenB(Of PARAFORMAT2)
        tPF.dwMask = PFM_ALIGNMENT
        Select Case mCurAlign
            Case AlignLeft: tPF.wAlignment = PFA_LEFT
            Case AlignCenter: tPF.wAlignment = PFA_CENTER
            Case AlignRight: tPF.wAlignment = PFA_RIGHT
            Case AlignJustify: tPF.wAlignment = PFA_JUSTIFY
        End Select
        SendMessage(hRE, EM_SETPARAFORMAT, 0, tPF)
    End Sub
    
    [Description("Updates the line spacing indicated by the ribbon in reponse to a selchange on the RichEdit control.")]
    Private Sub SyncLineSpacing()
        Dim pf As PARAFORMAT2
        pf.cbSize = LenB(Of PARAFORMAT2)
        pf.dwMask = PFM_LINESPACING
        pf.bLineSpacingRule = tomLineSpaceMultiple
        SendMessage(hRE, EM_GETPARAFORMAT, 0, pf)
        If pf.dyLineSpacing = 20 Then mCurSpacing = LS_1
        If Round(CSng(pf.dyLineSpacing) / 20, 2) = 1.15 Then mCurSpacing = LS_115
        If Round(CSng(pf.dyLineSpacing) / 20, 1) = 1.5 Then mCurSpacing = LS_15
        If pf.dyLineSpacing = 40 Then mCurSpacing = LS_2
        
        pFramework.InvalidateUICommand IDC_LINESPACE1, UI_INVALIDATIONS_VALUE, vbNullPtr
        pFramework.InvalidateUICommand IDC_LINESPACE115, UI_INVALIDATIONS_VALUE, vbNullPtr
        pFramework.InvalidateUICommand IDC_LINESPACE15, UI_INVALIDATIONS_VALUE, vbNullPtr
        pFramework.InvalidateUICommand IDC_LINESPACE2, UI_INVALIDATIONS_VALUE, vbNullPtr
    End Sub
    
    [Description("Increments or decrements the current paragraph indent on the RichEdit control. Note: RichEdit indenting works quite different from here :)")]
    Private Sub AdjustIndent(bOutdent As Boolean)
        If bOutdent Then
            mCurIndent -= mDefTab
            If mCurIndent < 0 Then mCurIndent = 0
        Else
            mCurIndent += mDefTab
        End If
        Dim tPF As PARAFORMAT2
        tPF.cbSize = LenB(Of PARAFORMAT2)
        tPF.dwMask = PFM_STARTINDENT 'Or PFM_OFFSET
        tPF.dxStartIndent = mCurIndent
        SendMessage(hRE, EM_SETPARAFORMAT, 0, tPF)
    End Sub
        
    [Description("Sets the line spacing of the RichEdit control.")]
    Private Sub SetLineSpacing()
        'Use the tom COM interfaces here since it lets us specify a Single for spacing multiple
        Dim pRichOle As IRichEditOle
        Dim pRange As ITextRange
        Dim pRichDoc As ITextDocument
        Dim pPara As ITextPara
        Dim pSel As ITextSelection
        
        SendMessage hRE, EM_GETOLEINTERFACE, 0, pRichOle
        If pRichOle IsNot Nothing Then
            Set pRichDoc = pRichOle
            Set pSel = pRichDoc.Selection
            If pSel IsNot Nothing Then
                Set pRange = pSel
                Set pPara = pRange.Para
                If pPara IsNot Nothing Then
                    Dim fSpace As Single
                    Select Case mCurSpacing
                        Case LS_1: fSpace = 1
                        Case LS_115: fSpace = 1.15
                        Case LS_15: fSpace = 1.5
                        Case LS_2: fSpace = 2
                    End Select
                    pPara.SetLineSpacing tomLineSpaceMultiple, fSpace
                Else
                    LogMsg "Error: Failed to get ITextPara from ITextRange. " & Err.LastHresult
                End If
            Else
                LogMsg "Error: Failed to get ITextSelection from ITextDocument" & Err.LastHresult
            End If
        Else
            LogMsg "Error: Failed to get IRichEditOle from RichEdit control. " & Err.LastDllError
        End If
    End Sub
    
    Private Sub AppendMRU(sFile As String)
        Dim sMRU() As String
        Dim nUsed As Long, lMin As Long
        Dim i As Long, j As Long, k As Long
        Dim bDupe As Boolean, nDupe As Long, bDupePin As Boolean
        Dim sTmp As String, bTmp As Boolean
        nUsed = ReadMRUList(sMRU)
        If nUsed = 0 Then 'No prior entries, we're done 
            SaveSetting App.Title, "MRU", "Recent0", sFile
            Exit Sub
        End If
        
        For k = 0 To UBound(sMRU)
            If Left$(sMRU(k), 1) = "*" Then
                sTmp = Mid$(sMRU(k), 2)
                bTmp = True
            Else
                sTmp = sMRU(k)
                bTmp = False
            End If
            If LCase$(sTmp) = LCase$(sFile) Then
                bDupe = True
                nDupe = k
                bDupePin = bTmp
                Exit For
            End If
        Next
        If bDupe Then 'already exists, just bump to 0
            If nUsed = 1 Then Exit Sub 'it's a dupe but it's the only item; we're done
            If bDupePin Then
                'It's a duplicate and a pinned item, so move it up to zero then write the
                'rest of the items normally
                SaveSetting App.Title, "MRU", "Recent0", sMRU(nDupe)
                j = 1
                For i = 0 To UBound(sMRU)
                    If i <> nDupe Then
                        If sMRU(i) <> "" Then SaveSetting App.Title, "MRU", "Recent" & j, sMRU(i)
                        j += 1
                    End If
                Next
            Else
                'It's a duplicate but not a pinned item; write it to the first slot after the
                'pinned items, then write the remaining items skipping pinned items and the dupe.
                'This and the above work because UpdateCurrentMRU would have already sorted it to
                'put pinned items first
                For i = 0 To nUsed - 1
                    If Left$(sMRU(i), 1) = "*" Then
                        lMin += 1
                    End If
                Next
                SaveSetting App.Title, "MRU", "Recent" & lMin, sMRU(nDupe)
                lMin += 1
                For i = 0 To nUsed - 1
                    If (Left$(sMRU(i), 1) <> "*") And (i <> nDupe) Then
                        SaveSetting App.Title, "MRU", "Recent" & lMin, sMRU(i)
                        lMin += 1
                    End If
                Next
            End If
        Else
            For i = 0 To nUsed - 1
                If Left$(sMRU(i), 1) = "*" Then
                    lMin += 1
                End If
            Next
            If (nUsed = nMRUItems) And (lMin = (nMRUItems - 1)) Then
                'The maximum number of MRU items has been reached and they're all pinned
                'so we can't append any more entries
                Exit Sub
            End If
            'Write new file to first available slot
            SaveSetting App.Title, "MRU", "Recent" & lMin, sFile
            If lMin = (nMRUItems - 1) Then
                'the file was added to the last available slot; no old entries to write
                Exit Sub
            End If
            'Write remaining items up to max slots from the first unpinned 
            For i = lMin To nMRUItems - 2
                If sMRU(i) <> "" Then
                    SaveSetting App.Title, "MRU", "Recent" & i + 1, sMRU(i)
                End If
            Next
        End If
    End Sub

    Private Function ReadMRUList(lpmru As String()) As Long
        Dim i As Long
        ReDim lpmru(nMRUItems - 1)
        For i = 0 To nMRUItems - 1
            lpmru(i) = GetSetting(App.Title, "MRU", "Recent" & i, "")
            If lpmru(i) <> "" Then
                ReadMRUList += 1
            End If
        Next
    End Function
 
    Private Sub UpdateCurrentMRUList()
        'rewrite the current mru list to update pinned status in the registry
        'and move the pinned items to the top
        Dim i As Long, j As Long, k As Long, n As Long
        Dim sPinned() As String
        Dim sUnpinned() As String
        For i = 0 To UBound(mCurMRU)
            If mCurMRU(i) <> "" Then
                If Left$(mCurMRU(i), 1) = "*" Then
                    ReDim Preserve sPinned(j)
                    sPinned(j) = mCurMRU(i)
                    j += 1
                Else
                    ReDim Preserve sUnpinned(k)
                    sUnpinned(k) = mCurMRU(i)
                    k += 1
                End If
            End If
        Next
        If j Then
            For i = 0 To UBound(sPinned)
                SaveSetting App.Title, "MRU", "Recent" & n, sPinned(i)
                Debug.Print "UpdateCurrentMRUList.SavePinned " & "@" & n & " " & sPinned(i)
                n += 1
            Next
        End If
        If k Then
            For i = 0 To UBound(sUnpinned)
                SaveSetting App.Title, "MRU", "Recent" & n, sUnpinned(i)
                Debug.Print "UpdateCurrentMRUList.SaveUnPinned " & "@" & n & " " & sUnpinned(i)
                n += 1
            Next
        End If
    End Sub
    
    Private Sub SwitchRibbonModes(newMode As eRibbonModes)
        Select Case newMode
            Case RibbonModeTextAndColors
                pFramework.SetModes(UI_MAKEAPPMODE(RibbonModeTextAndColors))
                mRibbonMode = RibbonModeTextAndColors
            Case RibbonModeGalleries
                pFramework.SetModes(UI_MAKEAPPMODE(RibbonModeGalleries))
                mRibbonMode = RibbonModeGalleries
            Case RibbonModeBoth
                pFramework.SetModes(UI_MAKEAPPMODE(RibbonModeTextAndColors) Or UI_MAKEAPPMODE(RibbonModeGalleries))
                mRibbonMode = RibbonModeBoth
        End Select
    End Sub
    
    Private Sub OnRibbonCmdExecute(ByVal commandId As Long, ByVal verb As UI_EXECUTIONVERB, ByVal key As LongPtr, currentValue As Variant, ByVal bCurValWasNull As Boolean, ByVal commandExecutionProperties As IUISimplePropertySet, returnValue As Long) Handles pUIApp.OnRibbonCmdExecute
        'On Error GoTo e0
        Dim pos As Long
        Dim pk As PROPERTYKEY
        
        If verb = UI_EXECUTIONVERB_EXECUTE Then
            LogMsg "You clicked: CommandId=" & commandId & " (" & GetCommandIdStr(commandId) & "), Verb=" & verb & ", ValueType=" & VTtoStr(CInt(VarType(currentValue)))
        End If
        
        If key Then
            CopyMemory pk, ByVal key, LenB(Of PROPERTYKEY)
        End If
        
        #If dbg_enablefont Then
        On Error GoTo e1

        pos += 1
        If IsEqualPKEY(pk, UI_PKEY_FontProperties) Then
            'Handle clicks from the Font control
            Dim hr As Long
            Dim vChanges As Variant
            Dim pChanges As IPropertyStore
            If verb = UI_EXECUTIONVERB_EXECUTE Then
                LogMsg "Executing font change..."
                hr = E_POINTER
                pos += 1
                If commandExecutionProperties IsNot Nothing Then
                    commandExecutionProperties.GetValue(UI_PKEY_FontProperties_ChangedProperties, vChanges)
                    hr = Err.LastHresult
                    pos += 1
                    If SUCCEEDED(hr) Then
                        Set pChanges = vChanges
                        pos += 1
                        SetFontValues pChanges
                        pos += 1
                    End If
                End If
            ElseIf verb = UI_EXECUTIONVERB_PREVIEW Then
                hr = E_POINTER
                pos += 10
                If commandExecutionProperties IsNot Nothing Then
                    commandExecutionProperties.GetValue(UI_PKEY_FontProperties_ChangedProperties, vChanges)
                    hr = Err.LastHresult
                    pos += 1
                    If SUCCEEDED(hr) Then
                        Set pChanges = vChanges
                        pos += 1
                        SetFontValues pChanges
                        pos += 1
                    End If
                End If
                
            ElseIf verb = UI_EXECUTIONVERB_CANCELPREVIEW Then
                hr = E_POINTER
                pos += 20
                If bCurValWasNull = False Then
                    hr = S_OK
                    Set pChanges = currentValue
                    SetFontValues pChanges
                End If
            End If
            returnValue = hr
            Exit Sub
        End If
        #End If
        
       On Error GoTo e0
        Dim vNew As Variant
        Dim vbEnabled As Variant
        Dim pm As RenderParam
        mRender.GetRenderParam pm
        
        Select Case commandId
            Case IDC_NEW
                mCurFile = ""
                If hRE <> 0 Then
                    Dim tSTEx As SETTEXTEX
                    tSTEx.flags = ST_UNICODE
                    tSTEx.codepage = CP_UNICODE
                    SendMessage hRE, EM_SETTEXTEX, VarPtr(tSTEx), ByVal StrPtr("")
                End If
            
            Case IDC_OPEN, IDC_OPENFILE
                DoOpen
                
            Case IDC_SAVE
                If mCurFile <> "" Then
                    Dim hrSave As Long = SaveRtf(mCurFile)
                    LogMsg "Save existing file result=" & Hex$(hrSave)
                Else
                    DoSave 1
                End If
            Case IDC_SAVEAS, IDC_RTF
                DoSave 1
            Case IDC_TXT
                DoSave 2
                
            
            Case IDC_SELECT
                Dim lActive As Long = UI_CONTEXTAVAILABILITY_ACTIVE
                UIInitPropertyFromUInt32 UI_PKEY_ContextAvailable, lActive, vNew 'We need a VT_UI4; plain long is VT_I4
                pFramework.SetUICommandProperty(IDC_TABTABLE, UI_PKEY_ContextAvailable, vNew)
                pFramework.SetUICommandProperty(IDC_TOGGLE1, UI_PKEY_BooleanValue, CVar(True))
            Case IDC_UNSELECT
                Dim lInactive As Long = UI_CONTEXTAVAILABILITY_NOTAVAILABLE
                UIInitPropertyFromUInt32 UI_PKEY_ContextAvailable, lInactive, vNew 'We need a VT_UI4; plain long is VT_I4
                pFramework.SetUICommandProperty(IDC_TABTABLE, UI_PKEY_ContextAvailable, vNew)
                pFramework.SetUICommandProperty(IDC_TOGGLE1, UI_PKEY_BooleanValue, CVar(False))
            Case IDC_TOGGLE1
                Dim lToggle As Long
                pFramework.GetUICommandProperty(IDC_TOGGLE1, UI_PKEY_BooleanValue, vbEnabled)
                If CBool(vbEnabled) = True Then 'It's a VT_BOOL: VARIANT_BOOL, the same type VB uses. Convenient!
                    lToggle = UI_CONTEXTAVAILABILITY_ACTIVE
                Else
                    lToggle = UI_CONTEXTAVAILABILITY_NOTAVAILABLE
                End If
                UIInitPropertyFromUInt32 UI_PKEY_ContextAvailable, lToggle, vNew 'We need a VT_UI4; plain long is VT_I4
                pFramework.SetUICommandProperty(IDC_TABTABLE, UI_PKEY_ContextAvailable, vNew)
            
            
            Case IDC_CMD_CONTEXT1
                pFramework.GetUICommandProperty(commandId, UI_PKEY_BooleanValue, vbEnabled)
                If CBool(vbEnabled) = True Then
                    mCtx = CtxFromCmdId(commandId)
                    pFramework.SetUICommandProperty(IDC_CMD_CONTEXT2, UI_PKEY_BooleanValue, CVar(False))
                    pFramework.SetUICommandProperty(IDC_CMD_CONTEXT3, UI_PKEY_BooleanValue, CVar(False))
                    pFramework.SetUICommandProperty(IDC_CMD_CONTEXT4, UI_PKEY_BooleanValue, CVar(False))
                Else
                    mCtx = 0
                End If
            Case IDC_CMD_CONTEXT2
                pFramework.GetUICommandProperty(commandId, UI_PKEY_BooleanValue, vbEnabled)
                If CBool(vbEnabled) = True Then
                    mCtx = CtxFromCmdId(commandId)
                    pFramework.SetUICommandProperty(IDC_CMD_CONTEXT1, UI_PKEY_BooleanValue, CVar(False))
                    pFramework.SetUICommandProperty(IDC_CMD_CONTEXT3, UI_PKEY_BooleanValue, CVar(False))
                    pFramework.SetUICommandProperty(IDC_CMD_CONTEXT4, UI_PKEY_BooleanValue, CVar(False))
                Else
                    mCtx = 0
                End If
            Case IDC_CMD_CONTEXT3
                pFramework.GetUICommandProperty(commandId, UI_PKEY_BooleanValue, vbEnabled)
                If CBool(vbEnabled) = True Then
                    mCtx = CtxFromCmdId(commandId)
                    pFramework.SetUICommandProperty(IDC_CMD_CONTEXT1, UI_PKEY_BooleanValue, CVar(False))
                    pFramework.SetUICommandProperty(IDC_CMD_CONTEXT2, UI_PKEY_BooleanValue, CVar(False))
                    pFramework.SetUICommandProperty(IDC_CMD_CONTEXT4, UI_PKEY_BooleanValue, CVar(False))
                Else
                    mCtx = 0
                End If
            Case IDC_CMD_CONTEXT4
                pFramework.GetUICommandProperty(commandId, UI_PKEY_BooleanValue, vbEnabled)
                If CBool(vbEnabled) = True Then
                    mCtx = CtxFromCmdId(commandId)
                    pFramework.SetUICommandProperty(IDC_CMD_CONTEXT1, UI_PKEY_BooleanValue, CVar(False))
                    pFramework.SetUICommandProperty(IDC_CMD_CONTEXT2, UI_PKEY_BooleanValue, CVar(False))
                    pFramework.SetUICommandProperty(IDC_CMD_CONTEXT3, UI_PKEY_BooleanValue, CVar(False))
                Else
                    mCtx = 0
                End If
                
            Case IDC_COLORTHEME, IDC_COLORSTD, IDC_CLRHILITE
                Dim type As Long
                'If (verb = UI_EXECUTIONVERB_EXECUTE) Or (verb = UI_EXECUTIONVERB_PREVIEW) Then
                If VariantUI4ToI4(currentValue, type) Then
                    Dim clr As Long
                    If type = UI_SWATCHCOLORTYPE_NOCOLOR Then
                        If commandId = IDC_COLORTHEME Then
                            lblNone.Visible = True
                            pbClrTheme.Visible = False
                        ElseIf commandId = IDC_COLORSTD Then
                            lblNone2.Visible = True
                            pbClrStd.Visible = False
                        Else
                            lblNone3.Visible = True
                            pbClrHighlight.Visible = False
                        End If
                    ElseIf type = UI_SWATCHCOLORTYPE_AUTOMATIC Then
                        clr = GetSysColor(COLOR_WINDOWTEXT)
                        If commandId = IDC_COLORTHEME Then
                            lblNone.Visible = False
                            pbClrTheme.BackColor = clr
                            pbClrTheme.Visible = True
                            pbClrTheme.Refresh
                        ElseIf commandId = IDC_COLORSTD Then
                            lblNone2.Visible = False
                            pbClrStd.BackColor = clr
                            pbClrStd.Visible = True
                            pbClrStd.Refresh
                        Else
                            lblNone3.Visible = False
                            pbClrHighlight.BackColor = clr
                            pbClrHighlight.Visible = True
                            pbClrHighlight.Refresh
                        End If
                    ElseIf type = UI_SWATCHCOLORTYPE_RGB Then
                        Dim vClr As Variant
                        If commandExecutionProperties IsNot Nothing Then
                            commandExecutionProperties.GetValue UI_PKEY_Color, vClr
                            If VariantUI4ToI4(vClr, clr) Then
                                If commandId = IDC_COLORTHEME Then
                                    lblNone.Visible = False
                                    pbClrTheme.BackColor = clr
                                    pbClrTheme.Visible = True
                                    pbClrTheme.Refresh
                                ElseIf commandId = IDC_COLORSTD Then
                                    lblNone2.Visible = False
                                    pbClrStd.BackColor = clr
                                    pbClrStd.Visible = True
                                    pbClrStd.Refresh
                                Else
                                    lblNone3.Visible = False
                                    pbClrHighlight.BackColor = clr
                                    pbClrHighlight.Visible = True
                                    pbClrHighlight.Refresh
                                End If
                            Else
                                LogMsg "Error: vClr->clr failed"
                            End If
                        End If
                    End If
                End If

            Case IDC_CMD_INSERTPIC
                If verb = UI_EXECUTIONVERB_EXECUTE Then DoInsertPicture
            
            Case IDC_ALIGNLEFT, IDC_ALIGNCENTER, IDC_ALIGNRIGHT, IDC_JUSTIFY
                If commandId = IDC_ALIGNLEFT Then mCurAlign = AlignLeft
                If commandId = IDC_ALIGNCENTER Then mCurAlign = AlignCenter
                If commandId = IDC_ALIGNRIGHT Then mCurAlign = AlignRight
                If commandId = IDC_JUSTIFY Then mCurAlign = AlignJustify
                SetAlignment
                pFramework.InvalidateUICommand IDC_ALIGNLEFT, UI_INVALIDATIONS_VALUE, vbNullPtr
                pFramework.InvalidateUICommand IDC_ALIGNCENTER, UI_INVALIDATIONS_VALUE, vbNullPtr
                pFramework.InvalidateUICommand IDC_ALIGNRIGHT, UI_INVALIDATIONS_VALUE, vbNullPtr
                pFramework.InvalidateUICommand IDC_JUSTIFY, UI_INVALIDATIONS_VALUE, vbNullPtr
        
            Case IDC_LISTGAL
                If verb = UI_EXECUTIONVERB_EXECUTE Then
                    If bCurValWasNull Then 'The button part rather then the dropdown items was clicked
                        If mCurListFormat = ListNone Then
                            mCurListFormat = ListBullets
                        Else
                            mCurListFormat = ListNone
                        End If
                        SetListType
                        LogMsg "IDC_LISTGAL::UI_EXECUTIONVERB_EXECUTE::bCurValWasNull"
                            
                    ElseIf IsEqualPKEY(pk, UI_PKEY_SelectedItem) Then
                        Dim iSelL As Long
                        UIPropertyToUInt32 UI_PKEY_SelectedItem, currentValue, iSelL

                        LogMsg "IDC_LISTGAL::UI_EXECUTIONVERB_EXECUTE::UI_PKEY_SelectedItem->" & iSelL
                        If iSel < 0 Then
                            If mCurListFormat = ListNone Then
                                mCurListFormat = ListBullets
                            Else
                                mCurListFormat = ListNone
                            End If
                            SetListType
                        Else
                            mCurListFormat = iSelL
                            SetListType
                        End If
                    End If
                End If
                
            Case IDC_LINESPACE1, IDC_LINESPACE115, IDC_LINESPACE15, IDC_LINESPACE2
                If commandId = IDC_LINESPACE1 Then mCurSpacing = LS_1
                If commandId = IDC_LINESPACE115 Then mCurSpacing = LS_115
                If commandId = IDC_LINESPACE15 Then mCurSpacing = LS_15
                If commandId = IDC_LINESPACE2 Then mCurSpacing = LS_2
                SetLineSpacing
                pFramework.InvalidateUICommand IDC_LINESPACE1, UI_INVALIDATIONS_VALUE, vbNullPtr
                pFramework.InvalidateUICommand IDC_LINESPACE115, UI_INVALIDATIONS_VALUE, vbNullPtr
                pFramework.InvalidateUICommand IDC_LINESPACE15, UI_INVALIDATIONS_VALUE, vbNullPtr
                pFramework.InvalidateUICommand IDC_LINESPACE2, UI_INVALIDATIONS_VALUE, vbNullPtr
            
            Case IDC_CMD_INCHES, IDC_CMD_CENTIMETERS, IDC_CMD_POINTS, IDC_CMD_PICAS
                If commandId = IDC_CMD_INCHES Then mCurUnits = UnitsInches
                If commandId = IDC_CMD_CENTIMETERS Then mCurUnits = UnitsCentimeters
                If commandId = IDC_CMD_POINTS Then mCurUnits = UnitsPoints
                If commandId = IDC_CMD_PICAS Then mCurUnits = UnitsPicas
                pFramework.InvalidateUICommand IDC_CMD_INCHES, UI_INVALIDATIONS_VALUE, vbNullPtr
                pFramework.InvalidateUICommand IDC_CMD_CENTIMETERS, UI_INVALIDATIONS_VALUE, vbNullPtr
                pFramework.InvalidateUICommand IDC_CMD_POINTS, UI_INVALIDATIONS_VALUE, vbNullPtr
                pFramework.InvalidateUICommand IDC_CMD_PICAS, UI_INVALIDATIONS_VALUE, vbNullPtr
                
            Case IDC_INDENT
                If verb = UI_EXECUTIONVERB_EXECUTE Then AdjustIndent False
            Case IDC_OUTDENT
                If verb = UI_EXECUTIONVERB_EXECUTE Then AdjustIndent True
                
            Case IDC_CUT
                If verb = UI_EXECUTIONVERB_EXECUTE Then SendMessage hRE, WM_CUT, 0, ByVal 0
                
            Case IDC_COPY
                If verb = UI_EXECUTIONVERB_EXECUTE Then SendMessage hRE, WM_COPY, 0, ByVal 0
                
            Case IDC_PASTE
                If verb = UI_EXECUTIONVERB_EXECUTE Then SendMessage hRE, WM_PASTE, 0, ByVal 0
                
            Case IDC_DELETE
                If verb = UI_EXECUTIONVERB_EXECUTE Then DeleteSelection()
                
            Case IDC_UNDO
                If verb = UI_EXECUTIONVERB_EXECUTE Then
                    SendMessage hRE, EM_UNDO, 0, ByVal 0
                    pFramework.InvalidateUICommand IDC_UNDO, UI_INVALIDATIONS_STATE, UI_PKEY_Enabled
                    pFramework.FlushPendingInvalidations()
                End If
            Case IDC_REDO
                If verb = UI_EXECUTIONVERB_EXECUTE Then
                    SendMessage hRE, EM_REDO, 0, ByVal 0
                    pFramework.InvalidateUICommand IDC_REDO, UI_INVALIDATIONS_STATE, UI_PKEY_Enabled
                    pFramework.FlushPendingInvalidations()
                End If
                
            Case IDC_FIND
                If verb = UI_EXECUTIONVERB_EXECUTE Then DoFind
            Case IDC_REPLACE
                If verb = UI_EXECUTIONVERB_EXECUTE Then DoReplace
                
            Case IDC_SELECTALL
                If verb = UI_EXECUTIONVERB_EXECUTE Then
                    If hRE Then
                        Dim tSelAll As CHARRANGE
                        tSelAll.cpMin = 0: tSelAll.cpMax = -1
                        SendMessage hRE, EM_EXSETSEL, 0, tSelAll
                    End If
                End If
            
            Case IDC_CMD_ZOOM
                If verb = UI_EXECUTIONVERB_EXECUTE Then
                    Dim vspin As Variant
                    pFramework.GetUICommandProperty(IDC_CMD_ZOOM, UI_PKEY_DecimalValue, vspin)
                    If (mSetDefZoom = True) Or (CDec(vspin) <> 2) Then 'ignore initial command 
                        mSetDefZoom = True
                        SetZoom CDec(vspin)
                    End If
                Else
                    Debug.Print "ignored zoom click mSetDefZoom"
                    mSetDefZoom = True 'for some reason on startup Update Properties, UI_PKEY_MinValue, but not any of the others,
                                       'triggers IUICommandHandler::Execute so if we don't ignore this the initial zoom would
                                       'get set to 2%. But above we check if it's not 2 in case this bug isn't present in all 
                                       'Windows versions
                End If
                
            Case IDC_CHECK1
                If mWordWrap Then
                    mWordWrap = False
                Else
                    mWordWrap = True
                End If
                ReCreateRichEdit()
                
            Case IDC_CHECK2
                If mSelBar Then
                    mSelBar = False
                Else
                    mSelBar = True
                End If
                If hRE Then
                    Dim Flags As Long
                    Flags = CLng(SendMessage(hRE, EM_GETOPTIONS, 0, ByVal 0&))
                    If mSelBar = True Then
                        If (Flags And ECO_SELECTIONBAR) = 0 Then Flags = Flags Or ECO_SELECTIONBAR
                    Else
                        If (Flags And ECO_SELECTIONBAR) = ECO_SELECTIONBAR Then Flags = Flags And Not ECO_SELECTIONBAR
                    End If
                    SendMessage hRE, EM_SETOPTIONS, ECOOP_SET, ByVal Flags
                End If
                
            Case IDC_RECENTITEMS
                If bCurValWasNull = False Then
                    Dim nItem As Long
                    Dim pset As IUISimplePropertySet
                    Dim psa As LongPtr
                    Dim parray As LongPtr
                    Dim ct As Long
                    Dim pv As Variant
                    Dim sFile As String
                    nItem = -1
                    If VariantUI4ToI4(currentValue, nItem) Then
                        LogMsg "Clicked Recent Items (MRU) List item " & nItem
                    End If
                    If IsEqualPKEY(pk, UI_PKEY_RecentItems) Then
                        pos = 70
                        Debug.Print "Got RecentItems pkey in cmdExec, valuetype=" & VTtoStr(VarType(currentValue))
                        If VarType(currentValue) = (VT_ARRAY Or VT_UNKNOWN) Then
                            pos += 1
                            CopyMemory parray, ByVal PointerAdd(VarPtr(currentValue), 8), LenB(Of LongPtr)
                            pos += 1
                            SafeArrayCopy ByVal parray, psa
                            pos += 1
                            Dim res As Long = SafeArrayGetUBound(psa, 1, ct)
                            If res = S_OK Then
                                pos += 1
                                Dim i As Long
                                Dim bChanged As Boolean
                                For i = 0 To ct
                                    If SafeArrayGetElement(psa, i, pset) = S_OK Then
                                        If (pset Is Nothing) = False Then
                                            pos += 1
                                            pset.GetValue UI_PKEY_Pinned, pv
                                            pos += 1
                                            If CBool(pv) <> bMRUPinned(i) Then
                                                Debug.Print "ChangePin(" & i & ") to " & CBool(pv)
                                                bChanged = True
                                                If CBool(pv) = True Then
                                                    If Left$(mCurMRU(i), 1) = "*" Then
                                                        Debug.Print "ChangePin mismatch " & mCurMRU(i)
                                                    Else
                                                        mCurMRU(i) = "*" & mCurMRU(i)
                                                    End If
                                                Else
                                                    If Left$(mCurMRU(i), 1) <> "*" Then
                                                        Debug.Print "ChangePin mismatch " & mCurMRU(i)
                                                    Else
                                                        mCurMRU(i) = Mid$(mCurMRU(i), 2)
                                                    End If
                                                End If
                                                bMRUPinned(i) = CBool(pv)
                                            End If
                                            pos += 1
                                        End If
                                    End If
                                Next
                                'Update any pinned status changes 
                                If bChanged Then UpdateCurrentMRUList()
                            End If
                            SafeArrayDestroy psa
                        End If
                    End If
                    If IsEqualPKEY(pk, UI_PKEY_SelectedItem) Then
                        Debug.Print "Got RecentItems.SelectedItem"
                        If nItem <> -1 Then
                            If Len(mCurMRU(nItem)) > 3 Then
                                If Left$(mCurMRU(nItem), 1) = "*" Then
                                    sFile = Mid$(mCurMRU(nItem), 2)
                                    Debug.Print "OpenPinnedItem " & sFile
                                Else
                                    Debug.Print "OpenUnPinnedItem " & mCurMRU(nItem)
                                    sFile = mCurMRU(nItem)
                                End If
                                If PathFileExists(sFile) Then
                                    OpenRtf sFile, If(Right$(sFile, 4) = ".rtf", 1&, 2&)
                                     'Bump opened file to top if applicable
                                    AppendMRU mCurMRU(nItem)
                                End If
                            End If
                         End If
                    End If
                End If
            
            Case IDC_GALMODE
                If mRibbonMode = RibbonModeTextAndColors Then
                    SwitchRibbonModes(RibbonModeGalleries)
                Else
                    SwitchRibbonModes(RibbonModeTextAndColors)
                End If
                
            Case IDC_RIBBONHELP
                ShowHelp
                
            Case IDC_EXIT
                Unload Me

        'SHAPE GALLERY 
            Case IDR_CMD_SHAPES
                Dim nSel As Long
                VariantUI4ToI4 currentValue, nSel
                LogMsg "IDR_CMD_SHAPES set shape=" & nSel
                Select Case verb
                    Case UI_EXECUTIONVERB_PREVIEW
                        pm.eShapeType = nSel
                        mRender.UpdateRenderParam pm
                    Case UI_EXECUTIONVERB_CANCELPREVIEW
                        pm.eShapeType = nSel
                        mRender.UpdateRenderParam pm
                    Case UI_EXECUTIONVERB_EXECUTE
                        If IsEqualPKEY(pk, UI_PKEY_SelectedItem) Then
                            pm.eShapeType = nSel
                            mRender.UpdateRenderParam pm
                        End If
                End Select
                        
            Case IDR_CMD_RED, IDR_CMD_GREEN, IDR_CMD_BLUE
                If verb = UI_EXECUTIONVERB_EXECUTE Then
                    If IsEqualPKEY(pk, UI_PKEY_BooleanValue) Then
                        pm.eShapeColor = (commandId - IDR_CMD_RED) 'Note: IDs must be consecutive for this
                        mRender.UpdateRenderParam pm
                        'pFramework.InvalidateUICommand UI_ALL_COMMANDS, UI_INVALIDATIONS_PROPERTY, UI_PKEY_BooleanValue
                        pFramework.SetUICommandProperty IDR_CMD_RED, UI_PKEY_BooleanValue, IIf(commandId = IDR_CMD_RED, CVar(True), CVar(False))
                        pFramework.SetUICommandProperty IDR_CMD_GREEN, UI_PKEY_BooleanValue, IIf(commandId = IDR_CMD_GREEN, CVar(True), CVar(False))
                        pFramework.SetUICommandProperty IDR_CMD_BLUE, UI_PKEY_BooleanValue, IIf(commandId = IDR_CMD_BLUE, CVar(True), CVar(False))
                    End If
                End If
                    
            Case IDR_CMD_SMALL, IDR_CMD_MEDIUM, IDR_CMD_LARGE
                If verb = UI_EXECUTIONVERB_EXECUTE Then
                    If IsEqualPKEY(pk, UI_PKEY_BooleanValue) Then
                        pm.eShapeSize = (commandId - IDR_CMD_SMALL) 'Note: IDs must be consecutive for this
                        mRender.UpdateRenderParam pm
                        'pFramework.InvalidateUICommand UI_ALL_COMMANDS, UI_INVALIDATIONS_PROPERTY, UI_PKEY_BooleanValue
                        pFramework.SetUICommandProperty IDR_CMD_SMALL, UI_PKEY_BooleanValue, IIf(commandId = IDR_CMD_SMALL, CVar(True), CVar(False))
                        pFramework.SetUICommandProperty IDR_CMD_MEDIUM, UI_PKEY_BooleanValue, IIf(commandId = IDR_CMD_MEDIUM, CVar(True), CVar(False))
                        pFramework.SetUICommandProperty IDR_CMD_LARGE, UI_PKEY_BooleanValue, IIf(commandId = IDR_CMD_LARGE, CVar(True), CVar(False))
                        End If
                End If

            Case IDR_CMD_BORDERSTYLES
                If verb = UI_EXECUTIONVERB_EXECUTE Then
                    If bCurValWasNull Then 'The button part rather then the dropdown items was clicked
                        If pm.eBorderStyle = bsNONE Then
                            pm.eBorderStyle = bsSOLID
                        Else
                            pm.eBorderStyle = bsNONE
                        End If
                        mRender.UpdateRenderParam pm
                        'Update visual state of button 
                        pFramework.InvalidateUICommand IDR_CMD_BORDERSTYLES, UI_INVALIDATIONS_PROPERTY, UI_PKEY_BooleanValue
                        're-enable combo if dash was deselected
                        'pFramework.InvalidateUICommand IDR_CMD_BORDERSIZES, UI_INVALIDATIONS_PROPERTY, UI_PKEY_Enabled
                        pFramework.SetUICommandProperty IDR_CMD_BORDERSIZES, UI_PKEY_Enabled, IIf(pm.eBorderStyle = bsDASH, CVar(False), CVar(True))
                        pFramework.SetUICommandProperty IDR_CMD_BORDERSTYLES, UI_PKEY_BooleanValue, IIf(pm.eBorderStyle <> bsNONE, True, False)
                        pFramework.FlushPendingInvalidations
                    ElseIf IsEqualPKEY(pk, UI_PKEY_SelectedItem) Then
                        Dim iSel As Long
                        VariantUI4ToI4 currentValue, iSel
                        pm.eBorderStyle = iSel
                        mRender.UpdateRenderParam pm
                        'pFramework.InvalidateUICommand IDR_CMD_BORDERSIZES, UI_INVALIDATIONS_PROPERTY, UI_PKEY_Enabled
                        pFramework.SetUICommandProperty IDR_CMD_BORDERSIZES, UI_PKEY_Enabled, IIf(pm.eBorderStyle = bsDASH, CVar(False), CVar(True))
                        pFramework.InvalidateUICommand IDR_CMD_BORDERSTYLES, UI_INVALIDATIONS_PROPERTY, UI_PKEY_BooleanValue
                        pFramework.SetUICommandProperty IDR_CMD_BORDERSTYLES, UI_PKEY_BooleanValue, IIf(pm.eBorderStyle <> bsNONE, True, False)
                        pFramework.FlushPendingInvalidations
                    End If
                End If
        
            Case IDR_CMD_BORDERSIZES
                If verb = UI_EXECUTIONVERB_EXECUTE Then
                    If IsEqualPKEY(pk, UI_PKEY_SelectedItem) Then
                        Dim bsSel As Long
                        VariantUI4ToI4 currentValue, bsSel
                        Select Case bsSel
                            Case 0: pm.uBorderSize = 1
                            Case 1: pm.uBorderSize = 3
                            Case 2: pm.uBorderSize = 5
                            Case UI_COLLECTION_INVALIDINDEX
                                Dim vr As Variant
                                commandExecutionProperties.GetValue UI_PKEY_Label, vr
                                Dim psz As String
                                Dim newSize As Long
                                If VarType(vr) = VT_LPWSTR Then
                                    If VariantLPWSTRtoSTR(vr, psz) Then
                                        If IsNumeric(psz) Then
                                            newSize = CLng(psz)
                                        End If
                                    End If
                                ElseIf VarType(vr) = VT_BSTR Then
                                    psz = CStr(vr)
                                    If IsNumeric(psz) Then
                                        newSize = CLng(psz)
                                    End If
                                End If
                                Debug.Print "newSize=" & newSize
                                If (newSize > 0) AndAlso (newSize < 16) Then
                                    pm.uBorderSize = newSize
                                    mRender.UpdateRenderParam pm
                                    pFramework.InvalidateUICommand(IDR_CMD_BORDERSIZES, UI_INVALIDATIONS_PROPERTY, UI_PKEY_StringValue)
                                    Exit Sub
                                Else
                                    Dim sMsg As String = LoadStringFromRes(hMod, IDS_INVALID_SIZE_MESSAGE)
                                    Dim sTitle As String = LoadStringFromRes(hMod, IDS_INVALID_SIZE_TITLE)
                                    MsgBox sMsg, vbCritical + vbOKOnly, sTitle
                                    Exit Sub
                                End If

                        End Select
                        mRender.UpdateRenderParam pm 'updates for case 0-2
                    End If
                End If
        
            Case IDR_CMD_LAYOUTS
                returnValue = E_FAIL
                If verb = UI_EXECUTIONVERB_EXECUTE Then
                    If IsEqualPKEY(pk, UI_PKEY_SelectedItem) Then
                        mRender.GetRenderParam pm
                        Dim curLayout As Long
                        VariantUI4ToI4 currentValue, curLayout
                        pm.eViewLayout = curLayout
                        mRender.UpdateRenderParam pm
                        returnValue = S_OK
                    End If
                End If
            
            Case IDC_EXITGALMODE
                SwitchRibbonModes(RibbonModeTextAndColors)
                            
            Case Else
                LogMsg "No action currently defined for commandId=" & commandId & "(" & GetCommandIdStr(commandId) & ")"
                'returnValue = E_NOTIMPL    
        End Select
        
        
    Exit Sub
    e0:
        LogMsg "Error in OnRibbonCmdExecute (pos=" & pos & "): " & Err.Number & ", " & Err.Description
        Exit Sub
    e1:
    LogMsg "Error in OnRibbonCmdExecute font block (pos=" & pos & "): " & Err.Number & ", " & Err.Description
    Exit Sub
    End Sub
    
    Private Sub OnRibbonUpdateProperty(ByVal commandId As Long, ByVal key As LongPtr, currentValue As Variant, ByVal bCurValWasNull As Boolean, newValue As Variant, bSetNewValue As Boolean, returnValue As Long) Handles pUIApp.OnRibbonUpdateProperty
    On Error GoTo e0
    Dim pos As Long
    Dim pk As PROPERTYKEY
    Dim i As Long
    Dim pCol As IUICollection
    Dim pm As RenderParam
    Dim dpi As Long = GetDeviceCaps(GetDC(0), LOGPIXELSX)
    Dim lRet As Long
    If key Then
        CopyMemory pk, ByVal key, LenB(Of PROPERTYKEY)
    End If
    
    'All modes
    If (commandId = IDC_UNDO) Then
        If IsEqualPKEY(pk, UI_PKEY_Enabled) Then
            lRet = CLng(SendMessage(hRE, EM_CANUNDO, 0, ByVal 0))
            If lRet Then
                newValue = CVar(True)
            Else
                newValue = CVar(False)
            End If
            bSetNewValue = True
            Exit Sub
        End If
    End If
    If (commandId = IDC_REDO) Then
        If IsEqualPKEY(pk, UI_PKEY_Enabled) Then
            lRet = CLng(SendMessage(hRE, EM_CANREDO, 0, ByVal 0))
            If lRet Then
                newValue = CVar(True)
            Else
                newValue = CVar(False)
            End If
            bSetNewValue = True
            Exit Sub
        End If
    End If
    If (commandId = IDC_DELETE) Then
        If IsEqualPKEY(pk, UI_PKEY_Enabled) Then
            If IsTextSelected() Then
                newValue = CVar(True)
            Else
                newValue = CVar(False)
            End If
            bSetNewValue = True
            Exit Sub
        End If
    End If
    
    'Mode 0
    If (commandId = IDC_ALIGNLEFT) Or (commandId = IDC_ALIGNCENTER) Or (commandId = IDC_ALIGNRIGHT) Or (commandId = IDC_JUSTIFY) Then
 
        If IsEqualPKEY(pk, UI_PKEY_BooleanValue) Then
            If commandId = IDC_ALIGNLEFT Then
                newValue = IIf(mCurAlign = AlignLeft, CVar(True), CVar(False))
            End If
            If commandId = IDC_ALIGNCENTER Then
                newValue = IIf(mCurAlign = AlignCenter, CVar(True), CVar(False))
            End If
            If commandId = IDC_ALIGNRIGHT Then
                newValue = IIf(mCurAlign = AlignRight, CVar(True), CVar(False))
            End If
            If commandId = IDC_JUSTIFY Then
                newValue = IIf(mCurAlign = AlignJustify, CVar(True), CVar(False))
            End If
            bSetNewValue = True
            Exit Sub
        End If
    End If

    If (commandId = IDC_LINESPACE1) Or (commandId = IDC_LINESPACE115) Or (commandId = IDC_LINESPACE115) Or (commandId = IDC_LINESPACE2) Then

        If IsEqualPKEY(pk, UI_PKEY_BooleanValue) Then
            If commandId = IDC_LINESPACE1 Then
                newValue = IIf(mCurSpacing = LS_1, CVar(True), CVar(False))
            End If
            If commandId = IDC_LINESPACE115 Then
                newValue = IIf(mCurSpacing = LS_115, CVar(True), CVar(False))
            End If
            If commandId = IDC_LINESPACE15 Then
                newValue = IIf(mCurSpacing = LS_15, CVar(True), CVar(False))
            End If
            If commandId = IDC_LINESPACE2 Then
                newValue = IIf(mCurSpacing = LS_2, CVar(True), CVar(False))
            End If
            bSetNewValue = True
            Exit Sub
        End If
        
    End If
    
    If (commandId = IDC_CMD_INCHES) Or (commandId = IDC_CMD_CENTIMETERS) Or (commandId = IDC_CMD_POINTS) Or (commandId = IDC_CMD_PICAS) Then
        If IsEqualPKEY(pk, UI_PKEY_BooleanValue) Then
            If commandId = IDC_CMD_INCHES Then
                newValue = IIf(mCurUnits = UnitsInches, CVar(True), CVar(False))
            End If
            If commandId = IDC_CMD_CENTIMETERS Then
                newValue = IIf(mCurUnits = UnitsCentimeters, CVar(True), CVar(False))
            End If
            If commandId = IDC_CMD_POINTS Then
                newValue = IIf(mCurUnits = UnitsPoints, CVar(True), CVar(False))
            End If
            If commandId = IDC_CMD_PICAS Then
                newValue = IIf(mCurUnits = UnitsPicas, CVar(True), CVar(False))
            End If
            bSetNewValue = True
            Exit Sub
        End If
    End If
    
    If commandId = IDC_LISTGAL Then
        If IsEqualPKEY(pk, UI_PKEY_Categories) Then
            'Must return S_FALSE (or E_NOTIMPL) to create a gallery with no categories
            returnValue = S_FALSE
            Exit Sub
        ElseIf IsEqualPKEY(pk, UI_PKEY_ItemsSource) Then
                    
            Set pCol = currentValue
            Dim bdListImageIds(6) As Long
            Dim bdListLabelIds(6) As Long
            
            bdListLabelIds(0) = IDS_LISTNONE: bdListLabelIds(1) = IDS_LISTBULLET: bdListLabelIds(2) = IDS_LISTNUMBERED
            bdListLabelIds(3) = IDS_LISTLOWERCASE: bdListLabelIds(4) = IDS_LISTUPPERCASE
            bdListLabelIds(5) = IDS_LISTROMANLLOWERCASE: bdListLabelIds(6) = IDS_LISTROMANLUPPERCASE
                    
            Debug.Print "ConfigLists, dpi=" & dpi
                    
            If dpi > 120 Then
                bdListImageIds(0) = IDB_LISTNONE_144
                bdListImageIds(1) = IDB_LISTBULLET_144
                bdListImageIds(2) = IDB_LISTNUMBERED_144
                bdListImageIds(3) = IDB_LISTLOWERCASE_144
                bdListImageIds(4) = IDB_LISTUPPERCASE_144
                bdListImageIds(5) = IDB_LISTROMANLOWERCASE_144
                bdListImageIds(6) = IDB_LISTROMANUPPERCASE_144
            ElseIf dpi > 96 Then
                bdListImageIds(0) = IDB_LISTNONE_120
                bdListImageIds(1) = IDB_LISTBULLET_120
                bdListImageIds(2) = IDB_LISTNUMBERED_120
                bdListImageIds(3) = IDB_LISTLOWERCASE_120
                bdListImageIds(4) = IDB_LISTUPPERCASE_120
                bdListImageIds(5) = IDB_LISTROMANLOWERCASE_120
                bdListImageIds(6) = IDB_LISTROMANUPPERCASE_120
            Else
                bdListImageIds(0) = IDB_LISTNONE_96
                bdListImageIds(1) = IDB_LISTBULLET_96
                bdListImageIds(2) = IDB_LISTNUMBERED_96
                bdListImageIds(3) = IDB_LISTLOWERCASE_96
                bdListImageIds(4) = IDB_LISTUPPERCASE_96
                bdListImageIds(5) = IDB_LISTROMANLOWERCASE_96
                bdListImageIds(6) = IDB_LISTROMANUPPERCASE_96
            End If
                    
            For i = 0 To UBound(bdListLabelIds)
                Dim pList As New clsRibbonGalleryItem
                pList.SetImageByResID bdListImageIds(i), hMod
                pList.Label = LoadStringFromRes(hMod, bdListLabelIds(i))
                pList.CategoryID = UI_COLLECTION_INVALIDINDEX
                pCol.Add pList
                Set pList = Nothing
            Next
            Set pCol = Nothing
            
        ElseIf IsEqualPKEY(pk, UI_PKEY_SelectedItem) Then
            InitPropVariantFromUInt32 mCurListFormat, newValue
                    
        ' ElseIf IsEqualPKEY(pk, UI_PKEY_BooleanValue) Then
        '     mRender.GetRenderParam pm
        '     Dim bActive As Boolean = (pm.eBorderStyle <> None)
        '     pFramework.InvalidateUICommand IDR_CMD_BORDERSTYLES, UI_INVALIDATIONS_PROPERTY, UI_PKEY_SelectedItem
        '     newValue = CVar(bActive)
        End If
    End If
    
    If (commandId = IDC_CMD_CONTEXT1) Or (commandId = IDC_CMD_CONTEXT2) Or (commandId = IDC_CMD_CONTEXT3) Or (commandId = IDC_CMD_CONTEXT4) Then
        If IsEqualPKEY(pk, UI_PKEY_BooleanValue) Then
            newValue = IIf(commandId = CmdIdFromCtx(mCtx), CVar(True), CVar(False))
            bSetNewValue = True
        End If
    End If
 
    If (commandId = IDC_CMD_INCHES) Or (commandId = IDC_CMD_CENTIMETERS) Or (commandId = IDC_CMD_POINTS) Or (commandId = IDC_CMD_PICAS) Then
        If IsEqualPKEY(pk, UI_PKEY_BooleanValue) Then
            newValue = IIf(commandId = CmdIdFromUnits(mCurUnits), CVar(True), CVar(False))
            bSetNewValue = True
        End If
    End If
    
    If (commandId = IDC_CUT) Or (commandId = IDC_COPY) Or (commandId = IDC_DELETE) Then
        If IsEqualPKEY(pk, UI_PKEY_Enabled) Then
            newValue = CVar(mEnableCPD)
            bSetNewValue = True
        End If
    End If
    
    'Mode 1
    Select Case commandId
        Case IDR_CMD_SHAPES
            If IsEqualPKEY(pk, UI_PKEY_Categories) Then
                'Must return S_FALSE (or E_NOTIMPL) to create a gallery with no categories 
                returnValue = S_FALSE
                Exit Sub
            ElseIf IsEqualPKEY(pk, UI_PKEY_ItemsSource) Then
                
                Set pCol = currentValue
                Dim ImageIds(3) As Long
                Dim LabelIds(3) As Long
                
                LabelIds(0) = IDS_RECTANGLE: LabelIds(1) = IDS_ELLIPSE: LabelIds(2) = IDS_ROUNDED_RECTANGLE: LabelIds(3) = IDS_DIAMOND
                
                Debug.Print "ConfigShapes, dpi=" & dpi
                
                If dpi > 144 Then
                    ImageIds(0) = IDB_RECTANGLE_192
                    ImageIds(1) = IDB_ELLIPSE_192
                    ImageIds(2) = IDB_ROUNDED_RECTANGLE_192
                    ImageIds(3) = IDB_DIAMOND_192
                ElseIf dpi > 120 Then
                    ImageIds(0) = IDB_RECTANGLE_144
                    ImageIds(1) = IDB_ELLIPSE_144
                    ImageIds(2) = IDB_ROUNDED_RECTANGLE_144
                    ImageIds(3) = IDB_DIAMOND_144
                ElseIf dpi > 96 Then
                    ImageIds(0) = IDB_RECTANGLE_120
                    ImageIds(1) = IDB_ELLIPSE_120
                    ImageIds(2) = IDB_ROUNDED_RECTANGLE_120
                    ImageIds(3) = IDB_DIAMOND_120
                Else
                    ImageIds(0) = IDB_RECTANGLE_96
                    ImageIds(1) = IDB_ELLIPSE_96
                    ImageIds(2) = IDB_ROUNDED_RECTANGLE_96
                    ImageIds(3) = IDB_DIAMOND_96
                End If
                
                For i = 0 To UBound(LabelIds)
                    Dim pItem As New clsRibbonGalleryItem
                    pItem.SetImageByResID ImageIds(i), hMod
                    pItem.Label = LoadStringFromRes(hMod, LabelIds(i))
                    pItem.CategoryID = UI_COLLECTION_INVALIDINDEX
                    pCol.Add pItem
                    Set pItem = Nothing
                Next
                Set pCol = Nothing
                
            ElseIf IsEqualPKEY(pk, UI_PKEY_SelectedItem) Then
                mRender.GetRenderParam pm
                InitPropVariantFromUInt32 pm.eShapeType, newValue
                bSetNewValue = True
                
            End If
        
        Case IDR_CMD_SIZEANDCOLOR
            If IsEqualPKEY(pk, UI_PKEY_Categories) Then
                Set pCol = currentValue
                
                Dim pSize As New clsRibbonGalleryItem
                pSize.CategoryID = 0
                pSize.Label = LoadStringFromRes(hMod, IDS_SIZE_CATEGORY)
                pCol.Add pSize
                Set pSize = Nothing
                
                Dim pColor As New clsRibbonGalleryItem
                pColor.CategoryID = 1
                pColor.Label = LoadStringFromRes(hMod, IDS_COLOR_CATEGORY)
                pCol.Add pColor
                Set pColor = Nothing
                
            ElseIf IsEqualPKEY(pk, UI_PKEY_ItemsSource) Then
                Set pCol = currentValue
                Dim scCmdIds(5) As Long
                Dim scCatIds(5) As Long
                
                scCmdIds(0) = IDR_CMD_SMALL
                scCmdIds(1) = IDR_CMD_MEDIUM
                scCmdIds(2) = IDR_CMD_LARGE
                scCmdIds(3) = IDR_CMD_RED
                scCmdIds(4) = IDR_CMD_GREEN
                scCmdIds(5) = IDR_CMD_BLUE
                
                scCatIds(3) = 1
                scCatIds(4) = 1
                scCatIds(5) = 1
                
                For i = 0 To UBound(scCmdIds)
                    Dim pCommand As New clsRibbonGalleryItem
                    pCommand.CategoryID = scCatIds(i)
                    pCommand.CommandID = scCmdIds(i)
                    pCommand.CommandType = UI_COMMANDTYPE_BOOLEAN
                    pCol.Add pCommand
                    Set pCommand = Nothing
                Next
            End If
        
        Case IDR_CMD_SMALL, IDR_CMD_MEDIUM, IDR_CMD_LARGE, IDR_CMD_RED, IDR_CMD_GREEN, IDR_CMD_BLUE
            If IsEqualPKEY(pk, UI_PKEY_BooleanValue) Then
                mRender.GetRenderParam pm
                newValue = CVar(False)
                If (commandId = IDR_CMD_SMALL) And (pm.eShapeSize = ssSMALL) Then newValue = CVar(True): LogMsg "SetTrue " & GetCommandIdStr(commandId)
                If (commandId = IDR_CMD_MEDIUM) And (pm.eShapeSize = ssMEDIUM) Then newValue = CVar(True): LogMsg "SetTrue " & GetCommandIdStr(commandId)
                If (commandId = IDR_CMD_LARGE) And (pm.eShapeSize = ssLARGE) Then newValue = CVar(True): LogMsg "SetTrue " & GetCommandIdStr(commandId)
                
                If (commandId = IDR_CMD_RED) And (pm.eShapeColor = scRED) Then newValue = CVar(True): LogMsg "SetTrue " & GetCommandIdStr(commandId)
                If (commandId = IDR_CMD_GREEN) And (pm.eShapeColor = scGREEN) Then newValue = CVar(True): LogMsg "SetTrue " & GetCommandIdStr(commandId)
                If (commandId = IDR_CMD_BLUE) And (pm.eShapeColor = scBLUE) Then newValue = CVar(True): LogMsg "SetTrue " & GetCommandIdStr(commandId)
                bSetNewValue = True
                ' If (commandId = pm.eShapeSize + IDR_CMD_SMALL) Or (commandId = pm.eShapeColor + IDR_CMD_RED) Then
                '     newValue = CVar(True)
                ' Else
                '     newValue = CVar(False)
                ' End If
            End If
            
        Case IDR_CMD_BORDERSTYLES
            If IsEqualPKEY(pk, UI_PKEY_Categories) Then
                'Must return S_FALSE (or E_NOTIMPL) to create a gallery with no categories
                returnValue = S_FALSE
                Exit Sub
            ElseIf IsEqualPKEY(pk, UI_PKEY_ItemsSource) Then
                
                Set pCol = currentValue
                Dim bdImageIds(2) As Long
                Dim bdLabelIds(2) As Long
                
                bdLabelIds(0) = IDS_BORDER_NONE
                bdLabelIds(1) = IDS_BORDER_SOLID
                bdLabelIds(2) = IDS_BORDER_DASH
                
                If dpi > 144 Then
                    bdImageIds(0) = IDB_NONE_192
                    bdImageIds(1) = IDB_SOLID_192
                    bdImageIds(2) = IDB_DASH_192
                ElseIf dpi > 120 Then
                    bdImageIds(0) = IDB_NONE_144
                    bdImageIds(1) = IDB_SOLID_144
                    bdImageIds(2) = IDB_DASH_144
                ElseIf dpi > 96 Then
                    bdImageIds(0) = IDB_NONE_120
                    bdImageIds(1) = IDB_SOLID_120
                    bdImageIds(2) = IDB_DASH_120
                Else
                    bdImageIds(0) = IDB_NONE_96
                    bdImageIds(1) = IDB_SOLID_96
                    bdImageIds(2) = IDB_DASH_96
                End If
                
                For i = 0 To UBound(bdImageIds)
                    Dim pBdItem As New clsRibbonGalleryItem
                    pBdItem.SetImageByResID bdImageIds(i), hMod
                    pBdItem.Label = LoadStringFromRes(hMod, bdLabelIds(i))
                    pBdItem.CategoryID = UI_COLLECTION_INVALIDINDEX
                    pCol.Add pBdItem
                    Set pBdItem = Nothing
                Next
                
            ElseIf IsEqualPKEY(pk, UI_PKEY_SelectedItem) Then
                mRender.GetRenderParam pm
                InitPropVariantFromUInt32 pm.eBorderStyle, newValue
                
            ElseIf IsEqualPKEY(pk, UI_PKEY_BooleanValue) Then
                mRender.GetRenderParam pm
                Dim bActive As Boolean = (pm.eBorderStyle <> None)
                pFramework.InvalidateUICommand IDR_CMD_BORDERSTYLES, UI_INVALIDATIONS_PROPERTY, UI_PKEY_SelectedItem
                newValue = CVar(bActive)
            End If
            
        Case IDR_CMD_BORDERSIZES
            If IsEqualPKEY(pk, UI_PKEY_Categories) Then
                'Must return S_FALSE (or E_NOTIMPL) to create a gallery with no categories
                returnValue = S_FALSE
                Exit Sub
            ElseIf IsEqualPKEY(pk, UI_PKEY_ItemsSource) Then
                Set pCol = currentValue
                Dim cbEntries(2) As Long
                
                cbEntries(0) = IDS_BORDERSIZE_1
                cbEntries(1) = IDS_BORDERSIZE_3
                cbEntries(2) = IDS_BORDERSIZE_5
                
                For i = 0 To UBound(cbEntries)
                    Dim pEntry As New clsRibbonGalleryItem
                    pEntry.CategoryID = UI_COLLECTION_INVALIDINDEX
                    pEntry.Label = LoadStringFromRes(hMod, cbEntries(i))
                    pCol.Add pEntry
                    Set pEntry = Nothing
                Next
                
            ElseIf IsEqualPKEY(pk, UI_PKEY_StringValue) Then
                mRender.GetRenderParam pm
                InitPropVariantFromString CStr(pm.uBorderSize), newValue
                bSetNewValue = True
                
            ElseIf IsEqualPKEY(pk, UI_PKEY_SelectedItem) Then
                InitPropVariantFromUInt32 0, newValue
                bSetNewValue = True
                
            ElseIf IsEqualPKEY(pk, UI_PKEY_Enabled) Then
                mRender.GetRenderParam pm
                Dim bsEnabled As Boolean = (pm.eBorderStyle <> bsDASH)
                newValue = CVar(bsEnabled)
                bSetNewValue = True
                LogMsg "SetSizeCbxEnabled=" & bsEnabled
                
            ElseIf IsEqualPKEY(pk, UI_PKEY_RepresentativeString) Then
                'For some reason, unlike the C++ version, Windows does not size our comboboxes
                'appropriate. This is an undocumented fix-- only the spinner control is listed
                'as supporting this key,
                Dim szSizeSpacer As String = "2000"
                InitPropVariantFromString szSizeSpacer, newValue
                bSetNewValue = True
            End If
            
        Case IDR_CMD_LAYOUTS
            If IsEqualPKEY(pk, UI_PKEY_Categories) Then
                'Must return S_FALSE (or E_NOTIMPL) to create a gallery with no categories
                returnValue = S_FALSE
                Exit Sub
            ElseIf IsEqualPKEY(pk, UI_PKEY_ItemsSource) Then
                Set pCol = currentValue
                Dim layouts(2) As Long
                
                layouts(0) = IDS_LAYOUT_1
                layouts(1) = IDS_LAYOUT_2
                layouts(2) = IDS_LAYOUT_3
                
                For i = 0 To UBound(layouts)
                    Dim pLayout As New clsRibbonGalleryItem
                    pLayout.CategoryID = UI_COLLECTION_INVALIDINDEX
                    pLayout.Label = LoadStringFromRes(hMod, layouts(i))
                    pCol.Add pLayout
                    Set pLayout = Nothing
                Next
                
            ElseIf IsEqualPKEY(pk, UI_PKEY_SelectedItem) Then
                InitPropVariantFromUInt32 0, newValue
                bSetNewValue = True
                
            ElseIf IsEqualPKEY(pk, UI_PKEY_RepresentativeString) Then
                'For some reason, unlike the C++ version, Windows does not size our comboboxes
                'appropriate. This is an undocumented fix-- only the spinner control is listed
                'as supporting this key,
                Dim szLayoutSpacer As String = "700x700"
                InitPropVariantFromString szLayoutSpacer, newValue
                bSetNewValue = True
                
            End If
            
        Case IDC_CMD_ZOOM
            If IsEqualPKEY(pk, UI_PKEY_RepresentativeString) Then
                Dim szSpinnerSpacer As String = "7000%"
                UIInitPropertyFromString UI_PKEY_RepresentativeString, szSpinnerSpacer, newValue
                bSetNewValue = True
            ElseIf IsEqualPKEY(pk, UI_PKEY_DecimalPlaces) Then
                UIInitPropertyFromUInt32 UI_PKEY_DecimalPlaces, 0, newValue
                bSetNewValue = True
            ElseIf IsEqualPKEY(pk, UI_PKEY_MinValue) Then
                newValue = CDec(2)
                bSetNewValue = True
            ElseIf IsEqualPKEY(pk, UI_PKEY_MaxValue) Then
                newValue = CDec(6400)
                bSetNewValue = True
                Debug.Print "IDC_CMD_ZOOM Set UI_PKEY_MaxValue"
            ElseIf IsEqualPKEY(pk, UI_PKEY_Increment) Then
                newValue = CDec(5)
                bSetNewValue = True
            ElseIf IsEqualPKEY(pk, UI_PKEY_FormatString) Then
                Dim szSpinnerFmt As String = "%"
                UIInitPropertyFromString UI_PKEY_FormatString, szSpinnerFmt, newValue
                bSetNewValue = True
            ElseIf IsEqualPKEY(pk, UI_PKEY_DecimalValue) Then
                newValue = mCurZoom
                bSetNewValue = True
                Debug.Print "IDC_CMD_ZOOM Set UI_PKEY_DecimalValue"
            End If
            
    End Select
    
    
    'We handle RichFont and RecentItems by their unique PROPERTYKEYs
    
    If key Then
        ' CopyMemory pk, ByVal key, LenB(Of PROPERTYKEY)
        pos += 1
        #If dbg_enablefont Then
        If IsEqualPKEY(pk, UI_PKEY_FontProperties) Then
            pos += 1
            If bCurValWasNull = False Then
                Dim pValues As IPropertyStore
                Set pValues = currentValue
                GetFontValues pValues
                pos += 1
                newValue = pValues
                bSetNewValue = True
            Else
                pos += 10
                returnValue = E_POINTER
            End If
            Exit Sub
        End If
        #End If
        #If dbg_enablemru Then
        If IsEqualPKEY(pk, UI_PKEY_RecentItems) Then
            Debug.Print "Got recent items request"
            pos = 50
            Dim sMRU() As String
            Dim nUsed As Long = ReadMRUList(sMRU)
            If nUsed Then
                ReDim pItems(nUsed - 1)
                Erase bMRUPinned
                Erase mCurMRU
                pos += 1
                'Dim psa As LongPtr = SafeArrayCreateVector(VT_UNKNOWN, 0, nMRUItems)
                Dim bPin As Boolean
                Dim sFile As String

                For i = 0 To UBound(pItems)
                    If Left$(sMRU(i), 1) = "*" Then
                        bPin = True
                        sFile = Mid$(sMRU(i), 2)
                        bMRUPinned(i) = True
                    Else
                        bPin = False
                        sFile = sMRU(i)
                    End If
                    Set pItems(i) = New clsRibbonMRUFile(sFile, , True, , bPin)
                    mCurMRU(i) = sMRU(i)
                    'SafeArrayPutElement psa, i, ByVal ObjPtr(pItems(i))
                Next
                pos += 1
                newValue = pItems
                VariantSetType newValue, VT_ARRAY Or VT_UNKNOWN
                ' 'The SafeArrayCopy functions fills a pointer variable with the address of the new SAFEARRAY.
                ' SafeArrayCopy psa, ByVal PointerAdd(VarPtr(newValue), 8)
                ' SafeArrayDestroy psa
                bSetNewValue = True
                ' Debug.Print "newValue = pItems; vt=" & VTtoStr(VarType(newValue))
            End If
            Exit Sub
        End If
        #End If
        'Debug.Print "Unhandled PKEY: " & dbg_PKEYToString(pk)
    End If
    Exit Sub
    e0:
        LogMsg "Error in OnRibbonUpdateProperty (pos=" & pos & "): " & Err.Number & ", " & Err.Description
    End Sub

    Private Sub OnRibbonUIEventMessage(ByVal EventType As UI_EVENTTYPE, ByVal commandId As Long, ByVal modes As Long, ByVal commandName As String, ByVal parentCommandId As Long, ByVal parentCommandName As String, ByVal selectionIndex As Long, ByVal Location As UI_EVENTLOCATION, returnValue As Long) Handles pUIApp.OnRibbonUIEventMessage
         #If dbg_enableeventing Then
        Debug.Print "OnRibbonUIEventMessage type=" & EventType & ", id=" & commandId & " (" & GetCommandIdStr(commandId) & "), modes=" & modes & ", parentCommandId=" & parentCommandId & " (" & GetCommandIdStr(parentCommandId) & "), selIdx=" & selectionIndex & ", loc=" & Location
        #End If
    End Sub
    
    Private Sub OnRibbonMinMax(ByVal bMinimized As Boolean) Handles pUIApp.OnRibbonMinMax
        If bMinimized Then
            LogMsg "Ribbon was collapsed."
        Else
            LogMsg "Ribbon was expanded."
        End If
    End Sub
    
    Private Sub OnRibbonShowHide(ByVal bVisible As Boolean) Handles pUIApp.OnRibbonShowHide
        If bVisible Then
            LogMsg "Ribbon was restored to visibility."
        Else
            LogMsg "Ribbon was hidden."
        End If
    End Sub
    
    [Description("Retrieves the ID of the context popup map associated with the given button that activates it.")]
    Private Function CtxFromCmdId(cmdId As Long) As Long
        Select Case cmdId
            Case IDC_CMD_CONTEXT1: Return IDC_CMD_CONTEXTMAP1
            Case IDC_CMD_CONTEXT2: Return IDC_CMD_CONTEXTMAP2
            Case IDC_CMD_CONTEXT3: Return IDC_CMD_CONTEXTMAP3
            Case IDC_CMD_CONTEXT4: Return IDC_CMD_CONTEXTMAP4
        End Select
    End Function
    [Description("Retrieves the ID of the command button associated with the given context map.")]
    Private Function CmdIdFromCtx(cmdId As Long) As Long
        Select Case cmdId
            Case IDC_CMD_CONTEXTMAP1: Return IDC_CMD_CONTEXT1
            Case IDC_CMD_CONTEXTMAP2: Return IDC_CMD_CONTEXT2
            Case IDC_CMD_CONTEXTMAP3: Return IDC_CMD_CONTEXT3
            Case IDC_CMD_CONTEXTMAP4: Return IDC_CMD_CONTEXT4
        End Select
    End Function
    [Description("Retrieves the ID of the command button associated with the given context map.")]
    Private Function CmdIdFromUnits(cmdId As Long) As Long
        Select Case mCurUnits
            Case UnitsInches: Return IDC_CMD_INCHES
            Case UnitsCentimeters: Return IDC_CMD_CENTIMETERS
            Case UnitsPoints: Return IDC_CMD_POINTS
            Case UnitsPicas: Return IDC_CMD_PICAS
        End Select
    End Function
#Region "Helpers"
    'Note: Some helpers from previous demos were in the SDK and now implemented in WinDevLib instead.
    
    [Description("Converts a Variant/PROPVARIANT of unsupported unsigned long to a VB Long (VT_I4) as-is. Returns False if Variant has a null pointer or is not VT_UI4.")]
    Private Function VariantUI4ToI4(pvar As Variant, pOut As Long) As Boolean
        'Handle unsigned long
        Dim vt As Integer
        If VarPtr(pvar) <> 0 Then
            CopyMemory vt, ByVal VarPtr(pvar), 2
            If (vt = VT_UI4) Then
                CopyMemory pOut, ByVal PointerAdd(VarPtr(pvar), 8), 4
                Return True
            End If
        End If
    End Function
    
    [Description("Converts a VARENUM value from VarType() to it's string form.")]
    Private Function VTtoStr([TypeHint(VARENUM)] ByVal lVal As Integer) As String
    Dim sRet As String
    If (lVal And VT_VECTOR) = VT_VECTOR Then
        sRet = sRet & "VT_VECTOR Or "
        lVal = lVal And Not VT_VECTOR
    End If
    If (lVal And VT_ARRAY) = VT_ARRAY Then
         sRet = sRet & "VT_ARRAY Or "
         lVal = lVal And Not VT_ARRAY
    End If
         
    If (lVal And VT_BYREF) = VT_BYREF Then
        sRet = sRet & "VT_BYREF Or "
        lVal = lVal And Not VT_BYREF
    End If

     If (lVal = VT_EMPTY) Then sRet = sRet & "VT_EMPTY"
     If (lVal = VT_NULL) Then sRet = sRet & "VT_NULL"
     If (lVal = VT_I2) Then sRet = sRet & "VT_I2"
     If (lVal = VT_I4) Then sRet = sRet & "VT_I4"
     If (lVal = VT_R4) Then sRet = sRet & "VT_R4"
     If (lVal = VT_R8) Then sRet = sRet & "VT_R8"
     If (lVal = VT_CY) Then sRet = sRet & "VT_CY"
     If (lVal = VT_DATE) Then sRet = sRet & "VT_DATE"
     If (lVal = VT_BSTR) Then sRet = sRet & "VT_BSTR"
     If (lVal = VT_DISPATCH) Then sRet = sRet & "VT_DISPATCH"
     If (lVal = VT_ERROR) Then sRet = sRet & "VT_ERROR"
     If (lVal = VT_BOOL) Then sRet = sRet & "VT_BOOL"
     If (lVal = VT_VARIANT) Then sRet = sRet & "VT_VARIANT"
     If (lVal = VT_UNKNOWN) Then sRet = sRet & "VT_UNKNOWN"
     If (lVal = VT_DECIMAL) Then sRet = sRet & "VT_DECIMAL"
     If (lVal = VT_I1) Then sRet = sRet & "VT_I1"
     If (lVal = VT_UI1) Then sRet = sRet & "VT_UI1"
     If (lVal = VT_UI2) Then sRet = sRet & "VT_UI2"
     If (lVal = VT_UI4) Then sRet = sRet & "VT_UI4"
     If (lVal = VT_I8) Then sRet = sRet & "VT_I8"
     If (lVal = VT_UI8) Then sRet = sRet & "VT_UI8"
     If (lVal = VT_INT) Then sRet = sRet & "VT_INT"
     If (lVal = VT_UINT) Then sRet = sRet & "VT_UINT"
     If (lVal = VT_VOID) Then sRet = sRet & "VT_VOID"
     If (lVal = VT_HRESULT) Then sRet = sRet & "VT_HRESULT"
     If (lVal = VT_PTR) Then sRet = sRet & "VT_PTR"
     If (lVal = VT_SAFEARRAY) Then sRet = sRet & "VT_SAFEARRAY"
     If (lVal = VT_CARRAY) Then sRet = sRet & "VT_CARRAY"
     If (lVal = VT_USERDEFINED) Then sRet = sRet & "VT_USERDEFINED"
     If (lVal = VT_LPSTR) Then sRet = sRet & "VT_LPSTR"
     If (lVal = VT_LPWSTR) Then sRet = sRet & "VT_LPWSTR"
     If (lVal = VT_RECORD) Then sRet = sRet & "VT_RECORD"
     If (lVal = VT_INT_PTR) Then sRet = sRet & "VT_INT_PTR"
     If (lVal = VT_UINT_PTR) Then sRet = sRet & "VT_UINT_PTR"
     If (lVal = VT_FILETIME) Then sRet = sRet & "VT_FILETIME"
     If (lVal = VT_BLOB) Then sRet = sRet & "VT_BLOB"
     If (lVal = VT_STREAM) Then sRet = sRet & "VT_STREAM"
     If (lVal = VT_STORAGE) Then sRet = sRet & "VT_STORAGE"
     If (lVal = VT_STREAMED_OBJECT) Then sRet = sRet & "VT_STREAMED_OBJECT"
     If (lVal = VT_STORED_OBJECT) Then sRet = sRet & "VT_STORED_OBJECT"
     If (lVal = VT_BLOB_OBJECT) Then sRet = sRet & "VT_BLOB_OBJECT"
     If (lVal = VT_CF) Then sRet = sRet & "VT_CF"
     If (lVal = VT_CLSID) Then sRet = sRet & "VT_CLSID"
     If (lVal = VT_STREAMED_PROPSET) Then sRet = sRet & "VT_STREAMED_PROPSET"
     If (lVal = VT_STORED_PROPSET) Then sRet = sRet & "VT_STORED_PROPSET"
     If (lVal = VT_BLOB_PROPSET) Then sRet = sRet & "VT_BLOB_PROPSET"
     If (lVal = VT_VERBOSE_ENUM) Then sRet = sRet & "VT_VERBOSE_ENUM"
     If (lVal = VT_BSTR_BLOB) Then sRet = sRet & "VT_BSTR_BLOB"
    If sRet = "" Then
         sRet = "(unknown)"
    End If
    VTtoStr = sRet
    End Function
    Public Function GetFindReplaceFlagsStr(lVal As Long) As String
    
    Dim sRet As String
    If (lVal And FR_DOWN) = FR_DOWN Then sRet = sRet & "FR_DOWN Or "
    If (lVal And FR_WHOLEWORD) = FR_WHOLEWORD Then sRet = sRet & "FR_WHOLEWORD Or "
    If (lVal And FR_MATCHCASE) = FR_MATCHCASE Then sRet = sRet & "FR_MATCHCASE Or "
    If (lVal And FR_FINDNEXT) = FR_FINDNEXT Then sRet = sRet & "FR_FINDNEXT Or "
    If (lVal And FR_REPLACE) = FR_REPLACE Then sRet = sRet & "FR_REPLACE Or "
    If (lVal And FR_REPLACEALL) = FR_REPLACEALL Then sRet = sRet & "FR_REPLACEALL Or "
    If (lVal And FR_DIALOGTERM) = FR_DIALOGTERM Then sRet = sRet & "FR_DIALOGTERM Or "
    If (lVal And FR_SHOWHELP) = FR_SHOWHELP Then sRet = sRet & "FR_SHOWHELP Or "
    If (lVal And FR_ENABLEHOOK) = FR_ENABLEHOOK Then sRet = sRet & "FR_ENABLEHOOK Or "
    If (lVal And FR_ENABLETEMPLATE) = FR_ENABLETEMPLATE Then sRet = sRet & "FR_ENABLETEMPLATE Or "
    If (lVal And FR_NOUPDOWN) = FR_NOUPDOWN Then sRet = sRet & "FR_NOUPDOWN Or "
    If (lVal And FR_NOMATCHCASE) = FR_NOMATCHCASE Then sRet = sRet & "FR_NOMATCHCASE Or "
    If (lVal And FR_NOWHOLEWORD) = FR_NOWHOLEWORD Then sRet = sRet & "FR_NOWHOLEWORD Or "
    If (lVal And FR_ENABLETEMPLATEHANDLE) = FR_ENABLETEMPLATEHANDLE Then sRet = sRet & "FR_ENABLETEMPLATEHANDLE Or "
    If (lVal And FR_HIDEUPDOWN) = FR_HIDEUPDOWN Then sRet = sRet & "FR_HIDEUPDOWN Or "
    If (lVal And FR_HIDEMATCHCASE) = FR_HIDEMATCHCASE Then sRet = sRet & "FR_HIDEMATCHCASE Or "
    If (lVal And FR_HIDEWHOLEWORD) = FR_HIDEWHOLEWORD Then sRet = sRet & "FR_HIDEWHOLEWORD Or "
    If (lVal And FR_RAW) = FR_RAW Then sRet = sRet & "FR_RAW Or "
    If (lVal And FR_MATCHDIAC) = FR_MATCHDIAC Then sRet = sRet & "FR_MATCHDIAC Or "
    If (lVal And FR_MATCHKASHIDA) = FR_MATCHKASHIDA Then sRet = sRet & "FR_MATCHKASHIDA Or "
    If (lVal And FR_MATCHALEFHAMZA) = FR_MATCHALEFHAMZA Then sRet = sRet & "FR_MATCHALEFHAMZA Or "
   If sRet = "" Then sRet = "(unknown)"
   GetFindReplaceFlagsStr = sRet
   End Function
    
    Private Function GetCommandIdStr(lVal As Long) As String
    Dim sRet As String
    If lVal = cmdApplicationMenu Then sRet = "cmdApplicationMenu"
    If lVal = IDC_TABMAIN Then sRet = "IDC_TABMAIN"
    If lVal = IDC_TABMAIN_LabelTitle_RESID Then sRet = "IDC_TABMAIN_LabelTitle_RESID"
    If lVal = cmdGroupMain Then sRet = "cmdGroupMain"
    If lVal = cmdGroupMain_LabelTitle_RESID Then sRet = "cmdGroupMain_LabelTitle_RESID"
    If lVal = cmdGroupMain_SmallImages_RESID Then sRet = "cmdGroupMain_SmallImages_RESID"
    If lVal = cmdGroupMain_SmallImages_120__RESID Then sRet = "cmdGroupMain_SmallImages_120__RESID"
    If lVal = cmdGroupMain_SmallImages_144__RESID Then sRet = "cmdGroupMain_SmallImages_144__RESID"
    If lVal = cmdGroupMain_SmallImages_192__RESID Then sRet = "cmdGroupMain_SmallImages_192__RESID"
    If lVal = IDC_TABTABLE Then sRet = "IDC_TABTABLE"
    If lVal = IDC_TABTABLE_LabelTitle_RESID Then sRet = "IDC_TABTABLE_LabelTitle_RESID"
    If lVal = IDC_TABDESIGN Then sRet = "IDC_TABDESIGN"
    If lVal = IDC_TABDESIGN_LabelTitle_RESID Then sRet = "IDC_TABDESIGN_LabelTitle_RESID"
    If lVal = IDC_TABLAYOUT Then sRet = "IDC_TABLAYOUT"
    If lVal = IDC_TABLAYOUT_LabelTitle_RESID Then sRet = "IDC_TABLAYOUT_LabelTitle_RESID"
    If lVal = cmdGroupDesign Then sRet = "cmdGroupDesign"
    If lVal = cmdGroupDesign_LabelTitle_RESID Then sRet = "cmdGroupDesign_LabelTitle_RESID"
    If lVal = cmdGroupLayout Then sRet = "cmdGroupLayout"
    If lVal = cmdGroupLayout_LabelTitle_RESID Then sRet = "cmdGroupLayout_LabelTitle_RESID"
    If lVal = IDC_SELECT Then sRet = "IDC_SELECT"
    ' If lVal = IDC_SELECT_LabelTitle_RESID Then sRet = "IDC_SELECT_LabelTitle_RESID" 'bug: id not unique, doesn't interfere with
                                                                                      'ribbon but does with this function
    If lVal = IDC_SELECT_LabelDescription_RESID Then sRet = "IDC_SELECT_LabelDescription_RESID"
    If lVal = IDC_SELECT_TooltipTitle_RESID Then sRet = "IDC_SELECT_TooltipTitle_RESID"
    If lVal = IDC_SELECT_TooltipDescription_RESID Then sRet = "IDC_SELECT_TooltipDescription_RESID"
    If lVal = IDC_SELECT_LargeImages_RESID Then sRet = "IDC_SELECT_LargeImages_RESID"
    If lVal = IDC_UNSELECT Then sRet = "IDC_UNSELECT"
    If lVal = IDC_UNSELECT_LabelTitle_RESID Then sRet = "IDC_UNSELECT_LabelTitle_RESID"
    If lVal = IDC_UNSELECT_LabelDescription_RESID Then sRet = "IDC_UNSELECT_LabelDescription_RESID"
    If lVal = IDC_UNSELECT_TooltipTitle_RESID Then sRet = "IDC_UNSELECT_TooltipTitle_RESID"
    If lVal = IDC_UNSELECT_TooltipDescription_RESID Then sRet = "IDC_UNSELECT_TooltipDescription_RESID"
    If lVal = IDC_UNSELECT_LargeImages_RESID Then sRet = "IDC_UNSELECT_LargeImages_RESID"
    If lVal = IDC_DESIGN1 Then sRet = "IDC_DESIGN1"
    If lVal = IDC_DESIGN1_LabelTitle_RESID Then sRet = "IDC_DESIGN1_LabelTitle_RESID"
    If lVal = IDC_DESIGN1_LargeImages_RESID Then sRet = "IDC_DESIGN1_LargeImages_RESID"
    If lVal = IDC_DESIGN2 Then sRet = "IDC_DESIGN2"
    If lVal = IDC_DESIGN2_LabelTitle_RESID Then sRet = "IDC_DESIGN2_LabelTitle_RESID"
    If lVal = IDC_DESIGN2_LargeImages_RESID Then sRet = "IDC_DESIGN2_LargeImages_RESID"
    If lVal = IDC_DESIGN3 Then sRet = "IDC_DESIGN3"
    If lVal = IDC_DESIGN3_LabelTitle_RESID Then sRet = "IDC_DESIGN3_LabelTitle_RESID"
    If lVal = IDC_DESIGN3_LargeImages_RESID Then sRet = "IDC_DESIGN3_LargeImages_RESID"
    If lVal = IDC_LAYOUT1 Then sRet = "IDC_LAYOUT1"
    If lVal = IDC_LAYOUT1_LabelTitle_RESID Then sRet = "IDC_LAYOUT1_LabelTitle_RESID"
    If lVal = IDC_LAYOUT1_LargeImages_RESID Then sRet = "IDC_LAYOUT1_LargeImages_RESID"
    If lVal = IDC_LAYOUT2 Then sRet = "IDC_LAYOUT2"
    If lVal = IDC_LAYOUT2_LabelTitle_RESID Then sRet = "IDC_LAYOUT2_LabelTitle_RESID"
    If lVal = IDC_LAYOUT2_LargeImages_RESID Then sRet = "IDC_LAYOUT2_LargeImages_RESID"
    If lVal = IDC_TABVIEW Then sRet = "IDC_TABVIEW"
    If lVal = IDC_TABVIEW_LabelTitle_RESID Then sRet = "IDC_TABVIEW_LabelTitle_RESID"
    If lVal = IDC_FIND Then sRet = "IDC_FIND"
    If lVal = IDC_REPLACE Then sRet = "IDC_REPLACE"
    If lVal = IDC_SELECTALL Then sRet = "IDC_SELECTALL"
    If lVal = cmdButtonsGroup Then sRet = "cmdButtonsGroup"
    If lVal = cmdButtonsGroup_LabelTitle_RESID Then sRet = "cmdButtonsGroup_LabelTitle_RESID"
    If lVal = cmdDropDownColorPickerGroup Then sRet = "cmdDropDownColorPickerGroup"
    If lVal = cmdDropDownColorPickerGroup_LabelTitle_RESID Then sRet = "cmdDropDownColorPickerGroup_LabelTitle_RESID"
    If lVal = cmdDropDownColorPickerGroup_SmallImages_RESID Then sRet = "cmdDropDownColorPickerGroup_SmallImages_RESID"
    If lVal = cmdDropDownColorPickerGroup_SmallImages_120__RESID Then sRet = "cmdDropDownColorPickerGroup_SmallImages_120__RESID"
    If lVal = cmdDropDownColorPickerGroup_SmallImages_144__RESID Then sRet = "cmdDropDownColorPickerGroup_SmallImages_144__RESID"
    If lVal = cmdDropDownColorPickerGroup_SmallImages_192__RESID Then sRet = "cmdDropDownColorPickerGroup_SmallImages_192__RESID"
    If lVal = IDC_COLORTHEME Then sRet = "IDC_COLORTHEME"
    If lVal = IDC_COLORTHEME_LabelTitle_RESID Then sRet = "IDC_COLORTHEME_LabelTitle_RESID"
    If lVal = IDC_COLORTHEME_LargeImages_RESID Then sRet = "IDC_COLORTHEME_LargeImages_RESID"
    If lVal = IDC_COLORSTD Then sRet = "IDC_COLORSTD"
    If lVal = IDC_COLORSTD_LabelTitle_RESID Then sRet = "IDC_COLORSTD_LabelTitle_RESID"
    If lVal = IDC_COLORSTD_LargeImages_RESID Then sRet = "IDC_COLORSTD_LargeImages_RESID"
    If lVal = IDC_CLRHILITE Then sRet = "IDC_CLRHILITE"
    If lVal = IDC_CLRHILITE_LabelTitle_RESID Then sRet = "IDC_CLRHILITE_LabelTitle_RESID"
    If lVal = IDC_CLRHILITE_LargeImages_RESID Then sRet = "IDC_CLRHILITE_LargeImages_RESID"
    If lVal = IDC_LISTCOLORS Then sRet = "IDC_LISTCOLORS"
    If lVal = IDC_LISTCOLORS_LabelTitle_RESID Then sRet = "IDC_LISTCOLORS_LabelTitle_RESID"
    If lVal = IDC_LISTCOLORS_LargeImages_RESID Then sRet = "IDC_LISTCOLORS_LargeImages_RESID"
    If lVal = IDC_NEW Then sRet = "IDC_NEW"
    If lVal = IDC_NEW_LabelTitle_RESID Then sRet = "IDC_NEW_LabelTitle_RESID"
    If lVal = IDC_NEW_LabelDescription_RESID Then sRet = "IDC_NEW_LabelDescription_RESID"
    If lVal = IDC_NEW_TooltipTitle_RESID Then sRet = "IDC_NEW_TooltipTitle_RESID"
    If lVal = IDC_NEW_TooltipDescription_RESID Then sRet = "IDC_NEW_TooltipDescription_RESID"
    If lVal = IDC_NEW_SmallImages_RESID Then sRet = "IDC_NEW_SmallImages_RESID"
    If lVal = IDC_NEW_LargeImages_RESID Then sRet = "IDC_NEW_LargeImages_RESID"
    If lVal = IDC_OPEN Then sRet = "IDC_OPEN"
    If lVal = IDC_OPEN_LabelTitle_RESID Then sRet = "IDC_OPEN_LabelTitle_RESID"
    If lVal = IDC_OPEN_LabelDescription_RESID Then sRet = "IDC_OPEN_LabelDescription_RESID"
    If lVal = IDC_OPEN_TooltipTitle_RESID Then sRet = "IDC_OPEN_TooltipTitle_RESID"
    If lVal = IDC_OPEN_TooltipDescription_RESID Then sRet = "IDC_OPEN_TooltipDescription_RESID"
    If lVal = IDC_OPEN_SmallImages_RESID Then sRet = "IDC_OPEN_SmallImages_RESID"
    If lVal = IDC_OPEN_LargeImages_RESID Then sRet = "IDC_OPEN_LargeImages_RESID"
    If lVal = IDC_SAVE Then sRet = "IDC_SAVE"
    If lVal = IDC_SAVE_LabelTitle_RESID Then sRet = "IDC_SAVE_LabelTitle_RESID"
    If lVal = IDC_SAVE_LabelDescription_RESID Then sRet = "IDC_SAVE_LabelDescription_RESID"
    If lVal = IDC_SAVE_TooltipTitle_RESID Then sRet = "IDC_SAVE_TooltipTitle_RESID"
    If lVal = IDC_SAVE_TooltipDescription_RESID Then sRet = "IDC_SAVE_TooltipDescription_RESID"
    If lVal = IDC_SAVE_SmallImages_RESID Then sRet = "IDC_SAVE_SmallImages_RESID"
    If lVal = IDC_SAVE_LargeImages_RESID Then sRet = "IDC_SAVE_LargeImages_RESID"
    If lVal = IDC_SAVEAS Then sRet = "IDC_SAVEAS"
    If lVal = IDC_SAVEAS_LabelTitle_RESID Then sRet = "IDC_SAVEAS_LabelTitle_RESID"
    If lVal = IDC_SAVEAS_TooltipDescription_RESID Then sRet = "IDC_SAVEAS_TooltipDescription_RESID"
    If lVal = IDC_SAVEAS_SmallImages_RESID Then sRet = "IDC_SAVEAS_SmallImages_RESID"
    If lVal = IDC_SAVEAS_LargeImages_RESID Then sRet = "IDC_SAVEAS_LargeImages_RESID"
    If lVal = IDC_SAVEASMORE Then sRet = "IDC_SAVEASMORE"
    If lVal = CmdHeaderSave Then sRet = "CmdHeaderSave"
    If lVal = CmdHeaderSave_LabelTitle_RESID Then sRet = "CmdHeaderSave_LabelTitle_RESID"
    If lVal = IDC_RTF Then sRet = "IDC_RTF"
    If lVal = IDC_RTF_LabelTitle_RESID Then sRet = "IDC_RTF_LabelTitle_RESID"
    If lVal = IDC_RTF_LabelDescription_RESID Then sRet = "IDC_RTF_LabelDescription_RESID"
    If lVal = IDC_RTF_SmallImages_RESID Then sRet = "IDC_RTF_SmallImages_RESID"
    If lVal = IDC_RTF_LargeImages_RESID Then sRet = "IDC_RTF_LargeImages_RESID"
    If lVal = IDC_OPENXML Then sRet = "IDC_OPENXML"
    If lVal = IDC_OPENXML_LabelTitle_RESID Then sRet = "IDC_OPENXML_LabelTitle_RESID"
    If lVal = IDC_OPENXML_LabelDescription_RESID Then sRet = "IDC_OPENXML_LabelDescription_RESID"
    If lVal = IDC_OPENXML_SmallImages_RESID Then sRet = "IDC_OPENXML_SmallImages_RESID"
    If lVal = IDC_OPENXML_LargeImages_RESID Then sRet = "IDC_OPENXML_LargeImages_RESID"
    If lVal = IDC_ODF Then sRet = "IDC_ODF"
    If lVal = IDC_ODF_LabelTitle_RESID Then sRet = "IDC_ODF_LabelTitle_RESID"
    If lVal = IDC_ODF_LabelDescription_RESID Then sRet = "IDC_ODF_LabelDescription_RESID"
    If lVal = IDC_ODF_SmallImages_RESID Then sRet = "IDC_ODF_SmallImages_RESID"
    If lVal = IDC_ODF_LargeImages_RESID Then sRet = "IDC_ODF_LargeImages_RESID"
    If lVal = IDC_TXT Then sRet = "IDC_TXT"
    If lVal = IDC_TXT_LabelTitle_RESID Then sRet = "IDC_TXT_LabelTitle_RESID"
    If lVal = IDC_TXT_LabelDescription_RESID Then sRet = "IDC_TXT_LabelDescription_RESID"
    If lVal = IDC_TXT_SmallImages_RESID Then sRet = "IDC_TXT_SmallImages_RESID"
    If lVal = IDC_TXT_LargeImages_RESID Then sRet = "IDC_TXT_LargeImages_RESID"
    If lVal = IDC_FMTOTHER Then sRet = "IDC_FMTOTHER"
    If lVal = IDC_FMTOTHER_LabelTitle_RESID Then sRet = "IDC_FMTOTHER_LabelTitle_RESID"
    If lVal = IDC_FMTOTHER_LabelDescription_RESID Then sRet = "IDC_FMTOTHER_LabelDescription_RESID"
    If lVal = IDC_FMTOTHER_SmallImages_RESID Then sRet = "IDC_FMTOTHER_SmallImages_RESID"
    If lVal = IDC_FMTOTHER_LargeImages_RESID Then sRet = "IDC_FMTOTHER_LargeImages_RESID"
    If lVal = IDC_GALMODE Then sRet = "IDC_GALMODE"
    If lVal = IDC_GALMODE_LabelTitle_RESID Then sRet = "IDC_GALMODE_LabelTitle_RESID"
    If lVal = IDC_GALMODE_LabelDescription_RESID Then sRet = "IDC_GALMODE_LabelDescription_RESID"
    If lVal = IDC_GALMODE_TooltipTitle_RESID Then sRet = "IDC_GALMODE_TooltipTitle_RESID"
    If lVal = IDC_GALMODE_TooltipDescription_RESID Then sRet = "IDC_GALMODE_TooltipDescription_RESID"
    If lVal = IDC_GALMODE_SmallImages_RESID Then sRet = "IDC_GALMODE_SmallImages_RESID"
    If lVal = IDC_GALMODE_SmallImages_120__RESID Then sRet = "IDC_GALMODE_SmallImages_120__RESID"
    If lVal = IDC_GALMODE_SmallImages_144__RESID Then sRet = "IDC_GALMODE_SmallImages_144__RESID"
    If lVal = IDC_GALMODE_SmallImages_192__RESID Then sRet = "IDC_GALMODE_SmallImages_192__RESID"
    If lVal = IDC_GALMODE_LargeImages_RESID Then sRet = "IDC_GALMODE_LargeImages_RESID"
    If lVal = IDC_GALMODE_LargeImages_120__RESID Then sRet = "IDC_GALMODE_LargeImages_120__RESID"
    If lVal = IDC_GALMODE_LargeImages_144__RESID Then sRet = "IDC_GALMODE_LargeImages_144__RESID"
    If lVal = IDC_GALMODE_LargeImages_192__RESID Then sRet = "IDC_GALMODE_LargeImages_192__RESID"
    If lVal = IDC_EXIT Then sRet = "IDC_EXIT"
    If lVal = IDC_EXIT_LabelTitle_RESID Then sRet = "IDC_EXIT_LabelTitle_RESID"
    If lVal = IDC_EXIT_LabelDescription_RESID Then sRet = "IDC_EXIT_LabelDescription_RESID"
    If lVal = IDC_EXIT_TooltipTitle_RESID Then sRet = "IDC_EXIT_TooltipTitle_RESID"
    If lVal = IDC_EXIT_TooltipDescription_RESID Then sRet = "IDC_EXIT_TooltipDescription_RESID"
    If lVal = IDC_EXIT_SmallImages_RESID Then sRet = "IDC_EXIT_SmallImages_RESID"
    If lVal = IDC_EXIT_LargeImages_RESID Then sRet = "IDC_EXIT_LargeImages_RESID"
    If lVal = cmdGroupFileActions Then sRet = "cmdGroupFileActions"
    If lVal = cmdGroupFileActions_LabelTitle_RESID Then sRet = "cmdGroupFileActions_LabelTitle_RESID"
    If lVal = IDC_QAT Then sRet = "IDC_QAT"
    If lVal = IDC_CUSTOMQAT Then sRet = "IDC_CUSTOMQAT"
    If lVal = IDC_RECENTITEMS Then sRet = "IDC_RECENTITEMS"
    If lVal = IDC_RECENTITEMS_LabelTitle_RESID Then sRet = "IDC_RECENTITEMS_LabelTitle_RESID"
    If lVal = cmdGroupRichFont Then sRet = "cmdGroupRichFont"
    If lVal = cmdGroupRichFont_LabelTitle_RESID Then sRet = "cmdGroupRichFont_LabelTitle_RESID"
    If lVal = cmdGroupRichFont_SmallImages_RESID Then sRet = "cmdGroupRichFont_SmallImages_RESID"
    If lVal = cmdGroupRichFont_SmallImages_120__RESID Then sRet = "cmdGroupRichFont_SmallImages_120__RESID"
    If lVal = cmdGroupRichFont_SmallImages_144__RESID Then sRet = "cmdGroupRichFont_SmallImages_144__RESID"
    If lVal = cmdGroupRichFont_SmallImages_192__RESID Then sRet = "cmdGroupRichFont_SmallImages_192__RESID"
    If lVal = IDC_RICHFONT Then sRet = "IDC_RICHFONT"
    If lVal = IDC_RICHFONT_Keytip_RESID Then sRet = "IDC_RICHFONT_Keytip_RESID"
    If lVal = IDC_TOGGLE1 Then sRet = "IDC_TOGGLE1"
    If lVal = IDC_TOGGLE1_LabelTitle_RESID Then sRet = "IDC_TOGGLE1_LabelTitle_RESID"
    If lVal = IDC_TOGGLE1_TooltipTitle_RESID Then sRet = "IDC_TOGGLE1_TooltipTitle_RESID"
    If lVal = IDC_TOGGLE1_TooltipDescription_RESID Then sRet = "IDC_TOGGLE1_TooltipDescription_RESID"
    If lVal = IDC_TOGGLE1_SmallImages_RESID Then sRet = "IDC_TOGGLE1_SmallImages_RESID"
    If lVal = IDC_TOGGLE1_LargeImages_RESID Then sRet = "IDC_TOGGLE1_LargeImages_RESID"
    If lVal = cmdGroupPic Then sRet = "cmdGroupPic"
    If lVal = cmdGroupPic_LabelTitle_RESID Then sRet = "cmdGroupPic_LabelTitle_RESID"
    If lVal = cmdGroupPic_SmallImages_RESID Then sRet = "cmdGroupPic_SmallImages_RESID"
    If lVal = cmdGroupPic_SmallImages_120__RESID Then sRet = "cmdGroupPic_SmallImages_120__RESID"
    If lVal = cmdGroupPic_SmallImages_144__RESID Then sRet = "cmdGroupPic_SmallImages_144__RESID"
    If lVal = cmdGroupPic_SmallImages_192__RESID Then sRet = "cmdGroupPic_SmallImages_192__RESID"
    If lVal = cmdFileMenu Then sRet = "cmdFileMenu"
    If lVal = cmdMRUList Then sRet = "cmdMRUList"
    If lVal = cmdMRUList_LabelTitle_RESID Then sRet = "cmdMRUList_LabelTitle_RESID"
    If lVal = cmdGroup6 Then sRet = "cmdGroup6"
    If lVal = IDC_EDITDROPDOWN Then sRet = "IDC_EDITDROPDOWN"
    If lVal = IDC_EDITDROPDOWN_LabelTitle_RESID Then sRet = "IDC_EDITDROPDOWN_LabelTitle_RESID"
    If lVal = IDC_EDITDROPDOWN_LargeImages_RESID Then sRet = "IDC_EDITDROPDOWN_LargeImages_RESID"
    If lVal = IDC_RIBBONHELP Then sRet = "IDC_RIBBONHELP"
    If lVal = IDC_OPENFILEMORE Then sRet = "IDC_OPENFILEMORE"
    If lVal = IDC_OPENFILE Then sRet = "IDC_OPENFILE"
    If lVal = IDC_OPENFILE_LabelTitle_RESID Then sRet = "IDC_OPENFILE_LabelTitle_RESID"
    If lVal = IDC_OPENFILE_LabelDescription_RESID Then sRet = "IDC_OPENFILE_LabelDescription_RESID"
    If lVal = IDC_OPENFILE_LargeImages_RESID Then sRet = "IDC_OPENFILE_LargeImages_RESID"
    If lVal = IDC_OPENURL Then sRet = "IDC_OPENURL"
    If lVal = IDC_OPENURL_LabelTitle_RESID Then sRet = "IDC_OPENURL_LabelTitle_RESID"
    If lVal = IDC_OPENURL_LabelDescription_RESID Then sRet = "IDC_OPENURL_LabelDescription_RESID"
    If lVal = IDC_OPENURL_LargeImages_RESID Then sRet = "IDC_OPENURL_LargeImages_RESID"
    If lVal = IDC_PRINTMORE Then sRet = "IDC_PRINTMORE"
    If lVal = CmdHeaderPrint Then sRet = "CmdHeaderPrint"
    If lVal = CmdHeaderPrint_LabelTitle_RESID Then sRet = "CmdHeaderPrint_LabelTitle_RESID"
    If lVal = IDC_PRINT Then sRet = "IDC_PRINT"
    If lVal = IDC_PRINT_LabelTitle_RESID Then sRet = "IDC_PRINT_LabelTitle_RESID"
    If lVal = IDC_PRINT_LabelDescription_RESID Then sRet = "IDC_PRINT_LabelDescription_RESID"
    If lVal = IDC_PRINT_LargeImages_RESID Then sRet = "IDC_PRINT_LargeImages_RESID"
    If lVal = IDC_PRINTSETUP Then sRet = "IDC_PRINTSETUP"
    If lVal = IDC_PRINTSETUP_LabelTitle_RESID Then sRet = "IDC_PRINTSETUP_LabelTitle_RESID"
    If lVal = IDC_PRINTSETUP_LabelDescription_RESID Then sRet = "IDC_PRINTSETUP_LabelDescription_RESID"
    If lVal = IDC_PRINTSETUP_LargeImages_RESID Then sRet = "IDC_PRINTSETUP_LargeImages_RESID"
    If lVal = IDC_QUICKPRINT Then sRet = "IDC_QUICKPRINT"
    If lVal = IDC_QUICKPRINT_LabelTitle_RESID Then sRet = "IDC_QUICKPRINT_LabelTitle_RESID"
    If lVal = IDC_QUICKPRINT_LabelDescription_RESID Then sRet = "IDC_QUICKPRINT_LabelDescription_RESID"
    If lVal = IDC_QUICKPRINT_LargeImages_RESID Then sRet = "IDC_QUICKPRINT_LargeImages_RESID"
    If lVal = IDC_PRINTPREVIEW Then sRet = "IDC_PRINTPREVIEW"
    If lVal = IDC_PRINTPREVIEW_LabelTitle_RESID Then sRet = "IDC_PRINTPREVIEW_LabelTitle_RESID"
    If lVal = IDC_PRINTPREVIEW_LabelDescription_RESID Then sRet = "IDC_PRINTPREVIEW_LabelDescription_RESID"
    If lVal = IDC_PRINTPREVIEW_LargeImages_RESID Then sRet = "IDC_PRINTPREVIEW_LargeImages_RESID"
    If lVal = cmdTab1 Then sRet = "cmdTab1"
    If lVal = cmdTab1_LabelTitle_RESID Then sRet = "cmdTab1_LabelTitle_RESID"
    If lVal = cmdGroup1 Then sRet = "cmdGroup1"
    If lVal = cmdGroup1_SmallImages_RESID Then sRet = "cmdGroup1_SmallImages_RESID"
    If lVal = IDC_CMD_CONTEXT1 Then sRet = "IDC_CMD_CONTEXT1"
    If lVal = IDC_CMD_CONTEXT1_LabelTitle_RESID Then sRet = "IDC_CMD_CONTEXT1_LabelTitle_RESID"
    If lVal = IDC_CMD_CONTEXT1_TooltipTitle_RESID Then sRet = "IDC_CMD_CONTEXT1_TooltipTitle_RESID"
    If lVal = IDC_CMD_CONTEXT1_TooltipDescription_RESID Then sRet = "IDC_CMD_CONTEXT1_TooltipDescription_RESID"
    If lVal = IDC_CMD_CONTEXT1_LargeImages_RESID Then sRet = "IDC_CMD_CONTEXT1_LargeImages_RESID"
    If lVal = IDC_CMD_CONTEXT2 Then sRet = "IDC_CMD_CONTEXT2"
    If lVal = IDC_CMD_CONTEXT2_LabelTitle_RESID Then sRet = "IDC_CMD_CONTEXT2_LabelTitle_RESID"
    If lVal = IDC_CMD_CONTEXT2_TooltipTitle_RESID Then sRet = "IDC_CMD_CONTEXT2_TooltipTitle_RESID"
    If lVal = IDC_CMD_CONTEXT2_TooltipDescription_RESID Then sRet = "IDC_CMD_CONTEXT2_TooltipDescription_RESID"
    If lVal = IDC_CMD_CONTEXT2_LargeImages_RESID Then sRet = "IDC_CMD_CONTEXT2_LargeImages_RESID"
    If lVal = IDC_CMD_CONTEXT3 Then sRet = "IDC_CMD_CONTEXT3"
    If lVal = IDC_CMD_CONTEXT3_LabelTitle_RESID Then sRet = "IDC_CMD_CONTEXT3_LabelTitle_RESID"
    If lVal = IDC_CMD_CONTEXT3_TooltipTitle_RESID Then sRet = "IDC_CMD_CONTEXT3_TooltipTitle_RESID"
    If lVal = IDC_CMD_CONTEXT3_TooltipDescription_RESID Then sRet = "IDC_CMD_CONTEXT3_TooltipDescription_RESID"
    If lVal = IDC_CMD_CONTEXT3_LargeImages_RESID Then sRet = "IDC_CMD_CONTEXT3_LargeImages_RESID"
    If lVal = IDC_CMD_CONTEXT4 Then sRet = "IDC_CMD_CONTEXT4"
    If lVal = IDC_CMD_CONTEXT4_LabelTitle_RESID Then sRet = "IDC_CMD_CONTEXT4_LabelTitle_RESID"
    If lVal = IDC_CMD_CONTEXT4_TooltipTitle_RESID Then sRet = "IDC_CMD_CONTEXT4_TooltipTitle_RESID"
    If lVal = IDC_CMD_CONTEXT4_TooltipDescription_RESID Then sRet = "IDC_CMD_CONTEXT4_TooltipDescription_RESID"
    If lVal = IDC_CMD_CONTEXT4_LargeImages_RESID Then sRet = "IDC_CMD_CONTEXT4_LargeImages_RESID"
    If lVal = IDC_CUT Then sRet = "IDC_CUT"
    If lVal = IDC_CUT_LabelTitle_RESID Then sRet = "IDC_CUT_LabelTitle_RESID"
    If lVal = IDC_CUT_TooltipTitle_RESID Then sRet = "IDC_CUT_TooltipTitle_RESID"
    If lVal = IDC_CUT_TooltipDescription_RESID Then sRet = "IDC_CUT_TooltipDescription_RESID"
    If lVal = IDC_CUT_SmallImages_RESID Then sRet = "IDC_CUT_SmallImages_RESID"
    If lVal = IDC_COPY Then sRet = "IDC_COPY"
    If lVal = IDC_COPY_LabelTitle_RESID Then sRet = "IDC_COPY_LabelTitle_RESID"
    If lVal = IDC_COPY_TooltipTitle_RESID Then sRet = "IDC_COPY_TooltipTitle_RESID"
    If lVal = IDC_COPY_TooltipDescription_RESID Then sRet = "IDC_COPY_TooltipDescription_RESID"
    If lVal = IDC_COPY_SmallImages_RESID Then sRet = "IDC_COPY_SmallImages_RESID"
    If lVal = IDC_PASTE Then sRet = "IDC_PASTE"
    If lVal = IDC_PASTE_LabelTitle_RESID Then sRet = "IDC_PASTE_LabelTitle_RESID"
    If lVal = IDC_PASTE_TooltipTitle_RESID Then sRet = "IDC_PASTE_TooltipTitle_RESID"
    If lVal = IDC_PASTE_TooltipDescription_RESID Then sRet = "IDC_PASTE_TooltipDescription_RESID"
    If lVal = IDC_PASTE_SmallImages_RESID Then sRet = "IDC_PASTE_SmallImages_RESID"
    If lVal = IDC_CTXTOGGLE Then sRet = "IDC_CTXTOGGLE"
    If lVal = IDC_CTXTOGGLE_LabelTitle_RESID Then sRet = "IDC_CTXTOGGLE_LabelTitle_RESID"
    If lVal = IDC_CTXTOGGLE_SmallImages_RESID Then sRet = "IDC_CTXTOGGLE_SmallImages_RESID"
    If lVal = IDC_DELETE Then sRet = "IDC_DELETE"
    If lVal = IDC_DELETE_LabelTitle_RESID Then sRet = "IDC_DELETE_LabelTitle_RESID"
    If lVal = IDC_DELETE_LargeImages_RESID Then sRet = "IDC_DELETE_LargeImages_RESID"
    If lVal = IDC_UNDO Then sRet = "IDC_UNDO"
    If lVal = IDC_UNDO_LabelTitle_RESID Then sRet = "IDC_UNDO_LabelTitle_RESID"
    If lVal = IDC_UNDO_SmallImages_RESID Then sRet = "IDC_UNDO_SmallImages_RESID"
    If lVal = IDC_UNDO_SmallImages_120__RESID Then sRet = "IDC_UNDO_SmallImages_120__RESID"
    If lVal = IDC_UNDO_SmallImages_144__RESID Then sRet = "IDC_UNDO_SmallImages_144__RESID"
    If lVal = IDC_UNDO_SmallImages_192__RESID Then sRet = "IDC_UNDO_SmallImages_192__RESID"
    If lVal = IDC_REDO Then sRet = "IDC_REDO"
    If lVal = IDC_REDO_LabelTitle_RESID Then sRet = "IDC_REDO_LabelTitle_RESID"
    If lVal = IDC_REDO_SmallImages_RESID Then sRet = "IDC_REDO_SmallImages_RESID"
    If lVal = IDC_REDO_SmallImages_120__RESID Then sRet = "IDC_REDO_SmallImages_120__RESID"
    If lVal = IDC_REDO_SmallImages_144__RESID Then sRet = "IDC_REDO_SmallImages_144__RESID"
    If lVal = IDC_REDO_SmallImages_192__RESID Then sRet = "IDC_REDO_SmallImages_192__RESID"
    If lVal = IDC_BUTTONS Then sRet = "IDC_BUTTONS"
    If lVal = IDC_BUTTONS_LabelTitle_RESID Then sRet = "IDC_BUTTONS_LabelTitle_RESID"
    If lVal = IDC_BUTTONS_LargeImages_RESID Then sRet = "IDC_BUTTONS_LargeImages_RESID"
    If lVal = IDC_CMD_CONTEXTMAP1 Then sRet = "IDC_CMD_CONTEXTMAP1"
    If lVal = IDC_CMD_CONTEXTMAP2 Then sRet = "IDC_CMD_CONTEXTMAP2"
    If lVal = IDC_CMD_CONTEXTMAP3 Then sRet = "IDC_CMD_CONTEXTMAP3"
    If lVal = IDC_CMD_CONTEXTMAP4 Then sRet = "IDC_CMD_CONTEXTMAP4"
    If lVal = IDC_CHECK1 Then sRet = "IDC_CHECK1"
    If lVal = IDC_CHECK1_LabelTitle_RESID Then sRet = "IDC_CHECK1_LabelTitle_RESID"
    If lVal = IDC_CHECK1_LabelDescription_RESID Then sRet = "IDC_CHECK1_LabelDescription_RESID"
    If lVal = IDC_CHECK1_TooltipTitle_RESID Then sRet = "IDC_CHECK1_TooltipTitle_RESID"
    If lVal = IDC_CHECK1_TooltipDescription_RESID Then sRet = "IDC_CHECK1_TooltipDescription_RESID"
    If lVal = IDC_CHECK2 Then sRet = "IDC_CHECK2"
    If lVal = IDC_CHECK2_LabelTitle_RESID Then sRet = "IDC_CHECK2_LabelTitle_RESID"
    If lVal = IDC_CHECK2_LabelDescription_RESID Then sRet = "IDC_CHECK2_LabelDescription_RESID"
    If lVal = IDC_CHECK2_TooltipTitle_RESID Then sRet = "IDC_CHECK2_TooltipTitle_RESID"
    If lVal = IDC_CHECK2_TooltipDescription_RESID Then sRet = "IDC_CHECK2_TooltipDescription_RESID"
    If lVal = cmdCheckHdr Then sRet = "cmdCheckHdr"
    If lVal = cmdCheckHdr_LabelTitle_RESID Then sRet = "cmdCheckHdr_LabelTitle_RESID"
    If lVal = cmdCheckHdr_TooltipTitle_RESID Then sRet = "cmdCheckHdr_TooltipTitle_RESID"
    If lVal = cmdCheckHdr_TooltipDescription_RESID Then sRet = "cmdCheckHdr_TooltipDescription_RESID"
    If lVal = cmdCheckHdr_SmallImages_RESID Then sRet = "cmdCheckHdr_SmallImages_RESID"
    If lVal = IDC_PARAGRAPH Then sRet = "IDC_PARAGRAPH"
    If lVal = IDC_PARAGRAPH_LabelTitle_RESID Then sRet = "IDC_PARAGRAPH_LabelTitle_RESID"
    If lVal = IDC_PARAGRAPH_SmallImages_RESID Then sRet = "IDC_PARAGRAPH_SmallImages_RESID"
    If lVal = IDC_PARAGRAPH_SmallImages_120__RESID Then sRet = "IDC_PARAGRAPH_SmallImages_120__RESID"
    If lVal = IDC_PARAGRAPH_SmallImages_144__RESID Then sRet = "IDC_PARAGRAPH_SmallImages_144__RESID"
    If lVal = IDC_PARAGRAPH_SmallImages_192__RESID Then sRet = "IDC_PARAGRAPH_SmallImages_192__RESID"
    If lVal = IDC_INDENT Then sRet = "IDC_INDENT"
    If lVal = IDC_INDENT_LabelTitle_RESID Then sRet = "IDC_INDENT_LabelTitle_RESID"
    If lVal = IDC_INDENT_TooltipTitle_RESID Then sRet = "IDC_INDENT_TooltipTitle_RESID"
    If lVal = IDC_INDENT_TooltipDescription_RESID Then sRet = "IDC_INDENT_TooltipDescription_RESID"
    If lVal = IDC_INDENT_SmallImages_RESID Then sRet = "IDC_INDENT_SmallImages_RESID"
    If lVal = IDC_OUTDENT Then sRet = "IDC_OUTDENT"
    If lVal = IDC_OUTDENT_LabelTitle_RESID Then sRet = "IDC_OUTDENT_LabelTitle_RESID"
    If lVal = IDC_OUTDENT_TooltipTitle_RESID Then sRet = "IDC_OUTDENT_TooltipTitle_RESID"
    If lVal = IDC_OUTDENT_TooltipDescription_RESID Then sRet = "IDC_OUTDENT_TooltipDescription_RESID"
    If lVal = IDC_OUTDENT_SmallImages_RESID Then sRet = "IDC_OUTDENT_SmallImages_RESID"
    If lVal = IDC_LISTGAL Then sRet = "IDC_LISTGAL"
    If lVal = IDC_LISTGAL_LabelTitle_RESID Then sRet = "IDC_LISTGAL_LabelTitle_RESID"
    If lVal = IDC_LISTGAL_TooltipTitle_RESID Then sRet = "IDC_LISTGAL_TooltipTitle_RESID"
    If lVal = IDC_LISTGAL_TooltipDescription_RESID Then sRet = "IDC_LISTGAL_TooltipDescription_RESID"
    If lVal = IDC_LISTGAL_SmallImages_RESID Then sRet = "IDC_LISTGAL_SmallImages_RESID"
    If lVal = IDC_LISTGAL_SmallImages_120__RESID Then sRet = "IDC_LISTGAL_SmallImages_120__RESID"
    If lVal = IDC_LISTGAL_SmallImages_144__RESID Then sRet = "IDC_LISTGAL_SmallImages_144__RESID"
    If lVal = IDC_LISTGAL_SmallImages_192__RESID Then sRet = "IDC_LISTGAL_SmallImages_192__RESID"
    If lVal = IDC_LISTGAL_SmallHighContrastImages_RESID Then sRet = "IDC_LISTGAL_SmallHighContrastImages_RESID"
    If lVal = IDC_LINESPACING Then sRet = "IDC_LINESPACING"
    If lVal = IDC_LINESPACING_LabelTitle_RESID Then sRet = "IDC_LINESPACING_LabelTitle_RESID"
    If lVal = IDC_LINESPACING_TooltipTitle_RESID Then sRet = "IDC_LINESPACING_TooltipTitle_RESID"
    If lVal = IDC_LINESPACING_TooltipDescription_RESID Then sRet = "IDC_LINESPACING_TooltipDescription_RESID"
    If lVal = IDC_LINESPACING_SmallImages_RESID Then sRet = "IDC_LINESPACING_SmallImages_RESID"
    If lVal = IDC_LINESPACE1 Then sRet = "IDC_LINESPACE1"
    If lVal = IDC_LINESPACE1_LabelTitle_RESID Then sRet = "IDC_LINESPACE1_LabelTitle_RESID"
    If lVal = IDC_LINESPACE115 Then sRet = "IDC_LINESPACE115"
    If lVal = IDC_LINESPACE115_LabelTitle_RESID Then sRet = "IDC_LINESPACE115_LabelTitle_RESID"
    If lVal = IDC_LINESPACE15 Then sRet = "IDC_LINESPACE15"
    If lVal = IDC_LINESPACE15_LabelTitle_RESID Then sRet = "IDC_LINESPACE15_LabelTitle_RESID"
    If lVal = IDC_LINESPACE2 Then sRet = "IDC_LINESPACE2"
    If lVal = IDC_LINESPACE2_LabelTitle_RESID Then sRet = "IDC_LINESPACE2_LabelTitle_RESID"
    If lVal = IDC_ALIGNLEFT Then sRet = "IDC_ALIGNLEFT"
    If lVal = IDC_ALIGNLEFT_LabelTitle_RESID Then sRet = "IDC_ALIGNLEFT_LabelTitle_RESID"
    If lVal = IDC_ALIGNLEFT_TooltipTitle_RESID Then sRet = "IDC_ALIGNLEFT_TooltipTitle_RESID"
    If lVal = IDC_ALIGNLEFT_TooltipDescription_RESID Then sRet = "IDC_ALIGNLEFT_TooltipDescription_RESID"
    If lVal = IDC_ALIGNLEFT_SmallImages_RESID Then sRet = "IDC_ALIGNLEFT_SmallImages_RESID"
    If lVal = IDC_ALIGNRIGHT Then sRet = "IDC_ALIGNRIGHT"
    If lVal = IDC_ALIGNRIGHT_LabelTitle_RESID Then sRet = "IDC_ALIGNRIGHT_LabelTitle_RESID"
    If lVal = IDC_ALIGNRIGHT_TooltipTitle_RESID Then sRet = "IDC_ALIGNRIGHT_TooltipTitle_RESID"
    If lVal = IDC_ALIGNRIGHT_TooltipDescription_RESID Then sRet = "IDC_ALIGNRIGHT_TooltipDescription_RESID"
    If lVal = IDC_ALIGNRIGHT_SmallImages_RESID Then sRet = "IDC_ALIGNRIGHT_SmallImages_RESID"
    If lVal = IDC_ALIGNCENTER Then sRet = "IDC_ALIGNCENTER"
    If lVal = IDC_ALIGNCENTER_LabelTitle_RESID Then sRet = "IDC_ALIGNCENTER_LabelTitle_RESID"
    If lVal = IDC_ALIGNCENTER_TooltipTitle_RESID Then sRet = "IDC_ALIGNCENTER_TooltipTitle_RESID"
    If lVal = IDC_ALIGNCENTER_TooltipDescription_RESID Then sRet = "IDC_ALIGNCENTER_TooltipDescription_RESID"
    If lVal = IDC_ALIGNCENTER_SmallImages_RESID Then sRet = "IDC_ALIGNCENTER_SmallImages_RESID"
    If lVal = IDC_JUSTIFY Then sRet = "IDC_JUSTIFY"
    If lVal = IDC_JUSTIFY_LabelTitle_RESID Then sRet = "IDC_JUSTIFY_LabelTitle_RESID"
    If lVal = IDC_JUSTIFY_TooltipTitle_RESID Then sRet = "IDC_JUSTIFY_TooltipTitle_RESID"
    If lVal = IDC_JUSTIFY_TooltipDescription_RESID Then sRet = "IDC_JUSTIFY_TooltipDescription_RESID"
    If lVal = IDC_JUSTIFY_SmallImages_RESID Then sRet = "IDC_JUSTIFY_SmallImages_RESID"
    If lVal = IDC_PARAGRAPHEXT Then sRet = "IDC_PARAGRAPHEXT"
    If lVal = IDC_PARAGRAPHEXT_LabelTitle_RESID Then sRet = "IDC_PARAGRAPHEXT_LabelTitle_RESID"
    If lVal = IDC_PARAGRAPHEXT_TooltipTitle_RESID Then sRet = "IDC_PARAGRAPHEXT_TooltipTitle_RESID"
    If lVal = IDC_PARAGRAPHEXT_TooltipDescription_RESID Then sRet = "IDC_PARAGRAPHEXT_TooltipDescription_RESID"
    If lVal = IDC_PARAGRAPHEXT_SmallImages_RESID Then sRet = "IDC_PARAGRAPHEXT_SmallImages_RESID"
    If lVal = IDC_PARAGRAPHEXT_SmallImages_120__RESID Then sRet = "IDC_PARAGRAPHEXT_SmallImages_120__RESID"
    If lVal = IDC_PARAGRAPHEXT_SmallImages_144__RESID Then sRet = "IDC_PARAGRAPHEXT_SmallImages_144__RESID"
    If lVal = IDC_PARAGRAPHEXT_SmallImages_192__RESID Then sRet = "IDC_PARAGRAPHEXT_SmallImages_192__RESID"
    If lVal = cmdMiscGroup Then sRet = "cmdMiscGroup"
    If lVal = cmdMiscGroup_LabelTitle_RESID Then sRet = "cmdMiscGroup_LabelTitle_RESID"
    If lVal = cmdMiscGroup_SmallImages_RESID Then sRet = "cmdMiscGroup_SmallImages_RESID"
    If lVal = cmdMiscGroup_SmallImages_120__RESID Then sRet = "cmdMiscGroup_SmallImages_120__RESID"
    If lVal = cmdMiscGroup_SmallImages_144__RESID Then sRet = "cmdMiscGroup_SmallImages_144__RESID"
    If lVal = cmdMiscGroup_SmallImages_192__RESID Then sRet = "cmdMiscGroup_SmallImages_192__RESID"
    If lVal = IDC_CMD_ZOOM Then sRet = "IDC_CMD_ZOOM"
    If lVal = IDC_CMD_ZOOM_LabelTitle_RESID Then sRet = "IDC_CMD_ZOOM_LabelTitle_RESID"
    If lVal = IDC_CMD_ZOOM_TooltipTitle_RESID Then sRet = "IDC_CMD_ZOOM_TooltipTitle_RESID"
    If lVal = IDC_CMD_ZOOM_TooltipDescription_RESID Then sRet = "IDC_CMD_ZOOM_TooltipDescription_RESID"
    If lVal = IDC_CMD_ZOOM_SmallImages_RESID Then sRet = "IDC_CMD_ZOOM_SmallImages_RESID"
    If lVal = IDC_CMD_ZOOM_SmallImages_120__RESID Then sRet = "IDC_CMD_ZOOM_SmallImages_120__RESID"
    If lVal = IDC_CMD_ZOOM_SmallImages_144__RESID Then sRet = "IDC_CMD_ZOOM_SmallImages_144__RESID"
    If lVal = IDC_CMD_ZOOM_SmallImages_192__RESID Then sRet = "IDC_CMD_ZOOM_SmallImages_192__RESID"
    If lVal = IDC_CMD_MESUNITS Then sRet = "IDC_CMD_MESUNITS"
    If lVal = IDC_CMD_MESUNITS_LabelTitle_RESID Then sRet = "IDC_CMD_MESUNITS_LabelTitle_RESID"
    If lVal = IDC_CMD_MESUNITS_TooltipTitle_RESID Then sRet = "IDC_CMD_MESUNITS_TooltipTitle_RESID"
    If lVal = IDC_CMD_MESUNITS_TooltipDescription_RESID Then sRet = "IDC_CMD_MESUNITS_TooltipDescription_RESID"
    If lVal = IDC_CMD_MESUNITS_SmallImages_RESID Then sRet = "IDC_CMD_MESUNITS_SmallImages_RESID"
    If lVal = IDC_CMD_MESUNITS_SmallImages_120__RESID Then sRet = "IDC_CMD_MESUNITS_SmallImages_120__RESID"
    If lVal = IDC_CMD_MESUNITS_SmallImages_144__RESID Then sRet = "IDC_CMD_MESUNITS_SmallImages_144__RESID"
    If lVal = IDC_CMD_MESUNITS_SmallImages_192__RESID Then sRet = "IDC_CMD_MESUNITS_SmallImages_192__RESID"
    If lVal = IDC_CMD_INCHES Then sRet = "IDC_CMD_INCHES"
    If lVal = IDC_CMD_INCHES_LabelTitle_RESID Then sRet = "IDC_CMD_INCHES_LabelTitle_RESID"
    If lVal = IDC_CMD_CENTIMETERS Then sRet = "IDC_CMD_CENTIMETERS"
    If lVal = IDC_CMD_CENTIMETERS_LabelTitle_RESID Then sRet = "CmdCentimeters_LabelTitle_RESID"
    If lVal = IDC_CMD_POINTS Then sRet = "IDC_CMD_POINTS"
    If lVal = IDC_CMD_POINTS_LabelTitle_RESID Then sRet = "CmdPoints_LabelTitle_RESID"
    If lVal = IDC_CMD_PICAS Then sRet = "IDC_CMD_PICAS"
    If lVal = IDC_CMD_PICAS_LabelTitle_RESID Then sRet = "CmdPicas_LabelTitle_RESID"
    If lVal = IDC_CMD_INSERTPIC Then sRet = "IDC_CMD_INSERTPIC"
    If lVal = IDC_CMD_INSERTPIC_LabelTitle_RESID Then sRet = "IDC_CMD_INSERTPIC_LabelTitle_RESID"
    If lVal = IDC_CMD_INSERTPIC_TooltipTitle_RESID Then sRet = "IDC_CMD_INSERTPIC_TooltipTitle_RESID"
    If lVal = IDC_CMD_INSERTPIC_TooltipDescription_RESID Then sRet = "IDC_CMD_INSERTPIC_TooltipDescription_RESID"
    If lVal = IDC_CMD_INSERTPIC_SmallImages_RESID Then sRet = "IDC_CMD_INSERTPIC_SmallImages_RESID"
    If lVal = IDC_CMD_INSERTPIC_SmallImages_120__RESID Then sRet = "IDC_CMD_INSERTPIC_SmallImages_120__RESID"
    If lVal = IDC_CMD_INSERTPIC_SmallImages_144__RESID Then sRet = "IDC_CMD_INSERTPIC_SmallImages_144__RESID"
    If lVal = IDC_CMD_INSERTPIC_SmallImages_192__RESID Then sRet = "IDC_CMD_INSERTPIC_SmallImages_192__RESID"
    If lVal = IDC_CMD_INSERTPIC_LargeImages_RESID Then sRet = "IDC_CMD_INSERTPIC_LargeImages_RESID"
    If lVal = IDC_CMD_INSERTPIC_LargeImages_120__RESID Then sRet = "IDC_CMD_INSERTPIC_LargeImages_120__RESID"
    If lVal = IDC_CMD_INSERTPIC_LargeImages_144__RESID Then sRet = "IDC_CMD_INSERTPIC_LargeImages_144__RESID"
    If lVal = IDC_CMD_INSERTPIC_LargeImages_192__RESID Then sRet = "IDC_CMD_INSERTPIC_LargeImages_192__RESID"
    If lVal = CmdInsertPictureMore Then sRet = "CmdInsertPictureMore"
    If lVal = IDC_CMD_CHANGEPIC Then sRet = "IDC_CMD_CHANGEPIC"
    If lVal = IDC_CMD_CHANGEPIC_LabelTitle_RESID Then sRet = "IDC_CMD_CHANGEPIC_LabelTitle_RESID"
    If lVal = IDC_CMD_CHANGEPIC_TooltipTitle_RESID Then sRet = "IDC_CMD_CHANGEPIC_TooltipTitle_RESID"
    If lVal = IDC_CMD_CHANGEPIC_TooltipDescription_RESID Then sRet = "IDC_CMD_CHANGEPIC_TooltipDescription_RESID"
    If lVal = IDC_CMD_CHANGEPIC_SmallImages_RESID Then sRet = "IDC_CMD_CHANGEPIC_SmallImages_RESID"
    If lVal = IDC_CMD_CHANGEPIC_SmallImages_120__RESID Then sRet = "IDC_CMD_CHANGEPIC_SmallImages_120__RESID"
    If lVal = IDC_CMD_CHANGEPIC_SmallImages_144__RESID Then sRet = "IDC_CMD_CHANGEPIC_SmallImages_144__RESID"
    If lVal = IDC_CMD_CHANGEPIC_SmallImages_192__RESID Then sRet = "IDC_CMD_CHANGEPIC_SmallImages_192__RESID"
    If lVal = IDC_CMD_RESIZEPIC Then sRet = "IDC_CMD_RESIZEPIC"
    If lVal = IDC_CMD_RESIZEPIC_LabelTitle_RESID Then sRet = "IDC_CMD_RESIZEPIC_LabelTitle_RESID"
    If lVal = IDC_CMD_RESIZEPIC_TooltipTitle_RESID Then sRet = "IDC_CMD_RESIZEPIC_TooltipTitle_RESID"
    If lVal = IDC_CMD_RESIZEPIC_TooltipDescription_RESID Then sRet = "IDC_CMD_RESIZEPIC_TooltipDescription_RESID"
    If lVal = IDC_CMD_RESIZEPIC_SmallImages_RESID Then sRet = "IDC_CMD_RESIZEPIC_SmallImages_RESID"
    If lVal = IDC_CMD_RESIZEPIC_SmallImages_120__RESID Then sRet = "IDC_CMD_RESIZEPIC_SmallImages_120__RESID"
    If lVal = IDC_CMD_RESIZEPIC_SmallImages_144__RESID Then sRet = "IDC_CMD_RESIZEPIC_SmallImages_144__RESID"
    If lVal = IDC_CMD_RESIZEPIC_SmallImages_192__RESID Then sRet = "IDC_CMD_RESIZEPIC_SmallImages_192__RESID"
    If lVal = IDC_MORE Then sRet = "IDC_MORE"
    If lVal = IDC_MORE_LabelTitle_RESID Then sRet = "IDC_MORE_LabelTitle_RESID"
    If lVal = cmdTabGalleries Then sRet = "cmdTabGalleries"
    If lVal = cmdTabGalleries_LabelTitle_RESID Then sRet = "cmdTabGalleries_LabelTitle_RESID"
    If lVal = cmdShapesGroup Then sRet = "cmdShapesGroup"
    If lVal = cmdShapesGroup_LabelTitle_RESID Then sRet = "cmdShapesGroup_LabelTitle_RESID"
    If lVal = cmdShapesGroup_SmallImages_RESID Then sRet = "cmdShapesGroup_SmallImages_RESID"
    If lVal = cmdShapesGroup_SmallImages_120__RESID Then sRet = "cmdShapesGroup_SmallImages_120__RESID"
    If lVal = cmdShapesGroup_SmallImages_144__RESID Then sRet = "cmdShapesGroup_SmallImages_144__RESID"
    If lVal = cmdShapesGroup_SmallImages_192__RESID Then sRet = "cmdShapesGroup_SmallImages_192__RESID"
    If lVal = cmdBorderGroup Then sRet = "cmdBorderGroup"
    If lVal = cmdBorderGroup_LabelTitle_RESID Then sRet = "cmdBorderGroup_LabelTitle_RESID"
    If lVal = cmdBorderGroup_SmallImages_RESID Then sRet = "cmdBorderGroup_SmallImages_RESID"
    If lVal = cmdBorderGroup_SmallImages_120__RESID Then sRet = "cmdBorderGroup_SmallImages_120__RESID"
    If lVal = cmdBorderGroup_SmallImages_144__RESID Then sRet = "cmdBorderGroup_SmallImages_144__RESID"
    If lVal = cmdBorderGroup_SmallImages_192__RESID Then sRet = "cmdBorderGroup_SmallImages_192__RESID"
    If lVal = cmdLayoutGroup Then sRet = "cmdLayoutGroup"
    If lVal = cmdLayoutGroup_LabelTitle_RESID Then sRet = "cmdLayoutGroup_LabelTitle_RESID"
    If lVal = cmdLayoutGroup_SmallImages_RESID Then sRet = "cmdLayoutGroup_SmallImages_RESID"
    If lVal = cmdLayoutGroup_SmallImages_120__RESID Then sRet = "cmdLayoutGroup_SmallImages_120__RESID"
    If lVal = cmdLayoutGroup_SmallImages_144__RESID Then sRet = "cmdLayoutGroup_SmallImages_144__RESID"
    If lVal = cmdLayoutGroup_SmallImages_192__RESID Then sRet = "cmdLayoutGroup_SmallImages_192__RESID"
    If lVal = IDR_CMD_SHAPES Then sRet = "IDR_CMD_SHAPES"
    If lVal = IDR_CMD_SHAPES_LabelTitle_RESID Then sRet = "IDR_CMD_SHAPES_LabelTitle_RESID"
    If lVal = IDR_CMD_SIZEANDCOLOR Then sRet = "IDR_CMD_SIZEANDCOLOR"
    If lVal = IDR_CMD_SIZEANDCOLOR_LabelTitle_RESID Then sRet = "IDR_CMD_SIZEANDCOLOR_LabelTitle_RESID"
    If lVal = IDR_CMD_SIZEANDCOLOR_LargeImages_96__RESID Then sRet = "IDR_CMD_SIZEANDCOLOR_LargeImages_96__RESID"
    If lVal = IDR_CMD_SIZEANDCOLOR_LargeImages_120__RESID Then sRet = "IDR_CMD_SIZEANDCOLOR_LargeImages_120__RESID"
    If lVal = IDR_CMD_SIZEANDCOLOR_LargeImages_144__RESID Then sRet = "IDR_CMD_SIZEANDCOLOR_LargeImages_144__RESID"
    If lVal = IDR_CMD_SIZEANDCOLOR_LargeImages_192__RESID Then sRet = "IDR_CMD_SIZEANDCOLOR_LargeImages_192__RESID"
    If lVal = IDR_CMD_BORDERSTYLES Then sRet = "IDR_CMD_BORDERSTYLES"
    If lVal = IDR_CMD_BORDERSTYLES_LabelTitle_RESID Then sRet = "IDR_CMD_BORDERSTYLES_LabelTitle_RESID"
    If lVal = IDR_CMD_BORDERSTYLES_LargeImages_96__RESID Then sRet = "IDR_CMD_BORDERSTYLES_LargeImages_96__RESID"
    If lVal = IDR_CMD_BORDERSTYLES_LargeImages_120__RESID Then sRet = "IDR_CMD_BORDERSTYLES_LargeImages_120__RESID"
    If lVal = IDR_CMD_BORDERSTYLES_LargeImages_144__RESID Then sRet = "IDR_CMD_BORDERSTYLES_LargeImages_144__RESID"
    If lVal = IDR_CMD_BORDERSTYLES_LargeImages_192__RESID Then sRet = "IDR_CMD_BORDERSTYLES_LargeImages_192__RESID"
    If lVal = IDR_CMD_BORDERSIZES Then sRet = "IDR_CMD_BORDERSIZES"
    If lVal = IDR_CMD_BORDERSIZES_LabelTitle_RESID Then sRet = "IDR_CMD_BORDERSIZES_LabelTitle_RESID"
    If lVal = IDR_CMD_LAYOUTS Then sRet = "IDR_CMD_LAYOUTS"
    If lVal = IDR_CMD_LAYOUTS_LabelTitle_RESID Then sRet = "IDR_CMD_LAYOUTS_LabelTitle_RESID"
    If lVal = IDR_CMD_SMALL Then sRet = "IDR_CMD_SMALL"
    If lVal = IDR_CMD_SMALL_LabelTitle_RESID Then sRet = "IDR_CMD_SMALL_LabelTitle_RESID"
    If lVal = IDR_CMD_SMALL_LargeImages_96__RESID Then sRet = "IDR_CMD_SMALL_LargeImages_96__RESID"
    If lVal = IDR_CMD_SMALL_LargeImages_120__RESID Then sRet = "IDR_CMD_SMALL_LargeImages_120__RESID"
    If lVal = IDR_CMD_SMALL_LargeImages_144__RESID Then sRet = "IDR_CMD_SMALL_LargeImages_144__RESID"
    If lVal = IDR_CMD_SMALL_LargeImages_192__RESID Then sRet = "IDR_CMD_SMALL_LargeImages_192__RESID"
    If lVal = IDR_CMD_MEDIUM Then sRet = "IDR_CMD_MEDIUM"
    If lVal = IDR_CMD_MEDIUM_LabelTitle_RESID Then sRet = "IDR_CMD_MEDIUM_LabelTitle_RESID"
    If lVal = IDR_CMD_MEDIUM_LargeImages_96__RESID Then sRet = "IDR_CMD_MEDIUM_LargeImages_96__RESID"
    If lVal = IDR_CMD_MEDIUM_LargeImages_120__RESID Then sRet = "IDR_CMD_MEDIUM_LargeImages_120__RESID"
    If lVal = IDR_CMD_MEDIUM_LargeImages_144__RESID Then sRet = "IDR_CMD_MEDIUM_LargeImages_144__RESID"
    If lVal = IDR_CMD_MEDIUM_LargeImages_192__RESID Then sRet = "IDR_CMD_MEDIUM_LargeImages_192__RESID"
    If lVal = IDR_CMD_LARGE Then sRet = "IDR_CMD_LARGE"
    If lVal = IDR_CMD_LARGE_LabelTitle_RESID Then sRet = "IDR_CMD_LARGE_LabelTitle_RESID"
    If lVal = IDR_CMD_LARGE_LargeImages_96__RESID Then sRet = "IDR_CMD_LARGE_LargeImages_96__RESID"
    If lVal = IDR_CMD_LARGE_LargeImages_120__RESID Then sRet = "IDR_CMD_LARGE_LargeImages_120__RESID"
    If lVal = IDR_CMD_LARGE_LargeImages_144__RESID Then sRet = "IDR_CMD_LARGE_LargeImages_144__RESID"
    If lVal = IDR_CMD_LARGE_LargeImages_192__RESID Then sRet = "IDR_CMD_LARGE_LargeImages_192__RESID"
    If lVal = IDR_CMD_RED Then sRet = "IDR_CMD_RED"
    If lVal = IDR_CMD_RED_LabelTitle_RESID Then sRet = "IDR_CMD_RED_LabelTitle_RESID"
    If lVal = IDR_CMD_RED_LargeImages_96__RESID Then sRet = "IDR_CMD_RED_LargeImages_96__RESID"
    If lVal = IDR_CMD_RED_LargeImages_120__RESID Then sRet = "IDR_CMD_RED_LargeImages_120__RESID"
    If lVal = IDR_CMD_RED_LargeImages_144__RESID Then sRet = "IDR_CMD_RED_LargeImages_144__RESID"
    If lVal = IDR_CMD_RED_LargeImages_192__RESID Then sRet = "IDR_CMD_RED_LargeImages_192__RESID"
    If lVal = IDR_CMD_GREEN Then sRet = "IDR_CMD_GREEN"
    If lVal = IDR_CMD_GREEN_LabelTitle_RESID Then sRet = "IDR_CMD_GREEN_LabelTitle_RESID"
    If lVal = IDR_CMD_GREEN_LargeImages_96__RESID Then sRet = "IDR_CMD_GREEN_LargeImages_96__RESID"
    If lVal = IDR_CMD_GREEN_LargeImages_120__RESID Then sRet = "IDR_CMD_GREEN_LargeImages_120__RESID"
    If lVal = IDR_CMD_GREEN_LargeImages_144__RESID Then sRet = "IDR_CMD_GREEN_LargeImages_144__RESID"
    If lVal = IDR_CMD_GREEN_LargeImages_192__RESID Then sRet = "IDR_CMD_GREEN_LargeImages_192__RESID"
    If lVal = IDR_CMD_BLUE Then sRet = "IDR_CMD_BLUE"
    If lVal = IDR_CMD_BLUE_LabelTitle_RESID Then sRet = "IDR_CMD_BLUE_LabelTitle_RESID"
    If lVal = IDR_CMD_BLUE_LargeImages_96__RESID Then sRet = "IDR_CMD_BLUE_LargeImages_96__RESID"
    If lVal = IDR_CMD_BLUE_LargeImages_120__RESID Then sRet = "IDR_CMD_BLUE_LargeImages_120__RESID"
    If lVal = IDR_CMD_BLUE_LargeImages_144__RESID Then sRet = "IDR_CMD_BLUE_LargeImages_144__RESID"
    If lVal = IDR_CMD_BLUE_LargeImages_192__RESID Then sRet = "IDR_CMD_BLUE_LargeImages_192__RESID"
    If lVal = IDC_EXITGALMODE Then sRet = "IDC_EXITGALMODE"
    If lVal = IDC_EXITGALMODE_LabelTitle_RESID Then sRet = "IDC_EXITGALMODE_LabelTitle_RESID"
    If lVal = IDC_EXITGALMODE_LabelDescription_RESID Then sRet = "IDC_EXITGALMODE_LabelDescription_RESID"
    If lVal = IDC_EXITGALMODE_TooltipTitle_RESID Then sRet = "IDC_EXITGALMODE_TooltipTitle_RESID"
    If lVal = IDC_EXITGALMODE_TooltipDescription_RESID Then sRet = "IDC_EXITGALMODE_TooltipDescription_RESID"
    If lVal = IDC_EXITGALMODE_SmallImages_RESID Then sRet = "IDC_EXITGALMODE_SmallImages_RESID"
    If lVal = IDC_EXITGALMODE_SmallImages_120__RESID Then sRet = "IDC_EXITGALMODE_SmallImages_120__RESID"
    If lVal = IDC_EXITGALMODE_SmallImages_144__RESID Then sRet = "IDC_EXITGALMODE_SmallImages_144__RESID"
    If lVal = IDC_EXITGALMODE_SmallImages_192__RESID Then sRet = "IDC_EXITGALMODE_SmallImages_192__RESID"
    If lVal = IDC_EXITGALMODE_LargeImages_RESID Then sRet = "IDC_EXITGALMODE_LargeImages_RESID"
    If lVal = IDC_EXITGALMODE_LargeImages_120__RESID Then sRet = "IDC_EXITGALMODE_LargeImages_120__RESID"
    If lVal = IDC_EXITGALMODE_LargeImages_144__RESID Then sRet = "IDC_EXITGALMODE_LargeImages_144__RESID"
    If lVal = IDC_EXITGALMODE_LargeImages_192__RESID Then sRet = "IDC_EXITGALMODE_LargeImages_192__RESID"
    If lVal = IDS_APP_TITLE Then sRet = "IDS_APP_TITLE"
    If lVal = IDI_GALLERY Then sRet = "IDI_GALLERY"
    If lVal = IDI_SMALL Then sRet = "IDI_SMALL"
    If lVal = IDC_GALLERY Then sRet = "IDC_GALLERY"
    If lVal = IDB_RECTANGLE_96 Then sRet = "IDB_RECTANGLE_96"
    If lVal = IDB_RECTANGLE_120 Then sRet = "IDB_RECTANGLE_120"
    If lVal = IDB_RECTANGLE_144 Then sRet = "IDB_RECTANGLE_144"
    If lVal = IDB_RECTANGLE_192 Then sRet = "IDB_RECTANGLE_192"
    If lVal = IDB_ROUNDED_RECTANGLE_96 Then sRet = "IDB_ROUNDED_RECTANGLE_96"
    If lVal = IDB_ROUNDED_RECTANGLE_120 Then sRet = "IDB_ROUNDED_RECTANGLE_120"
    If lVal = IDB_ROUNDED_RECTANGLE_144 Then sRet = "IDB_ROUNDED_RECTANGLE_144"
    If lVal = IDB_ROUNDED_RECTANGLE_192 Then sRet = "IDB_ROUNDED_RECTANGLE_192"
    If lVal = IDB_ELLIPSE_96 Then sRet = "IDB_ELLIPSE_96"
    If lVal = IDB_ELLIPSE_120 Then sRet = "IDB_ELLIPSE_120"
    If lVal = IDB_ELLIPSE_144 Then sRet = "IDB_ELLIPSE_144"
    If lVal = IDB_ELLIPSE_192 Then sRet = "IDB_ELLIPSE_192"
    If lVal = IDB_DIAMOND_96 Then sRet = "IDB_DIAMOND_96"
    If lVal = IDB_DIAMOND_120 Then sRet = "IDB_DIAMOND_120"
    If lVal = IDB_DIAMOND_144 Then sRet = "IDB_DIAMOND_144"
    If lVal = IDB_DIAMOND_192 Then sRet = "IDB_DIAMOND_192"
    If lVal = IDB_NONE_96 Then sRet = "IDB_NONE_96"
    If lVal = IDB_NONE_120 Then sRet = "IDB_NONE_120"
    If lVal = IDB_NONE_144 Then sRet = "IDB_NONE_144"
    If lVal = IDB_NONE_192 Then sRet = "IDB_NONE_192"
    If lVal = IDB_SOLID_96 Then sRet = "IDB_SOLID_96"
    If lVal = IDB_SOLID_120 Then sRet = "IDB_SOLID_120"
    If lVal = IDB_SOLID_144 Then sRet = "IDB_SOLID_144"
    If lVal = IDB_SOLID_192 Then sRet = "IDB_SOLID_192"
    If lVal = IDB_DASH_96 Then sRet = "IDB_DASH_96"
    If lVal = IDB_DASH_120 Then sRet = "IDB_DASH_120"
    If lVal = IDB_DASH_144 Then sRet = "IDB_DASH_144"
    If lVal = IDB_DASH_192 Then sRet = "IDB_DASH_192"
    If lVal = IDB_LISTBULLET_96 Then sRet = "IDB_LISTBULLET_96"
    If lVal = IDB_LISTBULLET_120 Then sRet = "IDB_LISTBULLET_120"
    If lVal = IDB_LISTBULLET_144 Then sRet = "IDB_LISTBULLET_144"
    If lVal = IDB_LISTLOWERCASE_96 Then sRet = "IDB_LISTLOWERCASE_96"
    If lVal = IDB_LISTLOWERCASE_120 Then sRet = "IDB_LISTLOWERCASE_120"
    If lVal = IDB_LISTLOWERCASE_144 Then sRet = "IDB_LISTLOWERCASE_144"
    If lVal = IDB_LISTNONE_96 Then sRet = "IDB_LISTNONE_96"
    If lVal = IDB_LISTNONE_120 Then sRet = "IDB_LISTNONE_120"
    If lVal = IDB_LISTNONE_144 Then sRet = "IDB_LISTNONE_144"
    If lVal = IDB_LISTNUMBERED_96 Then sRet = "IDB_LISTNUMBERED_96"
    If lVal = IDB_LISTNUMBERED_120 Then sRet = "IDB_LISTNUMBERED_120"
    If lVal = IDB_LISTNUMBERED_144 Then sRet = "IDB_LISTNUMBERED_144"
    If lVal = IDB_LISTROMANLOWERCASE_96 Then sRet = "IDB_LISTROMANLOWERCASE_96"
    If lVal = IDB_LISTROMANLOWERCASE_120 Then sRet = "IDB_LISTROMANLOWERCASE_120"
    If lVal = IDB_LISTROMANLOWERCASE_144 Then sRet = "IDB_LISTROMANLOWERCASE_144"
    If lVal = IDB_LISTROMANUPPERCASE_96 Then sRet = "IDB_LISTROMANUPPERCASE_96"
    If lVal = IDB_LISTROMANUPPERCASE_120 Then sRet = "IDB_LISTROMANUPPERCASE_120"
    If lVal = IDB_LISTROMANUPPERCASE_144 Then sRet = "IDB_LISTROMANUPPERCASE_144"
    If lVal = IDB_LISTUPPERCASE_96 Then sRet = "IDB_LISTUPPERCASE_96"
    If lVal = IDB_LISTUPPERCASE_120 Then sRet = "IDB_LISTUPPERCASE_120"
    If lVal = IDB_LISTUPPERCASE_144 Then sRet = "IDB_LISTUPPERCASE_144"
    If lVal = IDS_LISTNONE Then sRet = "IDS_LISTNONE"
    If lVal = IDS_LISTBULLET Then sRet = "IDS_LISTBULLET"
    If lVal = IDS_LISTNUMBERED Then sRet = "IDS_LISTNUMBERED"
    If lVal = IDS_LISTLOWERCASE Then sRet = "IDS_LISTLOWERCASE"
    If lVal = IDS_LISTUPPERCASE Then sRet = "IDS_LISTUPPERCASE"
    If lVal = IDS_LISTROMANLLOWERCASE Then sRet = "IDS_LISTROMANLLOWERCASE"
    If lVal = IDS_LISTROMANLUPPERCASE Then sRet = "IDS_LISTROMANLUPPERCASE"
    If lVal = IDS_RECTANGLE Then sRet = "IDS_RECTANGLE"
    If lVal = IDS_ELLIPSE Then sRet = "IDS_ELLIPSE"
    If lVal = IDS_ROUNDED_RECTANGLE Then sRet = "IDS_ROUNDED_RECTANGLE"
    If lVal = IDS_DIAMOND Then sRet = "IDS_DIAMOND"
    If lVal = IDS_BORDER_NONE Then sRet = "IDS_BORDER_NONE"
    If lVal = IDS_BORDER_SOLID Then sRet = "IDS_BORDER_SOLID"
    If lVal = IDS_BORDER_DASH Then sRet = "IDS_BORDER_DASH"
    If lVal = IDS_BORDERSIZE_1 Then sRet = "IDS_BORDERSIZE_1"
    If lVal = IDS_BORDERSIZE_3 Then sRet = "IDS_BORDERSIZE_3"
    If lVal = IDS_BORDERSIZE_5 Then sRet = "IDS_BORDERSIZE_5"
    If lVal = IDS_LAYOUT_1 Then sRet = "IDS_LAYOUT_1"
    If lVal = IDS_LAYOUT_2 Then sRet = "IDS_LAYOUT_2"
    If lVal = IDS_LAYOUT_3 Then sRet = "IDS_LAYOUT_3"
    If lVal = IDS_SIZE_CATEGORY Then sRet = "IDS_SIZE_CATEGORY"
    If lVal = IDS_COLOR_CATEGORY Then sRet = "IDS_COLOR_CATEGORY"
    If lVal = IDS_INVALID_SIZE_MESSAGE Then sRet = "IDS_INVALID_SIZE_MESSAGE"
    If lVal = IDS_INVALID_SIZE_TITLE Then sRet = "IDS_INVALID_SIZE_TITLE"
   If sRet = "" Then sRet = "(unknown)"
    GetCommandIdStr = sRet
    End Function
    Private Function dbg_PKEYToString(tpk As PROPERTYKEY) As String
    Dim sGID As String
    
    sGID = dbg_GUIDToString(tpk.fmtid, False)
    dbg_PKEYToString = "{" & sGID & ", " & tpk.pid & "}"
    End Function

    Private Function dbg_GUIDToString(tg As UUID, Optional bBrack As Boolean = True) As String
    'StringFromGUID2 never works, even "working" code from vbaccelerator AND MSDN
    dbg_GUIDToString = Right$("00000000" & Hex$(tg.Data1), 8) & "-" & Right$("0000" & Hex$(tg.Data2), 4) & "-" & Right$("0000" & Hex$(tg.Data3), 4) & _
    "-" & Right$("00" & Hex$(CLng(tg.Data4(0))), 2) & Right$("00" & Hex$(CLng(tg.Data4(1))), 2) & "-" & Right$("00" & Hex$(CLng(tg.Data4(2))), 2) & _
    Right$("00" & Hex$(CLng(tg.Data4(3))), 2) & Right$("00" & Hex$(CLng(tg.Data4(4))), 2) & Right$("00" & Hex$(CLng(tg.Data4(5))), 2) & _
    Right$("00" & Hex$(CLng(tg.Data4(6))), 2) & Right$("00" & Hex$(CLng(tg.Data4(7))), 2)
    If bBrack Then dbg_GUIDToString = "{" & dbg_GUIDToString & "}"
    End Function
    
    [Description("Loads a string resource with the ability to specify the HMODULE")]
    Private Function LoadStringFromRes(hMod As LongPtr, nId As Long) As String
        Dim sTmp As String = String$(MAX_RESOURCE_LENGTH, 0)
        Dim lRet As Long = LoadStringW(hMod, nId, StrPtr(sTmp), MAX_RESOURCE_LENGTH)
        If lRet Then sTmp = Left$(sTmp, lRet)
        'LogMsg "LoadStringFromRes(" & nId & ")=" & sTmp & "; lRet=" & lRet
        If lRet Then Return sTmp
    End Function
    
    Private Function ChrW2(ByVal AscW2 As Long) As String
        Dim s As String
        
        If AscW2 <= &HFFFF& Then
            ChrW2 = ChrW(AscW2)
        Else
            AscW2 = AscW2 And &HFFFF&
            s = DecToBin(AscW2)
            s = String$(20 - Len(s), "0") & s
            ChrW2 = ChrW(BinToDec(Left$(s, 10)) + &HD800&) & ChrW2 & ChrW(BinToDec(Right$(s, 10)) + &HDC00&)
        End If
    End Function
    ' Converts decimal to binary
    [IgnoreWarnings(TB0003)]
    Private Function DecToBin(ByVal nNumber) As String
        Do While nNumber > 0
            DecToBin = nNumber Mod 2 & DecToBin
            nNumber = nNumber \ 2
        Loop
        If DecToBin = "" Then DecToBin = "0"
    End Function
    
    ' Converts binary to decimal
    Private Function BinToDec(ByVal nBinary As String) As Long
        Dim c As Long
        Dim iLen As Long
        
        iLen = Len(nBinary)
        For c = iLen To 1 Step -1
            If Mid$(nBinary, c, 1) = "1" Then
                BinToDec = BinToDec + 2 ^ (iLen - c)
            End If
        Next
    End Function

#End Region

#Region "Subclassing"
    Private Function Subclass2(hWnd As LongPtr, lpFN As LongPtr, Optional uId As LongPtr = 0&, Optional dwRefData As LongPtr = 0&) As Boolean
    If uId = 0 Then uId = hWnd
        Subclass2 = SetWindowSubclass(hWnd, lpFN, uId, dwRefData):      Debug.Assert Subclass2
    End Function

    Private Function UnSubclass2(hWnd As LongPtr, ByVal lpFN As LongPtr, pid As LongPtr) As Boolean
        UnSubclass2 = RemoveWindowSubclass(hWnd, lpFN, pid)
    End Function
    
    [Description("Subclassing procedure for the RichEdit control and the PictureBox hosting it.")]
    Private Function PBWndProc(ByVal hWnd As LongPtr, ByVal uMsg As Long, ByVal wParam As LongPtr, ByVal lParam As LongPtr, ByVal uIdSubclass As LongPtr, ByVal dwRefData As LongPtr) As LongPtr
        Select Case uMsg
        
        Case WM_NOTIFYFORMAT
            Return NFR_UNICODE
          
        Case WM_SETCURSOR
            If hCurRE = 0 Then
                hCurRE = LoadCursor(App.hInstance, ByVal IDC_IBEAM)
                SetCursor hCurRE
            End If
        
        Case WM_CONTEXTMENU
            Dim pt As POINT
            Dim pCtxMenu As IUIContextualUI
            If pFramework IsNot Nothing Then
                pFramework.InvalidateUICommand IDC_UNDO, UI_INVALIDATIONS_STATE, UI_PKEY_Enabled
                pFramework.InvalidateUICommand IDC_REDO, UI_INVALIDATIONS_STATE, UI_PKEY_Enabled
                pFramework.GetView IDC_CMD_CONTEXTMAP1, IID_IUIContextualUI, pCtxMenu
                If pCtxMenu IsNot Nothing Then
                    pt.x = Get_X_lParam(lParam): pt.y = Get_Y_lParam(lParam)
                    pCtxMenu.ShowAtLocation pt.x, pt.y
                    ' If IsTextSelected() Then
                    '     If mEnableCPD = False Then
                    '         pFramework.SetUICommandProperty(IDC_COPY, UI_PKEY_Enabled, CVar(True))
                    '         pFramework.SetUICommandProperty(IDC_CUT, UI_PKEY_Enabled, CVar(True))
                    '         pFramework.SetUICommandProperty(IDC_DELETE, UI_PKEY_Enabled, CVar(True))
                    '         mEnableCPD = True
                    '     End If
                    ' Else
                    '     If mEnableCPD = True Then
                    '         pFramework.SetUICommandProperty(IDC_COPY, UI_PKEY_Enabled, CVar(False))
                    '         pFramework.SetUICommandProperty(IDC_CUT, UI_PKEY_Enabled, CVar(False))
                    '         pFramework.SetUICommandProperty(IDC_DELETE, UI_PKEY_Enabled, CVar(False))
                    '         mEnableCPD = False
                    '     End If
                    ' End If
                    mEnableCPD = IsTextSelected()
                    pFramework.InvalidateUICommand(IDC_CUT, UI_INVALIDATIONS_PROPERTY, UI_PKEY_Enabled)
                    pFramework.InvalidateUICommand(IDC_COPY, UI_INVALIDATIONS_PROPERTY, UI_PKEY_Enabled)
                    pFramework.InvalidateUICommand(IDC_DELETE, UI_INVALIDATIONS_PROPERTY, UI_PKEY_Enabled)
                    pFramework.FlushPendingInvalidations()
                End If
                Return S_OK
            End If
            
                        
        Case WM_NOTIFY
            Dim tNMH As NMHDR
            CopyMemory tNMH, ByVal lParam, LenB(Of NMHDR)
            If tNMH.hWndFrom = hRE Then
                If tNMH.Code = EN_SELCHANGE Then
                    ' Debug.Print "Received EN_SELCHANGE"
                    If pFramework IsNot Nothing Then
                        SyncAlignment
                        SyncLineSpacing
                        SyncListType
                        pFramework.InvalidateUICommand IDC_RICHFONT, UI_INVALIDATIONS_ALLPROPERTIES, vbNullPtr
                        ' If IsTextSelected() Then
                        '     If mEnableCPD = False Then
                        '         ' pFramework.SetUICommandProperty(IDC_COPY, UI_PKEY_Enabled, CVar(True))
                        '         ' pFramework.SetUICommandProperty(IDC_CUT, UI_PKEY_Enabled, CVar(True))
                        '         mEnableCPD = True
                        '     End If
                        ' Else
                        '     If mEnableCPD = True Then
                        '         ' pFramework.SetUICommandProperty(IDC_COPY, UI_PKEY_Enabled, CVar(False))
                        '         ' pFramework.SetUICommandProperty(IDC_CUT, UI_PKEY_Enabled, CVar(False))
                        '         mEnableCPD = False
                        '     End If
                        ' End If
                        mEnableCPD = IsTextSelected()
                        pFramework.InvalidateUICommand(IDC_CUT, UI_INVALIDATIONS_PROPERTY, UI_PKEY_Enabled)
                        pFramework.InvalidateUICommand(IDC_COPY, UI_INVALIDATIONS_PROPERTY, UI_PKEY_Enabled)
                        pFramework.FlushPendingInvalidations()
                    End If
                End If
            End If
        Case WM_COMMAND
            If HIWORD(CLng(wParam)) = EN_CHANGE Then
                ' Debug.Print "Received WM_COMMAND.EN_CHANGE fFirstChange=" & mFirstChange & ",lp=0x" & Hex$(lParam) & ", hWnd=" & hWnd & ", hRE=" & hRE & ", hPB=" & pbREHost.hWnd
                If mFirstChange = False Then
                    On Error Resume Next
                    pFramework.InvalidateUICommand(IDC_UNDO, UI_INVALIDATIONS_PROPERTY, UI_PKEY_Enabled)
                    If Err.LastHresult = S_OK Then pFramework.FlushPendingInvalidations()
                    mFirstChange = True
                    On Error GoTo 0
                End If
            End If
            
        Case WM_CLIPBOARDUPDATE 'Must use AddClipboardFormatListener to receive
            Dim lRet As Long
            If hRE Then
                lRet = CLng(SendMessage(hRE, EM_CANPASTE, 0, ByVal 0))
            End If
            If lRet = 0& Then
                If mEnablePaste Then
                    pFramework.SetUICommandProperty(IDC_PASTE, UI_PKEY_Enabled, CVar(False))
                    mEnablePaste = False
                End If
            Else
                If mEnablePaste = False Then
                    pFramework.SetUICommandProperty(IDC_PASTE, UI_PKEY_Enabled, CVar(True))
                    mEnablePaste = True
                End If
            End If
            
        Case WM_FINDCALLBACK
           Debug.Print "WM_FINDCALLBACK "
            Dim tFR As FINDREPLACEW
            tFR = CType(Of FINDREPLACEW)(lParam)
            Debug.Print "WM_FINDCALLBACK, flags=" & GetFindReplaceFlagsStr(tFR.Flags)
            Dim fWhole As BOOL = If((tFR.Flags And FR_WHOLEWORD) = FR_WHOLEWORD, CTRUE, CFALSE)
            Dim fCase As BOOL = If((tFR.Flags And FR_MATCHCASE) = FR_MATCHCASE, CTRUE, CFALSE)
            Dim fDown As BOOL = If((tFR.Flags And FR_DOWN) = FR_DOWN, CTRUE, CFALSE)
            Dim tRng As CHARRANGE
            Dim tFind As FINDTEXTEXW
            Dim dwFlags As FindReplaceFlags
            If (tFR.Flags And FR_FINDNEXT) = FR_FINDNEXT Then
                SendMessage hRE, EM_EXGETSEL, 0, tRng
                If fWhole Then dwFlags = FR_WHOLEWORD
                If fCase Then dwFlags = dwFlags Or FR_MATCHCASE
                Debug.Print "FindNext cursel=" & tRng.cpMin & " to " & tRng.cpMax & "; chr0 buff=" & ChrW$(sFindBuff(0)) & "; deref=" & LPWSTRtoStr(tFR.lpstrFindWhat, False)
                If fDown Then
                    dwFlags = dwFlags Or FR_DOWN
                    tFind.chrg.cpMax = -1
                    If tRng.cpMax > 0 Then
                        tFind.chrg.cpMin = tRng.cpMax
                    End If
                Else
                    tFind.chrg.cpMin = tRng.cpMin
                End If
                tFind.lpstrText = tFR.lpstrFindWhat
                If CLng(SendMessage(hRE, EM_FINDTEXTEX, dwFlags, ByVal VarPtr(tFind))) <> -1 Then
                    Debug.Print "FindNext match=" & tFind.chrgText.cpMin & " to " & tFind.chrgText.cpMax
                    SendMessage hRE, EM_EXSETSEL, 0, ByVal VarPtr(tFind.chrgText)
                Else
                    MsgBox "No matches found.", vbOKOnly, "Find"
                End If
                    
            ElseIf (tFR.Flags And FR_REPLACE) = FR_REPLACE Then
                Dim sCurSel As String = GetSelText()
                If tFR.wFindWhatLen > 0 Then
                    Dim sCurFind As String = LPWSTRtoStr(tFR.lpstrFindWhat, False)
                    Dim sCurRep As String = LPWSTRtoStr(tFR.lpstrReplaceWith, False)
                    Debug.Print "FR_REPLACE sCurFind=[" & sCurFind & "], sCurSel=[" & sCurSel & "], sCurRep=[" & sCurRep & "], RepLen=" & tFR.wReplaceWithLen
                    If ((fCase = False) And (StrComp(sCurFind, sCurSel, vbTextCompare) = 0)) Or ((fCase = True) And ((sCurFind = sCurSel) = True)) Then
                        SendMessage hRE, EM_REPLACESEL, CTRUE, ByVal StrPtr(sCurRep)
                    End If
                    'copy/paste of FR_FINDNEXT..inefficient but we're already way beyond the scope of showing how to use the ribbon
                    'this isn't an 'Else' block because like Wordpad, if the Replace succeeds, we want to advance the selection to the
                    'next find result automatically
                    SendMessage hRE, EM_EXGETSEL, 0, tRng
                    If fWhole Then dwFlags = FR_WHOLEWORD
                    If fCase Then dwFlags = dwFlags Or FR_MATCHCASE
                    Debug.Print "FindNext cursel=" & tRng.cpMin & " to " & tRng.cpMax & "; chr0 buff=" & ChrW$(sFindBuff(0)) & "; deref=" & LPWSTRtoStr(tFR.lpstrFindWhat, False)
                    If fDown Then
                        dwFlags = dwFlags Or FR_DOWN
                        tFind.chrg.cpMax = -1
                        If tRng.cpMax > 0 Then
                            tFind.chrg.cpMin = tRng.cpMax
                        End If
                    Else
                        tFind.chrg.cpMin = tRng.cpMin
                    End If
                    tFind.lpstrText = tFR.lpstrFindWhat
                    If CLng(SendMessage(hRE, EM_FINDTEXTEX, dwFlags, ByVal VarPtr(tFind))) <> -1 Then
                        Debug.Print "ReplaceFindNext match=" & tFind.chrgText.cpMin & " to " & tFind.chrgText.cpMax
                        SendMessage hRE, EM_EXSETSEL, 0, ByVal VarPtr(tFind.chrgText)
                    Else
                        If fWhole Then dwFlags = FR_WHOLEWORD
                        If fCase Then dwFlags = dwFlags Or FR_MATCHCASE
                        If fDown Then 'invert and try again like Wordpad
                            dwFlags = dwFlags And Not FR_DOWN
                            tFind.chrg.cpMin = tRng.cpMin
                            tFind.chrg.cpMax = 0
                        Else
                            dwFlags = dwFlags Or FR_DOWN
                            tFind.chrg.cpMax = -1
                            If tRng.cpMax > 0 Then
                                tFind.chrg.cpMin = tRng.cpMax
                            End If
                        End If
                        tFind.lpstrText = tFR.lpstrFindWhat
                        If CLng(SendMessage(hRE, EM_FINDTEXTEX, dwFlags, ByVal VarPtr(tFind))) <> -1 Then
                            Debug.Print "ReplaceFindNext match=" & tFind.chrgText.cpMin & " to " & tFind.chrgText.cpMax
                            SendMessage hRE, EM_EXSETSEL, CTRUE, ByVal VarPtr(tFind.chrgText)
                        Else
                            MsgBox "No matches found.", vbOKOnly, "Replace"
                        End If
                    End If
                End If
            ElseIf (tFR.Flags And FR_REPLACEALL) = FR_REPLACEALL Then
                If tFR.wFindWhatLen > 0 Then
                    If fCase Then
                        If lstrcmpW(tFR.lpstrFindWhat, tFR.lpstrReplaceWith) = 0 Then Return 0 'stop infinite loop
                    Else
                        If lstrcmpiW(tFR.lpstrFindWhat, tFR.lpstrReplaceWith) = 0 Then Return 0 'stop infinite loop
                    End If
                    Do
                        If fWhole Then dwFlags = FR_WHOLEWORD
                        If fCase Then dwFlags = dwFlags Or FR_MATCHCASE
                        dwFlags = dwFlags Or FR_DOWN
                        tFind.lpstrText = tFR.lpstrFindWhat
                        tFind.chrg.cpMin = 0
                        tFind.chrg.cpMax = -1
                        If CLng(SendMessage(hRE, EM_FINDTEXTEX, dwFlags, ByVal VarPtr(tFind))) <> -1 Then
                            SendMessage hRE, EM_EXSETSEL, 0, ByVal VarPtr(tFind.chrgText)
                            SendMessage hRE, EM_REPLACESEL, 0, ByVal tFR.lpstrReplaceWith
                        Else
                            Exit Do
                        End If
                    Loop
                End If
            ElseIf (tFR.Flags And FR_DIALOGTERM) = FR_DIALOGTERM Then
                If hHookFR Then UnhookWindowsHookEx hHookFR
                hHookFR = 0
                hFR = 0
            End If
            
        Case WM_DESTROY
            Call UnSubclass2(hWnd, AddressOf PBWndProc, uIdSubclass)
        End Select
        PBWndProc = DefSubclassProc(hWnd, uMsg, wParam, lParam)
    End Function
    
    [Description("Subclassing procedure for the Galleries PictureBox hosting it.")]
    Private Function GalWndProc(ByVal hWnd As LongPtr, ByVal uMsg As Long, ByVal wParam As LongPtr, ByVal lParam As LongPtr, ByVal uIdSubclass As LongPtr, ByVal dwRefData As LongPtr) As LongPtr
        Select Case uMsg
        
        Case WM_NOTIFYFORMAT
            Return NFR_UNICODE
          
        Case WM_SIZE
            Dim rc As RECT
            GetClientRect hWnd, rc
            InvalidateRect hWnd, rc, CTRUE
            
        Case WM_PAINT
            GalWndProc = DefSubclassProc(hWnd, uMsg, wParam, lParam)
            Dim rct As RECT
            GetClientRect hWnd, rct
            If mRender IsNot Nothing Then
                mRender.DrawShapes rct
            End If
            Return 0
        Case WM_DESTROY
            Call UnSubclass2(hWnd, AddressOf GalWndProc, uIdSubclass)
        End Select
        GalWndProc = DefSubclassProc(hWnd, uMsg, wParam, lParam)
    End Function
 
    Public Function TaskDialogCallbackProc(ByVal hwnd As LongPtr, ByVal uNotification As Long, ByVal wParam As LongPtr, ByVal lParam As LongPtr, ByVal lpRefData As LongPtr) As LongPtr
        Select Case uNotification
            'Replace the shield icon with our app icon
            Case TDN_DIALOG_CONSTRUCTED
                SendMessageW hwnd, TDM_UPDATE_ICON, TDIE_ICON_MAIN, ByVal StrPtr(szHelpIconRes)
            
            'lParam is a pointer to the URL, so just forward it to execute with default browser.
            Case TDN_HYPERLINK_CLICKED
                Call ShellExecuteW(0, 0, lParam, 0, 0, SW_SHOWNORMAL)
        End Select
    End Function
 
    Private Function FRHookProc(ByVal nCode As Long, ByVal wParam As LongPtr, ByVal lParam As LongPtr) As LongPtr
    If nCode >= HC_ACTION And wParam = PM_REMOVE Then
        Dim Msg As MSG
        CopyMemory Msg, ByVal lParam, LenB(Msg)
        If Msg.message >= WM_KEYFIRST And Msg.message <= WM_KEYLAST Then
                    If IsDialogMessage(hFR, Msg) <> 0 Then
                        Msg.message = WM_NULL
                        Msg.wParam = 0
                        Msg.lParam = 0
                        CopyMemory ByVal lParam, Msg, LenB(Msg)
            End If
        End If
    End If
    FRHookProc = CallNextHookEx(hHookFR, nCode, wParam, ByVal lParam)
    End Function
    
    

#End Region
 
End Class


[Description("Class to render the Shapes Gallery image.")]
[COMCreatable(False)]
Class CRenderer
    Option Explicit
    Private Const SHAPE_MARGIN = 5
    
    Public Enum SHAPE_TYPE
        stRECTANGLE = 0
        stELLIPSE = 1
        stROUNDED_RECTANGLE = 2
        stDIAMOND = 3
    End Enum
    Public Enum SHAPE_COLOR
        scRED = 0
        scGREEN = 1
        scBLUE = 2
    End Enum
    Public Enum SHAPE_SIZE
        ssSMALL = 0
        ssMEDIUM = 1
        ssLARGE = 2
    End Enum
    Public Enum BORDER_STYLE
        bsNONE = 0
        bsSOLID = 1
        bsDASH = 2
    End Enum
    Public Enum VIEW_LAYOUT
        LAYOUT1 = 0
        LAYOUT2 = 1
        LAYOUT3 = 2
    End Enum
    Public Type RenderParam
        eShapeType As SHAPE_TYPE
        eShapeColor As SHAPE_COLOR
        eShapeSize As SHAPE_SIZE
        eBorderStyle As BORDER_STYLE
        uBorderSize As Long
        eViewLayout As VIEW_LAYOUT
    End Type
            
    Private mHwnd As LongPtr
    Private mDC As LongPtr
    Private oDst As Object
    Private param As RenderParam
    
    Private aColors(2) As Long
    
    Sub New(obj As Object)
        mHwnd = obj.hWnd
        mDC = obj.HDC
        Set oDst = obj
        aColors(0) = RGB(255, 0, 0)
        aColors(1) = RGB(0, 255, 0)
        aColors(2) = RGB(0, 0, 255)
    End Sub
    
    Public Sub GetRenderParam(pParam As RenderParam)
        pParam = param
    End Sub
    
    Public Sub UpdateRenderParam(parameter As RenderParam)
        param = parameter
        oDst.Cls
        InvalidateRect mHwnd, vbNullPtr, CTRUE
    End Sub
    
    Public Sub DrawShapes(rc As RECT)
        
        Dim nCount As Long = param.eViewLayout + 1
        Dim sz As SIZE
        sz.cx = rc.Right - rc.Left
        sz.cy = rc.Bottom - rc.Top
        
        Dim hBrush As LongPtr = CreateSolidBrush(aColors(param.eShapeColor))
        
        Dim hOldBrush As LongPtr = SelectObject(mDC, hBrush)
        
        Dim nPenStyle As GdiPenStyles
        Dim nBorderSize As Long = param.uBorderSize
        
        Select Case param.eBorderStyle
            Case bsDASH
                nPenStyle = PS_DASH
                nBorderSize = 1
            Case bsSOLID
                nPenStyle = PS_SOLID
            Case Else
                nPenStyle = PS_NULL
        End Select
        
        Dim hPen As LongPtr = CreatePen(nPenStyle, nBorderSize, RGB(0, 0, 0))
        Dim hOldPen As LongPtr = SelectObject(mDC, hPen)
        Dim nLength As Long = If(sz.cx < sz.cy, sz.cx, sz.cy) / nCount
        nLength -= SHAPE_MARGIN
        If nLength > 0 Then
            nLength = nLength * (param.eShapeSize + 1) / 3
        Else
            nLength = 0
        End If
        
        Dim i As Long, j As Long
        For i = 0 To nCount - 1
            For j = 0 To nCount - 1
                Dim ptCenter As POINT
                ptCenter.y = rc.Top + (2 * i + 1) * sz.cy / (2 * nCount)
                ptCenter.x = rc.Left + (2 * j + 1) * sz.cx / (2 * nCount)
                Select Case param.eShapeType
                    Case stRECTANGLE, stROUNDED_RECTANGLE
                        DrawRectangle mDC, ptCenter, nLength, param.eShapeType = stROUNDED_RECTANGLE
                    Case stELLIPSE
                        DrawEllipse mDC, ptCenter, nLength
                    Case stDIAMOND
                        DrawDiamond mDC, ptCenter, nLength
                End Select
            Next
        Next
        
        SelectObject mDC, hOldPen
        SelectObject mDC, hOldBrush
        
        DeleteObject hPen
        DeleteObject hBrush
    End Sub
    
    
    Private Sub DrawRectangle(hDC As LongPtr, ptCtr As POINT, nBoxLen As Long, bRounded As Boolean)
        'Debug.Print "DrawRect"
        If bRounded Then
            Dim nRoundLen As Long = nBoxLen / 10
            If nRoundLen < 2 Then nRoundLen = 2
            
            RoundRect hDC, ptCtr.x - nBoxLen / 2, ptCtr.y - nBoxLen / 2, _
                        ptCtr.x + nBoxLen / 2, ptCtr.y + nBoxLen / 2, _
                        nRoundLen, nRoundLen
                        
        Else
            Rectangle hDC, ptCtr.x - nBoxLen / 2, ptCtr.y - nBoxLen / 2, _
                        ptCtr.x + nBoxLen / 2, ptCtr.y + nBoxLen / 2
        End If

    End Sub
    
    Private Sub DrawEllipse(hDC As LongPtr, ptCtr As POINT, nBoxLen As Long)
        Debug.Print "DrawEllipse"
        Ellipse(hDC, ptCtr.x - nBoxLen / 2, ptCtr.y - nBoxLen / 2, _
                ptCtr.x + nBoxLen / 2, ptCtr.y + nBoxLen / 2)
    End Sub
    
    Private Sub DrawDiamond(hDC As LongPtr, ptCtr As POINT, nBoxLen As Long)
        Debug.Print "DrawDiamond"
        Dim pt(3) As POINT
        Dim nLength As Long = nBoxLen / 2
        
        pt(0).x = ptCtr.x
        pt(0).y = ptCtr.y - nLength
        
        pt(1).x = ptCtr.x - nLength
        pt(1).y = ptCtr.y

        pt(2).x = ptCtr.x
        pt(2).y = ptCtr.y + nLength

        pt(3).x = ptCtr.x + nLength
        pt(3).y = ptCtr.y
        
        Polygon hDC, pt(0), 4
    End Sub

End Class